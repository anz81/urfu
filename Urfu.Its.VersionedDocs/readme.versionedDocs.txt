Версионизированные документы.

Документы хранятся в виде блоков с сериализованными в формате JSON данными. Блоки поддерживают версионность, которая обрабатывается во внутренностях движка. Каждый документ имеет шаблон. Шаблон документа содержит схему данных документа и docx файл с разметкой вида <<{название команды}>>.

Разработка производится в двух проектах:
1. Urfu.Its.VersionedDocs - инфраструктура для работы с документами.
	(Нудная часть)
	Компоненты с которыми придется работать:
	1) IVersionedDocumentService - абстракция для работы с документом любого типа.
	Сервис позволяет создавать модели документов (восстанавливать CLR-объекты из JSON-данных в БД), формировать печатные формы документов и сохранять блоки данных с поддержкой версионности. Комментарии к методам в интерфейсе.
	Реализация интерфейса - класс VersionedDocumentService, который не следует использовать напрямую. Вся работа должна вестись через абстракцию IVersionedDocumentService. 
	Реализация сервиса зарегистрирована в качестве зависимости и может быть внедрена в контроллер через конструктор (пример в ModuleWorkingProgramController).
	2) IWorkingProgramService<TSchemaModel> - абстракция для работы с документами конкретного типа. 
	Сервис позвляет создавать документы конкретного типа, инициализируя их начальную структуру, получать актуальный дескриптор документа (описание документа, с которым работает инфраструктура движка), и регистрировать зависимости для загрузчиков данных блоков (интерфейс IBlockDataLoader).
	Реализация интерфейса осуществляется через создание класса, унаследованного от абстрактного класса WorkingProgramService<T>. 	
	Реализации находятся в папке Urfu.Its.VersionedDocs/Documents/{DocumentTypeName}.
	Реализации сервисов регистрируются как зависимости под интерфейсом IWorkingProgramService<TSchemaModel> и могут быть внедрены в контроллеры через конструктор (пример в ModuleWorkingProgramController).	
	3) IBlockDataLoader - загрузчик данных блока. Применяются для загрузки справочников и актуальных версий данных из стороннего источника (БД, внешние системы).
	Загрузчики срабатывают для документов имеющих актуальную структуру данных (структуру, соответсвующую текущей структуре документа в системе). Планируется доработка логики срабатывания загрузчиков еще и в зависимости от статусов документа.
	Примеры реализации загрузчиков в Urfu.Its.VersionedDocs/Documents/Shared/Loaders.	
	4) Модель схемы документа - clr-объект, описывающий структуру документа.
	Модель схемы документа используется для создания дескрипторов документов. Созданием дескрипторов занимается фабрика IVersionedDocumentDescriptorFactory<TSchemaModel>.
	Существуют две реализации фабрики, от которых зависит способ описания модели схемы:
		4.1) AllPropertiesAreBlocksDescriptorFactory - реализация создает на каждое свойство модели отдельный блок. Регистрация загрузчика для блока возможна с использованием атрибута [Block(LoaderType = ...)] на свойстве модели
		4.2) MarkedPropertiesAreBlocksDescriptorFactory - реализация создает блоки для каждого свойства, отмеченного атрибутом BlockAttribute.
	Создание более предпочительной для конкретной модели схемы фабрики производится сервисом IWorkingProgramService<TSchemaModel>.
	Пример модели схемы ModuleWorkingProgramSchemaModel.
	Если текущая модель схемы в системе не соответсвует схеме документа при его создании, то схема документа считается не актуальной, его сохранение больше не возможно (проверяется в сервисе IVersionedDocumentService), но возможно восстановление прокси-модели для формирования печатной формы.

2. Urfu.Its.Web - контроллеры и представления документов.
	2.1) Контроллеры (пример ModuleWorkingProgramController)
	Для каждого типа документа создается отдельный контроллер. 
	В конструктор контроллера внедряются зависимости: ApplicationDbContext db, IWorkingProgramService<ModuleWorkingProgramSchemaModel> workingProgramService, IVersionedDocumentService documentService. Важно, чтобы контекст бд внедрялся как зависимость, а не создавался каким-либо иным способом.
	После этого можно использовать оба сервиса для создания документов, их сохранения и формирования печатных форм.
	2.2) Представления (пример Views/ModuleWorkingProgram/Edit.cshtml)
	Для каждого документа создается отдельное представление, в которое подключается общий для всех типов документов скрипт <script src="@Url.Content("~/Scripts/VersionedDocs/versionedDocs.js")"></script>.
	Прокси-модель документа передается как модель представления и восстанавливается в качество javascript-объекта на странице.
	Далее создается модель представления конкретного документа, в которую в качестве данных устанавливается модель данных документа (ранее восстановленная на странице).
	Затем создается панель, которая будет содержать UI компоненты-блоки данных. Необходимая конфигурация панели должна содержать свойства:
		controller: 'versioneddocument',
		saveUrl: '@Url.Action("SaveBlocks")',
		documentId: @Model.DocumentId,
		viewModel: { type: 'moduleworkingprogram' }, // название типа VM указывается такое, какой alias у VM-а.
		defaults: {
			xtype: 'block'
		},
	И в конце реализуются UI компоненты для каждого из блоков. Компонент может содержать метод dataReader для формирования данных блока, соответсвующих схеме.
	Кнопки сохранения блоков добавляются автоматически и обрабатываются вью-контроллером из versionedDocs.js. Кнопку "Сохранить все" нужно добавить отдельно в представлении.
