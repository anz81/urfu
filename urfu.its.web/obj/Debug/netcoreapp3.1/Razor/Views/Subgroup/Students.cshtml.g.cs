#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Students.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e8e1a7c37e4c5ffeefc583fbb7090782bb46dc59"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Subgroup_Students), @"mvc.1.0.view", @"/Views/Subgroup/Students.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e8e1a7c37e4c5ffeefc583fbb7090782bb46dc59", @"/Views/Subgroup/Students.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Subgroup_Students : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Urfu.Its.Web.Controllers.SubgroupVM>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Students.cshtml"
  
    ViewBag.Title = "Редактирование студентов подгруппы "+Model.Subgroup.Name;
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script type=\"text/javascript\">\r\n        var lastFilter;\r\n        var subgroupId = ");
#nullable restore
#line 13 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Students.cshtml"
                    Write(Model.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();

            var store = Ext.create(""Ext.data.Store"",
            {
                fields: [
                    ""Id"", ""Surname"", ""Name"",""StudentGroupId"",""AnotherGroupGroupId"",""Status"", ""PatronymicName"", ""variantName"", {
                        name: ""Included"",
                        type: 'bool'
                    }, ""IncludedInChild""
                ],
                //autoLoad: true,
                //leadingBufferZone: 25,
                //pageSize: 50,
                //purgePageCount:2 ,
                remoteSort:
                    true,
                remoteFilter:
                    true,
                proxy:
                {
                    type: 'ajax',
                    url:
                        '/Subgroup/Students?id=' + ");
#nullable restore
#line 38 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Students.cshtml"
                                              Write(Model.Subgroup.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@",
                    reader:
                    {
                        type: 'json',
                        rootProperty:
                            'data',
                        totalProperty:
                            'total'
                    },
                    timeout: 90000
               
                },
                listeners: {
                    update: function(self, record, operation, modifiedFieldNames, details, eOpts) {
                        if (operation !== Ext.data.Model.EDIT) {
                            //self.sourcerejectChanges();
                            return;
                        }
                        if (modifiedFieldNames.length !== 1 || modifiedFieldNames[0] !== 'Included') {
                            return;
                        }

                    }
                }
            });

            function studentsMembership(include) {
                var title = include ? ""Зачисление"" : ""Удаление зачислений"";
");
                WriteLiteral(@"                Ext.MessageBox.wait(title); 
                setTimeout(store.each(function(record, index) {
                        if (!record.get('AnotherGroup')) {
                            record.set(""Included"", include);
                        }
                    }),
                    0);
                Ext.Ajax.request({
                    url: '/Subgroup/StudentsMembership',
                    method: 'POST',
                    params: {
                        include: include,
                        subgroupId: subgroupId,
                        filter:JSON.stringify(lastFilter)
                    },
                    success: function(response) {
                        var data = Ext.decode(response.responseText);
                        if (response.status !== 200)
                            window.reload();
                        Ext.MessageBox.hide();
                        if (data.msg && data.msg.length > 0) {
                            Ext.MessageBox.");
                WriteLiteral(@"show({
                                title: 'Информационное сообщение',
                                msg: data.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO // иконка мб {ERROR,INFO,QUESTION,WARNING}
                                //width:300,                       // есть еще minWidth
                                //closable:false,                  // признак наличия икнки закрытия окна
                            });
                        }
                        store.reload();
                    },
                    complete: function(response) {
                        Ext.MessageBox.hide();
                    }
                });
                
            }

            var filtersWnd = null ;
            var setFilter = function() {
                lastFilter = [
                    { property: 'Surname', value: filtersWnd.getComponent(""Surname"").getValue() },
                    { prop");
                WriteLiteral(@"erty: 'Name', value: filtersWnd.getComponent(""Name"").getValue() },
                    {
                        property: 'PatronymicName',
                        value: filtersWnd.getComponent(""PatronymicName"").getValue()
                    },
                    { property: 'variantName', value: filtersWnd.getComponent(""variantName"").getValue() },
                    { property: 'Status', value: filtersWnd.getComponent(""Status"").getValue() }
                ];
                store.filter(lastFilter);
            }
            filtersWnd = Ext.create('Ext.window.Window',
            {
                title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLabel: ""Фамилия"", itemId: ""Surname"" },
                    { fi");
                WriteLiteral(@"eldLabel: ""Имя"", itemId: ""Name"" },
                    { fieldLabel: ""Отчество"", itemId: ""PatronymicName"" },
                    { fieldLabel: ""Траектория"", itemId: ""variantName"" },
                    { fieldLabel: ""Статус"", itemId: ""Status"", value: ""Активный""}
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function() {
                            lastFilter = [
                                { property: 'Surname', value: filtersWnd.getComponent(""Surname"").getValue() },
                                { property: 'Name', value: filtersWnd.getComponent(""Name"").getValue() },
                                {
                                    property: 'PatronymicName',
                                    value: filtersWnd.getComponent(""PatronymicName"").getValue()
                                },
                                { property: 'variantName', value: filtersWnd.getComponent(""variantName"").ge");
                WriteLiteral(@"tValue() },
                                { property: 'Status', value: filtersWnd.getComponent(""Status"").getValue() }
                            ];
                            store.filter(lastFilter);
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });
          
            setFilter();
            var gridPanel = Ext.create('Ext.grid.Panel',
            {
                region: 'center',
                store: store,
                loadMask: true,
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                    },
                    {
                        xtype: 'button',
                       ");
                WriteLiteral(@" text: ""Отменить фильтры"",
                        handler: function() {
                            store.clearFilter();
                            lastFilter = [];
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Скрыть\\показать включенных студентов"",
                        handler: function() {
                            window.showIncluded = !window.showIncluded;
                            if (window.showIncluded) {
                                store.filter('Included', true);
                                lastFilter.Included = true;
                            } else {
                                store.clearFilter();
                                lastFilter = [];
                            }
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Список подгрупп"",
                        ");
                WriteLiteral("handler: function() {\r\n                            window.location = \"/Subgroup/Index?programId=");
#nullable restore
#line 200 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Students.cshtml"
                                                                    Write(Model.Subgroup.Meta.programId);

#line default
#line hidden
#nullable disable
                WriteLiteral("&focus=");
#nullable restore
#line 200 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Students.cshtml"
                                                                                                         Write(Model.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""";
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Зачислить"",
                        handler: function() {
                            studentsMembership(true);
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Удалить зачисления"",
                        handler: function() {
                            studentsMembership(false);
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Экспорт в Excel"",
                        handler: function() {
                            window.location = ""/Subgroup/DownloadSubgroupReport?subgroupId=");
#nullable restore
#line 221 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Students.cshtml"
                                                                                      Write(Model.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""";
                        }
                    }
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Фамилия',
                        dataIndex: 'Surname',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Имя',
                        dataIndex: 'Name',
                        width: 200,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Отчество',
                        dataIndex: 'PatronymicName',
                        width: 200,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Статус',
                        dataIndex: 'Status',
                        ");
                WriteLiteral(@"width: 150,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'В подгруппе',
                        dataIndex: 'Included',
                        width: 150,
                        xtype: 'checkcolumn',

                        listeners: {
                            beforecheckchange: function (column, recordIndex) {
                                //alert(""hello"");
                                var record = store.getAt(recordIndex);
                                var included = record.get('Included');
                                if ((record.get('AnotherGroup') !== null && !included
                                    && record.get('AnotherGroupGroupId').includes(record.get('StudentGroupId')))
                                    || (record.get('StudentGroupId') !== '");
#nullable restore
#line 264 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Students.cshtml"
                                                                     Write(Model.Subgroup.Meta.groupId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"')) {
                                    return false;
                                }
                                var studentId = record.get('Id');


                                Ext.Ajax.request({
                                    url: '/Subgroup/StudentMembership',
                                    method: 'POST',
                                    params: {
                                        include: !included,
                                        studentId: studentId,
                                        subgroupId: subgroupId
                                    },
                                    success: function(response) {
                                        var data = Ext.decode(response.responseText);
                                        if (response.status === 200)
                                            record.commit();
                                        else
                                            record.reject();

           ");
                WriteLiteral(@"                             if (data.msg && data.msg.length > 0) {
                                            Ext.MessageBox.show({
                                                title: 'Информационное сообщение',
                                                msg: data.msg,
                                                buttons: Ext.MessageBox.OK,
                                                icon: Ext.MessageBox.INFO,
                                                //callback: function(btn) {
                                                //    setTimeout(function() {
                                                //            curMBox = null;
                                                //        },
                                                //        1000);
                                                //
                                                //} // иконка мб {ERROR,INFO,QUESTION,WARNING}
                                                //width:300,                ");
                WriteLiteral(@"       // есть еще minWidth
                                                //closable:false,                  // признак наличия икнки закрытия окна
                                            });
                                        }
                                    }
                                });
                            }
                        }
                    },
                    {
                        header: 'Зачислен в подгруппу',
                        align: 'center',
                        dataIndex: 'AnotherGroup',
                        renderer: Urfu.renders.htmlEncodeWithToolTip,
                        width: 600
                    },
                    {
                        header: 'Траектория',
                        dataIndex: 'variantName',
                        width: 500,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    }
                ],
                selModel: {
                 ");
                WriteLiteral(@"   selType: 'cellmodel'
                },
                plugins: [
                    Ext.create('Ext.grid.plugin.CellEditing',
                    {
                        clicksToEdit: 1
                    })
                ]
            });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Urfu.Its.Web.Controllers.SubgroupVM> Html { get; private set; }
    }
}
#pragma warning restore 1591
