#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6c6c1040e93a0ab52b7da2009c48b443dfff5257"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Subgroup_Index), @"mvc.1.0.view", @"/Views/Subgroup/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6c6c1040e93a0ab52b7da2009c48b443dfff5257", @"/Views/Subgroup/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Subgroup_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
  
    ViewBag.Title = "Подгруппы версии ОП "+ ViewBag.programInfo;
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();
            Ext.override(Ext.data.proxy.Ajax, { timeout: 60000 });

            var store = Ext.create(""Ext.data.Store"",
            {
                idProperty: 'Id',
                fields: [""Id"", ""GroupName"", ""Term"", ""Year"", ""ModuleTitle"", ""Name"", ""subgroupType"", ""Limit"", ""count""],
                autoLoad: true,
                remoteSort: true,
                groupField: 'ModuleTitle',
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: '/Subgroup/Index?programId=' + ");
#nullable restore
#line 23 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
                                                   Write(ViewBag.programId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@",
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                    }
                }
            });

            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""SubgroupsFilters"") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }

            var filtersWnd = null;
            var setFilters = function() {
                var settings = [
                    { property: 'GroupName', value: filtersWnd.getComponent(""GroupName"").getValue() },
                    { property: 'Term', value: filtersWnd.getComponent(""Term"").getValue() },
                    { property: 'Year', value: filtersWnd.getComponent(""Year"").getValu");
                WriteLiteral(@"e() },
                    { property: 'ModuleTitle', value: filtersWnd.getComponent(""ModuleTitle"").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent(""Name"").getValue() },
                    { property: 'subgroupType', value: filtersWnd.getComponent(""subgroupType"").getValue() },
                    { property: 'Limit', value: filtersWnd.getComponent(""Limit"").getValue() },
                    { property: 'count', value: filtersWnd.getComponent(""count"").getValue() }
                ];
                store.setFilters(settings);
                localStorage.setItem(""SubgroupsFilters"", JSON.stringify(settings));
            }
            filtersWnd = Ext.create('Ext.window.Window',
            {
                title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 50");
                WriteLiteral(@"0
                },
                items: [
                    { fieldLabel: ""Группа"", itemId: ""GroupName"", value: prevSettings[""GroupName""]},
                    { fieldLabel: ""Семестр"", itemId: ""Term"", value: prevSettings[""Term""] },
                    { fieldLabel: ""Год"", itemId: ""Year"", value: prevSettings[""Year""]},
                    { fieldLabel: ""Модуль"", itemId: ""ModuleTitle"", value: prevSettings[""ModuleTitle""] },
                    { fieldLabel: ""Индекс"", itemId: ""Name"", value: prevSettings[""Name""] },
                    { fieldLabel: ""Тип подгруппы"", itemId: ""subgroupType"", value: prevSettings[""subgroupType""]},
                    { fieldLabel: ""Лимит"", itemId: ""Limit"", value: prevSettings[""Limit""]},
                    { fieldLabel: ""Студенты"", itemId: ""count"", value: prevSettings[""count""]}
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function() {
                            setFilters()");
                WriteLiteral(@";
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

            setFilters();
            var tpl = '<a href=""/Subgroup/Students?id={Id}"">Студенты</a>\
                | <a href=""/Subgroup/Edit?id={Id}"">Редактировать</a> ';
            var grouping = Ext.create('Ext.grid.feature.Grouping',
                { ftype: 'grouping', collapsible: true, startCollapsed: true });
            var gridPanel = Ext.create('Ext.grid.Panel',
            {
                region: 'center',
                store: store,
                loadMask: true,
                features: [grouping],
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.s");
                WriteLiteral(@"how(); }
                    },
                    {
                        xtype: 'button',
                        text: ""Отменить фильтры"",
                        handler: function() {
                            store.clearFilter();
                            localStorage.setItem(""SubgroupsFilters"", ""[]"");
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Количество подгрупп"",
                        handler: function() { window.location = ""/MetaSubgroups/Index?programId=");
#nullable restore
#line 122 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
                                                                                           Write(ViewBag.programId);

#line default
#line hidden
#nullable disable
                WriteLiteral("\"; }\r\n                    },\r\n                    {\r\n                        xtype: \'button\',\r\n                        text: \"Создать подгруппы\",\r\n                        handler: function() { window.location = \"/Subgroup/Create?programId=");
#nullable restore
#line 127 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
                                                                                       Write(ViewBag.programId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"""; }
                    },
                    {
                        xtype: 'button',
                        text: ""Развернуть\\Свернуть группировку"",
                        handler: function() {
                            window.groupsCollapsed = !window.groupsCollapsed;
                            if (window.groupsCollapsed)
                                grouping.expandAll();
                            else
                                grouping.collapseAll();
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Распределить студентов"",
                        handler: function() {
                            window.location = ""/Subgroup/FillGroupsWithStudents?programId=");
#nullable restore
#line 144 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
                                                                                     Write(ViewBag.programId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""";
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Удалить"",
                        handler: function() {
                            var objects = gridPanel.getSelectionModel().getSelection();
                            if (objects.length === 0)
                                return;
                            Ext.MessageBox.confirm('Удаление подгрупп',
                                'Удалить подгруппы и зачисления студентов в них (' + objects.length + ' шт.) ?',
                                function(btn) {
                                    if (btn === 'yes') {
                                        var refresh = function() {
                                            window.location = ""/Subgroup/Index?programId=");
#nullable restore
#line 159 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
                                                                                    Write(ViewBag.programId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""";
                                        };
                                        Ext.Ajax.request({
                                            url: '/Subgroup/Delete',
                                            success: refresh,
                                            failure: refresh,
                                            params: { ids: objects.map(function(obj) { return obj.data.Id }) }
                                        });
                                    }
                                });

                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Копировать"",
                        handler: function() {
                            var objects = gridPanel.getSelectionModel().getSelection();
                            if (objects.length !== 2) {
                                Ext.MessageBox.alert(""Копирование зачислений студентов"", 'Выберите две подгруппы');
              ");
                WriteLiteral(@"                  return;
                            }

                            var o0 = objects[0].data;
                            var o1 = objects[1].data;

                            if ((!!o0.count) === (!!o1.count)) {
                                Ext.MessageBox.alert(""Копирование зачислений студентов"",
                                    'Одна из подгрупп должна быть пустой, в другую должны быть зачислены студенты');
                                return;
                            }


                            var src = null;
                            var dst = null;
                            if (o0.count === 0)
                                dst = o0;
                            if (o1.count === 0)
                                dst = o1;
                            if (o0.count !== 0)
                                src = o0;
                            if (o1.count !== 0)
                                src = o1;

                            window.locatio");
                WriteLiteral(@"n = ""/Subgroup/SimpleCopyMembership?srcId="" + src.Id + ""&dstId="" + dst.Id;

                            //Following is the deep-copy mechanics, curently use simple one
//                            if (objects.length !== 1) {
//                                Ext.MessageBox.alert(""Копирвоание зачислений студентов"", 'Выберите одну подгруппу');
//                                return;
//                            }
//                            var data = objects[0].data;
//
//
//                            var copyWnd = Ext.create('Ext.window.Window', {
//                                title: ""Копирвоание зачислений студентов"",
//                                autoHeight: true,
//                                resizable: false,
//                                width: 700,
//                                bodyPadding: 6,
//                                layout: 'anchor',
//                                defaults: {
//                                    xtype: 'textfield',
//         ");
                WriteLiteral(@"                           readOnly: true,
//                                    anchor: '100%'
//                                },
//                                items: [
//                                    { fieldLabel: ""Группа"", itemId: ""GroupNameField"", value: data.GroupName },
//                                    { fieldLabel: ""Модуль"", itemId: ""ModuleField"", value: data.ModuleTitle },
//                                    { fieldLabel: ""Дисциплина"", itemId: ""DiscipineNameField"", value: data.Name.split('\\')[1] },
//                                    {
//                                        itemId: ""DiscipineNameCombobox"",
//                                        xtype: 'combobox',
//                                        header: ""Дисциплина"",
//                                        store: Ext.create('Ext.data.Store', {
//                                            autoLoad: true,
//                                            fields: ['name','id'],proxy: {
//                 ");
                WriteLiteral("                               type: \'ajax\',\r\n//                                                url: \'/Subgroup/Disciplines?programId=");
#nullable restore
#line 237 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
                                                                                   Write(ViewBag.programId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
//                                                reader: {
//                                                    type: 'json',
//                                                    root: 'data'
//                                                }
//                                            }
//                                        }),
//                                        displayField: 'name',
//                                        value: data.Name.split('\\')[1],
//                                        valueField: 'id',
//                                        mode: 'local',
//                                        editable: false,
//                                        readOnly: false,
//                                        disableKeyFilter: false
//                                    },
//                                    { fieldLabel: ""Исходный семестр"", itemId: ""SourceField"", xtype: ""numberfield"", value: data.Term },
//                                    { fieldL");
                WriteLiteral(@"abel: ""Целевой семестр"", itemId: ""TargetField"", xtype: ""numberfield"", readOnly: false, value: parseInt(data.Term)+1 }
//                                ],
//                                buttons: [
//                                    {
//                                        text: ""OK"",
//                                        handler: function() {
//                                            window.location = ""/Subgroup/CopyMembership?programId=");
#nullable restore
#line 259 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
                                                                                               Write(ViewBag.programId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"&subgroupId=""+data.Id+""&targetTerm=""+copyWnd.getComponent(""TargetField"").getValue()+""&disciplineId=""+copyWnd.getComponent(""DiscipineNameCombobox"").getValue() ;
//                                        }
//                                    },
//                                    {
//                                        text: ""Отмена"",
//                                        handler: function() { copyWnd.close(); }
//                                    }
//                                ]
//                            });
//
//                            copyWnd.show();
                        }
                    },
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Группа',
                        dataIndex: 'GroupName',
                        width: 150, /*
                        layout: 'anchor',
                        items: [
                        {
            ");
                WriteLiteral(@"                xtype: 'textfield',
                            anchor: '100%',
                            margin: '3px'
                        }],*/
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Семестр',
                        dataIndex: 'Term',
                        width: 100,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Год',
                        dataIndex: 'Year',
                        width: 100,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Модуль',
                        dataIndex: 'ModuleTitle',
                        width: 300,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header:");
                WriteLiteral(@" 'Индекс',
                        dataIndex: 'Name',
                        width: 300,
                        renderer: function(value, metaData, record, rowIdx, colIdx, store) {
                            metaData.tdAttr = 'data-qtip=""' + value + '""';
                            return value;
                        }
                    },
                    {
                        header: 'Нагрузка',
                        align: 'center',
                        dataIndex: 'subgroupType',
                        renderer: Ext.util.Format.htmlEncode,
                        width: 180
                    },
                    {
                        header: 'Лимит',
                        align: 'center',
                        dataIndex: 'Limit',
                        renderer: Ext.util.Format.htmlEncode,
                        width: 120
                    },
                    {
                        header: 'Студенты',
                        align: 'center'");
                WriteLiteral(@",
                        dataIndex: 'count',
                        renderer: Ext.util.Format.htmlEncode,
                        width: 120
                    },
                    {
                        xtype: 'templatecolumn',
                        tpl: tpl,
                        sortable: false,
                        width: 270
                    }
                ],
                selModel: {
                    selType: 'checkboxmodel' /*,
                    showHeaderCheckbox: true,
                    mode: 'SIMPLE'*/
                }
            });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);


            gridPanel.getStore().on('load',
                function(store, records, options) {
                    var focus = '");
#nullable restore
#line 359 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
                            Write(ViewBag.Focus);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
                    if (focus && focus.length > 0) {

                        var focusRow = store.findExact('Id', parseInt(focus));
                        if (focusRow >= 0) {
                            var rowData = store.getAt(focusRow);
                            var gv = gridPanel.getView();

                            var groupingFeature = gridPanel.getView().features[0];

                            groupingFeature.expand(rowData.data['ModuleTitle'], true);

                            gv.focusRow(rowData);
                            gridPanel.getSelectionModel().select(rowData);
                        }
                        return false;
                    }
                });

            var alertString = '");
#nullable restore
#line 378 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Subgroup\Index.cshtml"
                          Write(ViewBag.Message);

#line default
#line hidden
#nullable disable
                WriteLiteral("\';\r\n            if (alertString.length > 0)\r\n                Ext.MessageBox.alert(\'Копирование зачислений студентов\', alertString);\r\n\r\n        });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
