#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\FirstTrainingPlaceFKs\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "826bf4999e2cf6ef28e935fa344a7bbfc18cecef"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_FirstTrainingPlaceFKs_Index), @"mvc.1.0.view", @"/Views/FirstTrainingPlaceFKs/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"826bf4999e2cf6ef28e935fa344a7bbfc18cecef", @"/Views/FirstTrainingPlaceFKs/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_FirstTrainingPlaceFKs_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\FirstTrainingPlaceFKs\Index.cshtml"
  
    ViewBag.Title = "Места проведения занятий физической культурой";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();

            var store = Ext.create(""Ext.data.BufferedStore"",
            {
                fields: [""Id"", ""Address"", ""Description""],
                autoLoad: true,
                pageSize: 300,
                remoteSort: true,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: '/FirstTrainingPlaceFKs/Index',
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                    }
                }
            });

            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""FirstPlacesFilters"") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][");
                WriteLiteral(@"""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }
            
            var filtersWnd = null;
            var setFilters = function() {
                var settings = [
                    { property: 'Address', value: filtersWnd.getComponent(""AddressField"").getValue() },
                    { property: 'Description', value: filtersWnd.getComponent(""DescriptionField"").getValue() }
                ];
                store.setFilters(settings);
                localStorage.setItem(""FirstPlacesFilters"", JSON.stringify(settings));
            };

            filtersWnd = Ext.create('Ext.window.Window', {
                title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
              ");
                WriteLiteral(@"      { fieldLabel: ""Адрес"", itemId: ""AddressField"", value: prevSettings[""Address""] },
                    { fieldLabel: ""Описание"", itemId: ""DescriptionField"", value: prevSettings[""Description""] }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });
            setFilters();


            var tpl = '<a href=""/FirstTrainingPlaceFKs/Edit?id={Id}"">Редактировать</a> \
                | <a href=""/FirstTrainingPlaceFKs/Delete?id={Id}"">Удалить</a>';

            var gridPanel = Ext.create('Ext.grid.Panel',
            {
                region: 'center',
                store: s");
                WriteLiteral(@"tore,
                loadMask: true,
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                    },
                    {
                        xtype: 'button',
                        text: ""Отменить фильтры"",
                        handler: function() {
                            store.clearFilter();
                            localStorage.setItem(""FirstPlacesFilters"", ""[]"");
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Создать место"",
                        handler: function () { window.location = ""/FirstTrainingPlaceFKs/Create""; }
                    }
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Описание',
   ");
                WriteLiteral(@"                     dataIndex: 'Description',
                        width: 310,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Адрес',
                        dataIndex: 'Address',
                        width: 310,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        xtype: 'templatecolumn',
                        tpl: tpl,
                        sortable: false,
                        width: 300
                    }
                ]
            });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);

        });
    </script>
");
            }
            );
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
