#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2fee912987b349add64fa7a77890d8b7e41510d4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_BasicCharacteristicOP_Index), @"mvc.1.0.view", @"/Views/BasicCharacteristicOP/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
using Urfu.Its.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
using Urfu.Its.Web.DataContext;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2fee912987b349add64fa7a77890d8b7e41510d4", @"/Views/BasicCharacteristicOP/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_BasicCharacteristicOP_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
  
    ViewBag.Title = "Список ОХОП";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

    var canManageWorkingPrograms = User.IsInRole(ItsRoles.WorkingProgramManager);
    var canViewWorkingPrograms = User.IsInRole(ItsRoles.WorkingProgramView);

#line default
#line hidden
#nullable disable
            WriteLiteral("<style>\r\n\r\n    .its-medium {\r\n        width: 24px;\r\n        height: 24px;\r\n        margin-left: 5px;\r\n    }\r\n</style>\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script");
                BeginWriteAttribute("src", " src=\"", 492, "\"", 554, 1);
#nullable restore
#line 21 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
WriteAttributeValue("", 498, Url.Content("~/Scripts/VersionedDocs/versionedDocs.js"), 498, 56, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@"></script>

    <script type=""text/javascript"">
    var localStorageName = ""BasicCharacteristicOPListFilter"";
    Ext.onReady(function() {
        Ext.tip.QuickTipManager.init();

        var focus = null;

        function required(value) {
            return (value != undefined && value.length > 0) ? true : ""Поле не может быть пустым"";
        }

        function parseJson(json) {
            var data = JSON.parse(json.replace(/&quot;/g, '""'));
            return data;
        }

        var dataDivisions = parseJson('");
#nullable restore
#line 39 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
                                  Write(ViewBag.Divisions);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n        var divisionStore = Ext.create(\"Ext.data.Store\",\r\n            {\r\n                data: dataDivisions\r\n            });\r\n        var directionStore = Ext.create(\"Ext.data.Store\", {});\r\n        var dataDirections = parseJson(\'");
#nullable restore
#line 45 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
                                   Write(ViewBag.Directions);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"');

        var profileStore = Ext.create(""Ext.data.Store"", {});

        var directionFiltersStore = Ext.create(""Ext.data.Store"", {});
        var profileFiltersStore = Ext.create(""Ext.data.Store"", {});


        var store = Ext.create(""Ext.data.Store"",
            {
                autoLoad: true,
                remoteSort: false,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: window.location.href,
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    }
                }
            });

        var prevSettings = {};
        try {
            var prevSettingString = JSON.parse(localStorage.getItem(localStorageName) || ""[]"");

            for (var i = 0; i < prevSettingString.length; i++) {
                prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
            }
        } catch (err) {
   ");
                WriteLiteral(@"     }
        var filtersWnd = null;

        var setFilters = function() {
            var settings = [
                { property: 'divisionId', value: filtersWnd.getComponent(""division"").getValue() },
                { property: 'directionId', value: filtersWnd.getComponent(""direction"").getValue() },
                { property: 'profileId', value: filtersWnd.getComponent(""profile"").getValue() }
            ];
            store.setFilters(settings);
            localStorage.setItem(localStorageName, JSON.stringify(settings));
        };

        var changeDivisionEvent = function(wnd, directions, profiles, newValue, isFilter){
            wnd.items.items.find(p => p.itemId == ""direction"").setValue('');
            directions.setData([]);

            wnd.items.items.find(p => p.itemId == ""profile"").setValue('');
            profiles.setData([]);

            if (newValue != '' && newValue != null) {
                try {
                    var currentDivisionData = divisionStore.data");
                WriteLiteral(@".items.filter(d => d.data.DivisionId == newValue)[0].data;
                    directions.setData(currentDivisionData.Directions);
                }
                catch{ }
            }
            else {
                if (isFilter) {
                    directions.setData(dataDirections);
                }
            }
        }

        var changeDirectionEvent = function (wnd, directions, profiles, newValue) {
            wnd.items.items.find(p => p.itemId == ""profile"").setValue('');
            profiles.setData([]);

            if (newValue != '' && newValue != null) {
                try {
                    var currentDirectionData = directions.data.items.filter(d => d.data.DirectionId == newValue)[0].data;
                    profiles.setData(currentDirectionData.Profiles);
                }
                catch{ }
            }
        }
        
        filtersWnd = Ext.create('Ext.window.Window',
            {
                title: ""Фильтры"",
                clos");
                WriteLiteral(@"eAction: 'hide',
                resizable: false,
                autoHeight: false,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500,
                    labelWidth: 130
                },
                items: [
                    {
                        fieldLabel: ""Институт"",
                        itemId: ""division"",
                        value: prevSettings['divisionId'],
                        xtype: ""combobox"",
                        store: divisionStore,
                        valueField: 'DivisionId',
                        displayField: 'DivisionName',
                        queryMode: 'local',
                        anyMatch: true,
                        width: 500,
                        listeners: {
                            change: function (t, newValue, oldValue, eOpts) {
                                changeDivisionEvent(filtersWnd, directionFiltersStore, profileFiltersS");
                WriteLiteral(@"tore, newValue, true);
                            }
                        }
                    },
                    {
                        fieldLabel: ""Направление"",
                        itemId: ""direction"",
                        value: prevSettings['directionId'],
                        xtype: ""combobox"",
                        store: directionFiltersStore,
                        valueField: 'DirectionId',
                        displayField: 'DirectionName',
                        queryMode: 'local',
                        anyMatch: true,
                        width: 500,
                        listeners: {
                            change: function (t, newValue, oldValue, eOpts) {
                                changeDirectionEvent(filtersWnd, directionFiltersStore, profileFiltersStore, newValue);
                            }
                        }
                    },
                    {
                        fieldLabel: ""Образовательная программа""");
                WriteLiteral(@",
                        itemId: ""profile"",
                        value: prevSettings['profileId'],
                        xtype: ""combobox"",
                        store: profileFiltersStore,
                        valueField: 'ProfileId',
                        displayField: 'ProfileName',
                        queryMode: 'local',
                        anyMatch: true,
                        width: 500
                    },
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

        changeDivisionEvent(filtersWnd, directionFiltersStore, profileFiltersStor");
                WriteLiteral(@"e, prevSettings['divisionId'], true);
        changeDirectionEvent(filtersWnd, directionFiltersStore, profileFiltersStore, prevSettings['directionId']);
        filtersWnd.getComponent(""direction"").setValue(prevSettings['directionId']);
        filtersWnd.getComponent(""profile"").setValue(prevSettings['profileId']);
        
        setFilters();

        var createWnd = Ext.create('Ext.window.Window',
            {
                title: ""Добавление ОХОП"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: false,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500,
                    labelWidth: 130
                },
                items: [
                    {
                        fieldLabel: ""Институт"",
                        itemId: ""division"",
                        xtype: ""combobox"",
                        store: divisionStore,
                 ");
                WriteLiteral(@"       valueField: 'DivisionId',
                        displayField: 'DivisionName',
                        queryMode: 'local',
                        anyMatch: true,
                        allowBlank: false,
                        width: 500,
                        listeners: {
                            change: function (t, newValue, oldValue, eOpts) {
                                changeDivisionEvent(createWnd, directionStore, profileStore, newValue, false);
                            }
                        }
                    },
                    {
                        fieldLabel: ""Направление"",
                        itemId: ""direction"",
                        xtype: ""combobox"",
                        store: directionStore,
                        valueField: 'DirectionId',
                        displayField: 'DirectionName',
                        queryMode: 'local',
                        anyMatch: true,
                        allowBlank: false,
      ");
                WriteLiteral(@"                  width: 500,
                        listeners: {
                            change: function (t, newValue, oldValue, eOpts) {
                                changeDirectionEvent(createWnd, directionStore, profileStore, newValue);
                            }
                        }
                    },
                    {
                        fieldLabel: ""Образовательная программа"",
                        itemId: ""profile"",
                        xtype: ""combobox"",
                        store: profileStore,
                        valueField: 'ProfileId',
                        displayField: 'ProfileName',
                        queryMode: 'local',
                        anyMatch: true,
                        allowBlank: false,
                        width: 500
                    },{
                        xtype: 'numberfield',
                        fieldLabel: 'Учебный год',
                        itemId: 'year',
                        hideTr");
                WriteLiteral(@"igger: true,
                        cls: 'field-margin',
                        minValue: 2014,
                        maxValue: 2099,
                        validator: required,
                        width: 200
                    }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function () {
                            var isValid = true;
                            createWnd.items.items.forEach(function (element, index, array) {
                                if (!element.isValid()) isValid = false;
                            });
                            if (!isValid) return false;
                            Ext.getBody().mask('Сохранение...');
                            Ext.Ajax.request({
                                url: '");
#nullable restore
#line 286 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
                                 Write(Url.Action("Create"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                params: {
                                    profile: createWnd.getComponent(""profile"").getValue(),
                                    year: createWnd.getComponent(""year"").getValue()
                                },
                                success: function (response) {
                                    var data = Ext.decode(response.responseText);
                                    if (data.success) {
                                        focus = data.id;
                                        createWnd.hide();
                                        store.reload();
                                    }
                                    else {
                                        Ext.MessageBox.show({
                                            title: 'Ошибка',
                                            msg: data.message,
                                            buttons: Ext.MessageBox.OK
                                        })");
                WriteLiteral(@";
                                    }
                                    Ext.getBody().unmask();
                                },
                                failure: function (response) {
                                    Ext.getBody().unmask();
                                    createWnd.hide();
                                }
                            });
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function () { createWnd.hide(); }
                    }
                ]
            });

        var editWnd = function (record) {
            return Ext.create('Ext.window.Window',
                {
                    title: ""Редактирование ОХОП"",
                    closeAction: 'hide',
                    overflowY: 'auto',
                    resizable: true,
                    maxHeight: 500,
                    autoHeight: true,
                    width: 400,");
                WriteLiteral(@"
                    modal: true,
                    bodyPadding: 6,
                    layout: { type: 'vbox', align: 'stretch' },
                    items: [
                        {
                            xtype: 'hidden',
                            hidden: true,
                            value: record.data.id,
                            itemId: ""Id""
                        },
                        {
                            xtype: 'label',
                            text: `${record.data.profile} ${record.data.profileTitle}`,
                            style: 'font-weight: normal;'
                        },
                        {
                            xtype: 'numberfield',
                            fieldLabel: 'Учебный год',
                            itemId: 'Year',
                            hideTrigger: true,
                            cls: 'field-margin',
                            minValue: 2014,
                            maxValue: 2099,
    ");
                WriteLiteral(@"                        validator: required,
                            width: 200,
                            value: record.data.year
                        }
                    ],
                    buttons: [
                        {
                            text: ""Сохранить"",
                            handler: function (btn) {
                                var isValid = true;
                                var wnd = this.up('window');

                                var yearCmp = wnd.getComponent(""Year"");
                                if (!yearCmp.isValid())
                                    return false;
                                                               
                                var id = wnd.getComponent(""Id"").getValue();
                                var year = yearCmp.getValue();

                                Ext.Ajax.request({
                                    url: '/BasicCharacteristicOP/Edit',
                                    para");
                WriteLiteral(@"ms: {
                                        id: id,
                                        year: year
                                    },
                                    success: function (response) {
                                        var data = Ext.decode(response.responseText);
                                        if (!data.success) {
                                            Ext.MessageBox.show({
                                                title: 'Информационное сообщение',
                                                msg: data.message,
                                                buttons: Ext.MessageBox.OK,
                                                fn: function (btn) {
                                                }
                                            });
                                        }
                                        else {

                                            wnd.close();

                                        ");
                WriteLiteral(@"    try {
                                                var recordIndex = store.findBy(r => r.data.Id === id);
                                                if (recordIndex == -1) {
                                                    store.reload();
                                                    return;
                                                }
                                                else
                                                    store.getAt(recordIndex).data.year = year;
                                                
                                                Ext.getCmp(id).getView().refresh();
                                            }
                                            catch{
                                                store.reload();
                                            }
                                        }
                                    },
                                    failure: function (d) {
              ");
                WriteLiteral(@"                          Ext.MessageBox.alert('Ошибка', ""Неизвестная ошибка"");
                                    }
                                });
                            }
                        }
                    ]
                });
        }

        var id = 'OhopGrid';

        var gridPanel = Ext.create('Ext.grid.Panel', {
            region: 'center',
            store: store,
            id:id,
            tbar: [
                {
                    xtype: 'button',
                    text: 'Фильтры...',
                    handler: function() { filtersWnd.show(); }
                },
                {
                    xtype: 'button',
                    text: ""Отменить фильтры"",
                    handler: function() {
                        store.clearFilter();
                        localStorage.setItem(localStorageName, JSON.stringify([]));
                    }
                }, '-',
                {
                    xtype: 'button',
");
                WriteLiteral("                    text: \'Добавить\',\r\n                    hidden: \'");
#nullable restore
#line 443 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                    handler: function () {
                        createWnd.show();
                    }
                }
            ],
            loadMask: true,
            columnLines: true,
            viewConfig: {
                markDirty: false
            },
            columns: [
                { xtype: 'rownumberer', width: 50 },
                {
                    header: 'Направление',
                    dataIndex: 'directionOkso',
                    width: 200,
                    renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                        value = `${record.data.directionOkso} - ${record.data.directionTitle}`;
                        metaData.tdAttr = 'data-qtip=""' + Ext.String.htmlEncode(value) + '""';
                        return value;
                    }
                },
                {
                    header: 'Стандарт',
                    dataIndex: 'standard',
                    rend");
                WriteLiteral(@"erer: Ext.util.Format.htmlEncode,
                    width: 120
                },
                {
                    header: 'Образовательная программа',
                    dataIndex: 'profile',
                    width: 250,
                    renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                        value = `${record.data.profile} - ${record.data.profileTitle}`;
                        metaData.tdAttr = 'data-qtip=""' + Ext.String.htmlEncode(value) + '""';
                        return value;
                    }
                },
                {
                    header: 'Уровень обучения',
                    align: 'center',
                    dataIndex: 'qualification',
                    width: 150
                },
                {
                    header: 'Подразделение',
                    dataIndex: 'divisionTitle',
                    cellWrap: true,
                    renderer: Ext.util.Format.htmlEncode,
");
                WriteLiteral(@"                    width: 170
                },
                {
                    header: 'Год',
                    dataIndex: 'year',
                    renderer: Ext.util.Format.htmlEncode,
                    width: 80
                },
                {
                    xtype: 'actioncolumn',
                    header: 'ОХОП',
                    region: 'center',
                    sortable: false,
                    width: 80,
                    items: [
                        {
                            icon: '");
#nullable restore
#line 509 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
                              Write(Url.Content("~/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            iconCls: 'icon-padding',
                            tooltip: 'Редактировать',
                            handler: function (grid, rowIndex, colIndex) {
                                var rec = grid.getStore().getAt(rowIndex);
                                var wnd = editWnd(rec);
                                wnd.show();
                            }
                        },
                        {
                            icon: '");
#nullable restore
#line 519 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
                              Write(Url.Content("~/Content/Images/document-go.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            iconCls: 'icon-padding',
                            tooltip: 'ОХОП',
                            handler: function (grid, rowIndex, colIndex) {
                                var rec = grid.getStore().getAt(rowIndex);
                                if (!rec.get('documentKind'))
                                    alert('Для данной образовательной программы ОХОП не формируется');
                                var formPanel = Ext.create('VersionedDocs.Selector', {
                                    documentKind: rec.get('documentKind'),
                                    linkedEntityId: rec.get('id'),
                                    canView: ");
#nullable restore
#line 529 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
                                         Write(canViewWorkingPrograms ? "true" : "false");

#line default
#line hidden
#nullable disable
                WriteLiteral(",\r\n                                    canEdit: ");
#nullable restore
#line 530 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\BasicCharacteristicOP\Index.cshtml"
                                         Write(canManageWorkingPrograms ? "true" : "false");

#line default
#line hidden
#nullable disable
                WriteLiteral(@",
                                    hiddenStandard: true,
                                    hiddenYear: false,
                                    year: rec.get('year')
                                });
                                formPanel.items.items[0].items.items[0].setEditable('true');
                                formPanel.show();
                            }
                        }
                    ]
                }
            ]
        });

        var items = [
            gridPanel
        ];

        Urfu.createViewport('border', items);
        gridPanel.getStore().on('load', function (store, records, options) {
            if (focus)
            {
                var focusRow = store.findExact('id', focus);
                if (focusRow > 0) {
                    var rowData = store.getAt(focusRow);
                    gridPanel.getView().focusRow(rowData);
                    gridPanel.getSelectionModel().select(rowData);
                }
       ");
                WriteLiteral("     }\r\n            focus = null;\r\n            return false;\r\n        });\r\n    });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
