#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ForeignLanguageAdmission\Report.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "75363fe5f579443801203e7ac17f9317f4470f8c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ForeignLanguageAdmission_Report), @"mvc.1.0.view", @"/Views/ForeignLanguageAdmission/Report.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"75363fe5f579443801203e7ac17f9317f4470f8c", @"/Views/ForeignLanguageAdmission/Report.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_ForeignLanguageAdmission_Report : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Urfu.Its.Web.Controllers.MinorReportVM>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ForeignLanguageAdmission\Report.cshtml"
  
    ViewBag.Title = "Отчет по ИЯ";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">

        Ext.onReady(function () {
            Ext.tip.QuickTipManager.init();

            Ext.define('ComboBoxModel',
            {
                extend: 'Ext.data.Model',
                fields:
                [
                    { type: 'string', name: 'Id' },
                    { type: 'string', name: 'Name' }
                ]
            });

            function parseJson(json) {
                var data = JSON.parse(json.replace(/&quot;/g, '""'));
                return data;
            }
            
            var dataSemesters = parseJson('");
#nullable restore
#line 30 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ForeignLanguageAdmission\Report.cshtml"
                                      Write(ViewBag.Semesters);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"');
            var SemestersStore = Ext.create(""Ext.data.Store"",
                {
                    data: dataSemesters
                });

            var store = Ext.create(""Ext.data.Store"",
            {
                fields: [
                    ""CompetitionGroupName"", ""moduleName"", ""GroupName"", ""Surname"", ""Name"", ""PatronymicName"", ""Rating"", ""IsTarget"", ""IsInternational"",
                    ""Compensation"", ""MinStudentsCount"", ""MaxStudentsCount"", ""specialities""
                ],
                groupField: 'CompetitionGroupName',
                autoLoad: false,//true,
                //pageSize: 300,
                remoteSort: true,
                remoteFilter: true,

                proxy: {
                    type: 'ajax',
                    url: window.location.pathname + window.location.search,
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
          ");
                WriteLiteral("          },\r\n                    timeout: 90000\r\n                }\r\n            });\r\n\r\n            var prevSettings = {Year:");
#nullable restore
#line 60 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ForeignLanguageAdmission\Report.cshtml"
                                 Write(DateTime.Now.Month < 7? DateTime.Now.Year -1 : DateTime.Now.Year);

#line default
#line hidden
#nullable disable
                WriteLiteral(",semesterId:");
#nullable restore
#line 60 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ForeignLanguageAdmission\Report.cshtml"
                                                                                                                Write(DateTime.Now.Month < 7?2:1);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"};

            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""ForeignLanguageReportFilters"") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }

            var filtersWnd = null;
            function loadStore() {
                store.proxy.setUrl(window.location.pathname + window.location.search +
                    '?filter=' +
                    encodeURIComponent(localStorage.getItem(""ForeignLanguageReportFilters"")));
                store.load();
            }
            var setFilters = function() {
                var settings = [
                    { property: 'CompetitionGroupName', value: filtersWnd.getComponent(""CompetitionGroupNameField"").getValue() },
                    { property: 'GroupName', value: filtersWnd.getComponent(""GroupNameField"").getVal");
                WriteLiteral(@"ue() },
                    { property: 'moduleName', value: filtersWnd.getComponent(""moduleNameField"").getValue() },
                    { property: 'Surname', value: filtersWnd.getComponent(""SurnameField"").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent(""NameField"").getValue() },
                    { property: 'semesterId', value: filtersWnd.getComponent(""semesterField"").getValue() },
                    { property: 'PatronymicName', value: filtersWnd.getComponent(""PatronymicNameField"").getValue() },
                    { property: 'IsTarget', value: filtersWnd.getComponent(""IsTargetField"").getValue().IsTargetField },
                    { property: 'Year', value: filtersWnd.getComponent(""Year"").getValue() },
                    {
                        property: 'IsInternational',
                        value: filtersWnd.getComponent(""IsInternationalField"").getValue().IsInternationalField
                    }
                ];
                //store.s");
                WriteLiteral(@"etFilters(settings);
                localStorage.setItem(""ForeignLanguageReportFilters"", JSON.stringify(settings));
                loadStore();
            };
            var grouping = Ext.create('Ext.grid.feature.Grouping',
            {
                ftype: 'grouping',
                collapsible: true,
                startCollapsed: true,
                hideGroupedHeader: true,
                groupHeaderTpl: '{name} / Лимит нижний {[values.rows[0].data.MinStudentsCount]} / Лимит верхний {[values.rows[0].data.MaxStudentsCount]} / Зачислено: {rows.length} / Год: {[values.rows[0].data.Year]} / Семестр: {[values.rows[0].data.Semester]} '
            });

            filtersWnd = Ext.create('Ext.window.Window',
            {
                title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    wi");
                WriteLiteral(@"dth: 500
                },
                items: [
                    { fieldLabel: ""ИЯ"", itemId: ""moduleNameField"", value: prevSettings[""moduleName""] },
                    { fieldLabel: ""Конкурсная группа"", itemId: ""CompetitionGroupNameField"", value: prevSettings[""CompetitionGroupName""] },
                    { fieldLabel: ""Название группы"", itemId: ""GroupNameField"", value: prevSettings[""GroupName""] },
                    { fieldLabel: ""Фамилия"", itemId: ""SurnameField"", value: prevSettings[""Surname""] },
                    { fieldLabel: ""Имя"", itemId: ""NameField"", value: prevSettings[""Name""] },
                    { fieldLabel: ""Отчество"", itemId: ""PatronymicNameField"", value: prevSettings[""PatronymicName""] },
                    { fieldLabel: ""Номер"", itemId: ""PersonalNumber"", value: prevSettings[""PersonalNumber""] },
                    { fieldLabel: ""Год"", itemId: ""Year"", value: prevSettings[""Year""] },
                     {
                        fieldLabel: ""Семестр"",
                  ");
                WriteLiteral(@"      itemId: ""semesterField"",
                        value: prevSettings[""semesterId""],
                        xtype: ""combobox"",
                        store: SemestersStore,
                        valueField: 'Id',
                        displayField: 'Name',
                        queryMode: 'remote'
                    },
                    {
                        xtype: 'radiogroup',
                        fieldLabel: 'Целевой',
                        itemId: ""IsTargetField"",
                        value: prevSettings[""IsTarget""],
                        items: [
                            {
                                boxLabel: 'Все',
                                name: 'IsTargetField',
                                inputValue: ''

                            }, {
                                boxLabel: 'Да',
                                name: 'IsTargetField',
                                inputValue: 'true'
                            }, {
          ");
                WriteLiteral(@"                      boxLabel: 'Нет',
                                name: 'IsTargetField',
                                inputValue: 'false'
                            }
                        ]
                    },
                    {
                        xtype: 'radiogroup',
                        fieldLabel: 'Иностранный',
                        itemId: ""IsInternationalField"",
                        value: prevSettings[""IsInternational""],
                        items: [
                            {
                                boxLabel: 'Все',
                                name: 'IsInternationalField',
                                inputValue: ''

                            }, {
                                boxLabel: 'Да',
                                name: 'IsInternationalField',
                                inputValue: 'true'
                            }, {
                                boxLabel: 'Нет',
                                name: 'I");
                WriteLiteral(@"sInternationalField',
                                inputValue: 'false'
                            }
                        ]
                    }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

            setFilters();
            var gridPanel = null;

            var downloadReport = Ext.create('Ext.Button',
            {
                xtype: 'button',
                text: 'Отчет по ИЯ в Excel',
                handler: function() {
                    var fileUrl = '");
#nullable restore
#line 206 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ForeignLanguageAdmission\Report.cshtml"
                              Write(Url.Action("DownloadReport"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' +
                        ""?filter="" +
                        encodeURIComponent(localStorage.getItem(""ForeignLanguageReportFilters"") || ""[]"");
                    window.location.href = fileUrl;
                }
            });

            var downloadDivisionReport = Ext.create('Ext.Button',
            {
                xtype: 'button',
                text: 'Отчёт по подразделениям в Excel',
                handler: function() {
                    var fileUrl = '");
#nullable restore
#line 218 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ForeignLanguageAdmission\Report.cshtml"
                              Write(Url.Action("DownloadDivisionReport"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' +
                        ""?filter="" +
                        encodeURIComponent(localStorage.getItem(""ForeignLanguageReportFilters"") || ""[]"");
                    window.location.href = fileUrl;
                }
            });



            gridPanel = Ext.create('Ext.grid.Panel',
            {
                multiSelect: true,
                region: 'center',
                store: store,
                loadMask: true,
                columnLines: true,
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                    },
                    {
                        xtype: 'button',
                        text: ""Отменить фильтры"",
                        handler: function() {
                            localStorage.setItem(""ForeignLanguageReportFilters"", []);
                            store.clearFilter();
            ");
                WriteLiteral(@"            }
                    },
                    {
                        xtype: 'button',
                        text: ""Развернуть\\Свернуть группировку"",
                        handler: function() {
                            window.groupsCollapsed = !window.groupsCollapsed;
                            if (window.groupsCollapsed)
                                grouping.expandAll();
                            else
                                grouping.collapseAll();
                        }
                    },
                    '-',
                    downloadReport,
                    downloadDivisionReport
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Год',
                        dataIndex: 'Year',
                        width: 80,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
        ");
                WriteLiteral(@"                header: 'Секция',
                        dataIndex: 'moduleName',
                        width: 160,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Название группы',
                        dataIndex: 'GroupName',
                        width: 160,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Фамилия',
                        dataIndex: 'Surname',
                        width: 200,
                        renderer: function(value, metaData, record) {
                            return '<a href=""/PersonalInfo/Student?studentId=' + record.data.Id + '"">' + value + '</a>';
                        }
                    },
                    {
                        header: 'Имя',
                        dataIndex: 'Name',
                        width: 200,
                        render");
                WriteLiteral(@"er: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Отчество',
                        dataIndex: 'PatronymicName',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Рейтинг',
                        dataIndex: 'Rating',
                        width: 90
                    },
                    {
                        header: 'Целевой',
                        dataIndex: 'IsTarget',
                        width: 100,
                        align: 'center',
                        renderer: function(val) { return val ? 'Да' : ""Нет"" }
                    },
                    {
                        header: 'Иностранный студент',
                        dataIndex: 'IsInternational',
                        width: 200,
                        align: 'center',
                        renderer: function(v");
                WriteLiteral(@"al) { return val ? 'Да' : ""Нет"" }
                    },
                    {
                        header: 'Вид возмещения затрат',
                        align: 'center',
                        dataIndex: 'Compensation',
                        width: 210,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Лимит нижний',
                        align: 'center',
                        dataIndex: 'MinStudentsCount',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Лимит верхний',
                        align: 'center',
                        dataIndex: 'MaxStudentsCount',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    }
                ],
                features: [grouping]
            });
            d =");
                WriteLiteral(" null;\r\n            var items = [\r\n                gridPanel\r\n            ];\r\n\r\n            Urfu.createViewport(\'border\', items);\r\n        });\r\n    </script>\r\n");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Urfu.Its.Web.Controllers.MinorReportVM>> Html { get; private set; }
    }
}
#pragma warning restore 1591
