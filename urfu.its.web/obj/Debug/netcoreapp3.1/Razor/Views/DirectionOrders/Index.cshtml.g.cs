#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e0bf254ca8e352d0df66c447637c349b44de70d8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_DirectionOrders_Index), @"mvc.1.0.view", @"/Views/DirectionOrders/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e0bf254ca8e352d0df66c447637c349b44de70d8", @"/Views/DirectionOrders/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_DirectionOrders_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml"
  
    ViewBag.Title = "Справочник Приказы для ФГОС ВО 3++";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script type=\"text/javascript\">\r\n\r\n        Ext.onReady(function () {\r\n            Ext.tip.QuickTipManager.init();\r\n\r\n            var localStorageName = \"DirectionOrdersFilters\";\r\n\r\n            var dataDirections = Urfu.parseJson(\'");
#nullable restore
#line 15 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml"
                                            Write(ViewBag.Directions);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"');
            var directionsStore = Ext.create(""Ext.data.Store"",
            {
                data: dataDirections
            });

            var store = Ext.create(""Ext.data.Store"",
                {
                    autoLoad: false,
                    remoteSort: false,
                    remoteFilter: true,
                    proxy: {
                        type: 'ajax',
                        url: window.location.pathname,
                        reader: {
                            type: 'json',
                            rootProperty: 'data'
                        }
                    }
                });

            var prevSettings = {};

            try {
                var prevSettingString = JSON.parse(localStorage.getItem(localStorageName) || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } c");
                WriteLiteral(@"atch (err) {
                console.log(err);
            }

            var filtersWnd = null;

            var setFilters = function () {
                var settings = [
                    { property: 'DirectionId', value: filtersWnd.getComponent(""Direction"").getValue() }
                ];
                store.setFilters(settings);
                localStorage.setItem(localStorageName, JSON.stringify(settings));
            };


            filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Фильтры"",
                    closeAction: 'hide',
                    closeToolText: 'Закрыть окно',
                    resizable: false,
                    autoHeight: true,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 400
                    },
                    items: [
                        {
                            fieldLabel: ""Направле");
                WriteLiteral(@"ние"",
                            itemId: ""Direction"",
                            value: prevSettings['DirectionId'],
                            xtype: ""combobox"",
                            store: directionsStore,
                            valueField: 'Id',
                            displayField: 'Name',
                            queryMode: 'local',
                            anyMatch: true,
                            width: 500
                        },
                    ],
                    buttons: [
                        {
                            text: ""OK"",
                            handler: function () {
                                setFilters();
                                filtersWnd.hide();
                            }
                        },
                        {
                            text: ""Отмена"",
                            handler: function () { filtersWnd.hide(); }
                        }
                    ]
            ");
                WriteLiteral(@"    });
            setFilters();

            function createRecordWindow(record) {
                return Ext.create('Ext.window.Window', {
                    title: record ? 'Редактирование приказа' : 'Добавление приказа',
                    closeAction: 'hide',
                    closeToolText: 'Закрыть окно',
                    resizable: false,
                    bodyPadding: 6,
                    width: 525,
                    viewModel: {
                        data: Ext.apply({}, record ? record.data : {})
                    },
                    items:
                        {
                            xtype: 'form',
                            layout: { type: 'vbox' },
                            defaults: {
                                xtype: 'textfield',
                                labelWidth: 100
                            },
                            items: [
                                {
                                  xtype: 'hidden',
    ");
                WriteLiteral(@"                              name:'Id',
                                  bind:'{Id}',
                                },
                                {
                                    xtype: 'combobox',
                                    fieldLabel: 'Направление',
                                    name: 'DirectionId',
                                    store: directionsStore,
                                    bind: {
                                         value: '{DirectionId}'
                                    },
                                    editable: true,
                                    width: 500,
                                    allowBlank: false,
                                    anyMatch: true,
                                    queryMode: 'local',
                                    displayField: 'Name',
                                    valueField: 'Id',
                                    forceSelection: true,
                                 ");
                WriteLiteral(@"   listeners: {
                                        afterrender: function (t, eOpts) {
                                            t.setReadOnly(record ? true : false);
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    fieldLabel: 'Номер',
                                    bind:'{Number}',
                                    name: 'Number',
                                    width: 300,
                                    allowBlank: false
                                },
                                {
                                    xtype: 'datefield',
                                    fieldLabel: 'Дата',
                                    bind:'{Date}',
                                    startDay: 1,
                                    format: 'd.m.Y',
                            ");
                WriteLiteral(@"        width: 300,
                                    allowBlank: false,
                                    name: 'Date'
                                }
                            ]
                        },
                    buttons: [
                        {
                            text: ""Сохранить"",
                            formBind: true,
                            handler: function () {

                                var window = this.up('window');
                                var form = window.down('form');

                                if (!form.isValid()) {
                                Ext.Msg.alert('Ошибка', 'Заполнены не все поля');
                                    return;
                                }
                                
                                form.submit({
                                    url: record ? '");
#nullable restore
#line 183 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml"
                                              Write(Url.Action("Edit"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' : \'");
#nullable restore
#line 183 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml"
                                                                      Write(Url.Action("Create"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    success: function (form, action) {
                                        var r = action.result;
                                        if (!r.success) {
                                            Ext.MessageBox.alert('', r.message);
                                        }
                                        else {
                                            Ext.MessageBox.alert('', 'Информация сохранена.');
                                            store.reload();
                                            window.close();
                                        }
                                    },
                                    failure: function (form, action) {
                                        Ext.MessageBox.alert('', 'Информация не сохранена. ' + action.result.message);
                                    }
                                });
                            }
                        },
                        ");
                WriteLiteral(@"{
                            text: ""Отмена"",
                            handler: function() { this.up('window').close(); }
                        }

                    ]

                });
            };

            var gridPanel = Ext.create('Ext.grid.Panel',
                {
                    region: 'center',
                    store: store,
                    loadMask: true,
                    columnLines: true,
                    tbar: [
                        {
                            xtype: 'button',
                            text: 'Фильтры...',
                            handler: function () { filtersWnd.show(); }
                        },
                        {
                            xtype: 'button',
                            text: ""Отменить фильтры"",
                            handler: function () {
                                store.clearFilter();
                                localStorage.setItem(localStorageName, JSON.stringify([])");
                WriteLiteral(");\r\n                            }\r\n                        },\r\n                        \'-\',\r\n                        {\r\n                            xtype: \'button\',\r\n                            text: \'Добавить\',\r\n                            hidden: \'");
#nullable restore
#line 235 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml"
                                Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                            handler: function () { createRecordWindow().show(); }
                        }
                    ],
                    columns: [
                        { xtype: 'rownumberer', width: 50 },
                        {
                            header: 'Направление',
                            dataIndex: 'Direction',
                            width: 300,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Номер',
                            dataIndex: 'Number',
                            width: 200,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Дата',
                            dataIndex: 'Date',
                            width: 200,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
     ");
                WriteLiteral("                   },\r\n                        {\r\n                            xtype: \'actioncolumn\',\r\n                            resizable: false,\r\n                            sortable: false,\r\n                            hidden: \'");
#nullable restore
#line 263 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml"
                                Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \'False\',\r\n                            width: 100,\r\n                            items: [\r\n                                {\r\n                                    icon: \'");
#nullable restore
#line 267 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml"
                                      Write(Url.Content("/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    iconCls: 'icon-padding',
                                    tooltip: 'Редактировать',
                                    handler: function (grid, rowIndex, colIndex, item, e, record) {
                                        var rec = grid.getStore().getAt(rowIndex);
                                        createRecordWindow(rec).show();
                                    }
                                },
                                {
                                    icon: '");
#nullable restore
#line 276 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml"
                                      Write(Url.Content("/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    iconCls: 'icon-padding',
                                    tooltip: 'Удалить',

                                    handler: function (grid, rowIndex, colIndex, item, e, record) {

                                        Ext.MessageBox.show({
                                            title: 'Уведомление',
                                            msg: ""Удалить запись?"",
                                            buttons: Ext.MessageBox.YESNO,
                                            fn: function (btn) {
                                                if (btn === 'yes') {
                                                    Ext.Ajax.request({
                                                        method: 'GET',
                                                        url: '");
#nullable restore
#line 290 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\DirectionOrders\Index.cshtml"
                                                         Write(Url.Action("Remove"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                                        success: function(response) {
                                                            Ext.MessageBox.show({
                                                                title: 'Информационное сообщение',
                                                                msg: 'Запись удалена успешно',
                                                                buttons: Ext.MessageBox.OK
                                                            });
                                                            store.reload();
                                                        },
                                                        failure: function(d) {
                                                            Ext.MessageBox.show({
                                                                title: 'Ошибка',
                                                                msg: 'Удаление невозможно. Существуют направления в");
                WriteLiteral(@" этой области образования',
                                                                buttons: Ext.MessageBox.OK
                                                            });
                                                        },
                                                        params: { id: record.get('Id') }
                                                    });
                                                }
                                            }
                                        });
                                    }
                                }
                            ]
                        }
                    ]
                });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);

        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
