#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Plans\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eb46851f4c20ab028b775e86603dddabe01cfb24"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Plans_Index), @"mvc.1.0.view", @"/Views/Plans/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eb46851f4c20ab028b775e86603dddabe01cfb24", @"/Views/Plans/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Plans_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Plans\Index.cshtml"
  
    ViewBag.Title = "Учебные планы";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
<script type=""text/javascript"">
    Ext.onReady(function () {
        Ext.tip.QuickTipManager.init();
            var plansStore = Ext.create(""Ext.data.BufferedStore"",
                {
                    fields: [""id"", ""eduplanNumber"", ""versionNumber"", ""disciplineTitle"", ""directionId"", ""controls"", ""loads"", ""terms"", ""allTermsExtracted""],
                    autoLoad: true,
                    pageSize: 300,
                    remoteSort: true,
                    remoteFilter: true,
                    proxy: {
                        type: 'ajax',
                        url: '/Plans/Index',
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });

            var gridPanel = Ext.create('Ext.grid.Panel',
                {
                    region: 'center',
                    store: plansStore");
                WriteLiteral(@",
                    loadMask: true,
                    tbar: [
                        {
                            xtype: 'box',
                            autoEl: { tag: 'a', href: '/Plans/Create', html: 'Создать новый учебный план' }
                        },
                        '-',
                        {
                            xtype: 'label',
                            text: 'Номер'
                        },
                        {
                            id: 'txtNumber',
                            xtype: 'textfield',
                        },
                        {
                            xtype: 'label',
                            text: 'Название дисциплины'
                        },
                        {
                            id: 'txtTitle',
                            xtype: 'textfield',
                        },
                        {
                            xtype: 'button',
                            text: 'Применить',");
                WriteLiteral(@"
                            handler: function () {
                                plansStore.filter([
                                    { property: 'eduplanNumber', value: Ext.getCmp('txtNumber').getValue() },
                                    { property: 'disciplineTitle', value: Ext.getCmp('txtTitle').getValue() },
                                    ]);
                            }
                        },
                        {
                            xtype: 'button',
                            text: 'Отменить',
                            handler: function () { plansStore.clearFilter(); }
                        }
                    ],
                    columns: [
                        { xtype: 'rownumberer', width: 50 },
                        {
                            header: 'Номер',
                            dataIndex: 'eduplanNumber',
                            sortable: true,
                            width: 80,
                            render");
                WriteLiteral(@"er: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Версия',
                            dataIndex: 'versionNumber',
                            sortable: false,
                            width: 120,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Название дисциплины',
                            dataIndex: 'disciplineTitle',
                            sortable: true,
                            width: 400,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Направление',
                            align: 'center',
                            dataIndex: 'DirectionOkso',
                            sortable: false,
                            width: 130,
                            renderer: Ext.util.Fo");
                WriteLiteral(@"rmat.htmlEncode
                        },
                        {
                            header: 'Контрольные мероприятия',
                            align: 'center',
                            dataIndex: 'controls',
                            sortable: false,
                            width: 250,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Нагрузка',
                            align: 'center',
                            dataIndex: 'loads',
                            sortable: false,
                            width: 240,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Семестры',
                            align: 'center',
                            dataIndex: 'terms',
                            sortable: false,
                        ");
                WriteLiteral(@"    width: 110,
                            renderer: Ext.util.Format.htmlEncode
                        }
                    ]
                });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
</script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
