#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Groups\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5c55a50b912d0d2a25517d38bc7c2007e03d822b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Groups_Index), @"mvc.1.0.view", @"/Views/Groups/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5c55a50b912d0d2a25517d38bc7c2007e03d822b", @"/Views/Groups/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Groups_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Groups\Index.cshtml"
  
    ViewBag.Title = "Группы";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">

        Ext.onReady(function () {
            Ext.tip.QuickTipManager.init();

            var store = Ext.create(""Ext.data.BufferedStore"",
            {
                fields: [""Id"", ""Name"", ""ProfileName"", ""Year"", ""ChairId"", ""FormativeDivisionId"", ""FormativeDivisionParentId"", ""ManagingDivisionId"", ""ManagingDivisionParentId""],
                autoLoad: true,
                pageSize: 300,
                remoteSort: true,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: '/Groups/Index',
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                    }
                }
            });


            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""GroupsFilters"") || ""[]"");

                for (");
                WriteLiteral(@"var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }

            var filtersWnd = null;
            var setFilters = function () {
                var settings = [
                    { property: 'Name', value: filtersWnd.getComponent(""Name"").getValue() },
                    { property: 'ProfileName', value: filtersWnd.getComponent(""ProfileName"").getValue() },
                    { property: 'Year', value: filtersWnd.getComponent(""Year"").getValue() },
                ];
                store.setFilters(settings);
                localStorage.setItem(""GroupsFilters"", JSON.stringify(settings));
            };

            filtersWnd = Ext.create('Ext.window.Window', {
                title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: ");
                WriteLiteral(@"6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLabel: ""Название группы"", itemId: ""Name"", value: prevSettings[""Name""] },
                    { fieldLabel: ""Название профиля"", itemId: ""ProfileName"", value: prevSettings[""ProfileName""] },
                    { fieldLabel: ""Год"", itemId: ""Year"", value: prevSettings[""Year""] }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function () {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function () { filtersWnd.hide(); }
                    }
                ]
            });

            setFilters();

            function getTpl(propertyName) {
 ");
                WriteLiteral("               return \'<a href=\"");
#nullable restore
#line 86 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Groups\Index.cshtml"
                            Write(ViewBag.UniUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/fx/uni/ru.naumen.uni.published_jsp?uuid={' + propertyName + '}"">Открыть в UNI</a>';
            }


            var gridPanel = Ext.create('Ext.grid.Panel',
            {
                region: 'center',
                store: store,
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function () { filtersWnd.show(); }
                    },
                    {
                        xtype: 'button',
                        text: ""Отменить фильтры"",
                        handler: function () {
                            localStorage.setItem(""GroupsFilters"", []);
                            store.clearFilter();
                        }
                    }
                ],
                loadMask: true,
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Название группы',
  ");
                WriteLiteral(@"                      align: 'left',
                        dataIndex: 'Name',
                        sortable: false,
                        width: 200,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Название профиля',
                        dataIndex: 'ProfileName',
                        width: 500,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Год',
                        dataIndex: 'Year',
                        width: 150,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        xtype: 'templatecolumn',
                        sortable: false,
                        tpl: getTpl(""ChairId""),
                        header: 'Кафедра',
                        width: 200
                    },
     ");
                WriteLiteral(@"               {
                        xtype: 'templatecolumn',
                        sortable: false,
                        tpl: getTpl(""FormativeDivisionId""),
                        header: 'Формирующее подразделение',
                        width: 200
                    },
                    {
                        xtype: 'templatecolumn',
                        sortable: false,
                        tpl: getTpl(""FormativeDivisionParentId""),
                        header: 'Родитель формирующего подразделения',
                        width: 200
                    },
                    {
                        xtype: 'templatecolumn',
                        sortable: false,
                        tpl: getTpl(""ManagingDivisionId""),
                        header: 'Управляющее подразделение',
                        width: 200
                    },
                    {
                        xtype: 'templatecolumn',
                        sortable: false,
     ");
                WriteLiteral(@"                   tpl: getTpl(""ManagingDivisionParentId""),
                        header: 'Родитель управляющего подразделения',
                        width: 200
                    },
                    //{
                    //    xtype: 'templatecolumn',
                    //    sortable: false,
                    //    tpl: tpl,
                    //    width: 420
                    //}

                ]
            });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
    </script>
");
            }
            );
            WriteLiteral("\r\n\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
