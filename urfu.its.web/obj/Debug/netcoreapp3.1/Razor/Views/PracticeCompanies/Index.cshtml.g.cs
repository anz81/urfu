#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f7f7526f8d0979254230d0bc34ab86f996538163"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_PracticeCompanies_Index), @"mvc.1.0.view", @"/Views/PracticeCompanies/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f7f7526f8d0979254230d0bc34ab86f996538163", @"/Views/PracticeCompanies/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_PracticeCompanies_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
  
    ViewBag.Title = "Предприятия с договором УрФУ";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral(@"    <div class=""form-horizontal"">
        <script type=""text/javascript"">

            var lastFilter = [];
            Ext.onReady(function () {
                Ext.tip.QuickTipManager.init();

                var localStorageName = ""CompaniesFilters"";


                function setEmptyValuesToEditForm() {
                    var fieldsCompanyInfoPanel = editWnd.query('[isFormField]');
                    fieldsCompanyInfoPanel.forEach(function(field) {
                            field.reset();
                    });
                    countryCmbx.setValue('');
                    regionCmbx.setDisabled(true);
                    cityCmbx.setDisabled(true);

                    statusCmbx.setValue('false');
                    removeInfoDoc = false;
                    uploadInfoDoc = false;
                }

                function setValuesToEditForm(record) {
                    var params = record.data;
                    editWnd.down('form').loadRecord(record);

      ");
            WriteLiteral(@"              regionCmbx.setDisabled(true);
                    cityCmbx.setDisabled(true);

                    if (params.CountryId != null) {
                        countryCmbx.setValue(record);
                        reloadRegionStore(params.CountryId);
                        regionCmbx.setDisabled(false);
                        if (params.RegionId != null) {
                            regionCmbx.setValue(record);
                            reloadCityStore(params.RegionId);
                            cityCmbx.setDisabled(false);
                            if (params.CityId != null) {
                                cityCmbx.setValue(record);
                            }
                        }
                    }
                }

                function checkEditRole(actions) {
                    if ('");
#nullable restore
#line 55 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                    Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' == 'True') {
                        actions();
                    }
                    else {
                        Ext.MessageBox.alert('Ошибка', ""У вас нет прав вносить изменения в справочник"");
                    }
                }

                var numbersTest = /^\d{10,12}$/;
                var initialsTest = /^\D{1,40}$/;

                Ext.apply(Ext.form.field.VTypes, {
                    numbers: function (val, field) {
                        return numbersTest.test(val);
                    },
                    numbersText: 'ИНН должен содержать от 10 до 12 цифр',
                    initials: function (val, field) {
                        return initialsTest.test(val);
                    },
                    initialsText: 'Инициалы могут быть не более 40 символов'
                });

                var savedFilters = getSavedFiltersConfig();
                //var savedFiltersForServer = Object.keys(savedFilters).map(filterName => ({ property: filterNam");
            WriteLiteral(@"e, value: savedFilters[filterName]}));

                var store = Ext.create(""Ext.data.BufferedStore"",
                    {
                        idProperty: 'Id',
                        fields: [
                            ""Id"", ""Name""
                        ],
                        //filters: savedFiltersForServer,
                        autoLoad: true,
                        pageSize: 25,
                        remoteSort: true,
                        remoteFilter: true,
                        proxy: {
                            type: 'ajax',
                            url:  '/PracticeCompanies/Index',
                            reader: {
                                type: 'json',
                                rootProperty: 'data',
                                totalProperty: 'total'
                            }
                        }
                    });

                function getSavedFiltersConfig(){
                    var prevSetting = [];
  ");
            WriteLiteral(@"                  var savedFilters = {};
                    try {
                        prevSetting = JSON.parse(localStorage.getItem(localStorageName)) || [];
                    } catch (err) {

                    };  
                   
                    savedFilters['Name'] = prevSetting.find(x => x.property === 'Name') ? prevSetting.find(x => x.property === 'Name').value : '';
                    savedFilters['ContractNumbers'] = prevSetting.find(x => x.property === 'ContractNumbers') ? prevSetting.find(x => x.property === 'ContractNumbers').value : '';
                    savedFilters['IsShortDated'] = prevSetting.find(x => x.property === 'IsShortDated') ? prevSetting.find(x => x.property === 'IsShortDated').value : '';
                    savedFilters['IsEndless'] = prevSetting.find(x => x.property === 'IsEndless') ? prevSetting.find(x => x.property === 'IsEndless').value : '';
                    savedFilters['WithoutContract'] = prevSetting.find(x => x.property === 'WithoutContract'");
            WriteLiteral(@") ? prevSetting.find(x => x.property === 'WithoutContract').value : false;
                    savedFilters['IsConfirmed'] = prevSetting.find(x => x.property === 'IsConfirmed') ? prevSetting.find(x => x.property === 'IsConfirmed').value : '';
                    savedFilters['FolderNumber'] = prevSetting.find(x => x.property === 'FolderNumber') ? prevSetting.find(x => x.property === 'FolderNumber').value : '';
                 
                    return savedFilters;
                };

                function setFilters() {
                    settings = [
                        { property: 'Name', value: filtersWnd.getComponent(""Name"").getValue() },
                        { property: 'ContractNumbers', value: filtersWnd.getComponent(""ContractNumber"").getValue() },
                        { property: 'IsShortDated', value: filtersWnd.getComponent(""IsShortDated"").getValue().IsShortDatedField},
                        { property: 'IsEndless', value: filtersWnd.getComponent(""IsEndless"").getValue");
            WriteLiteral(@"().IsEndlessField },
                        { property: 'WithoutContract', value: filtersWnd.getComponent(""WithoutContract"").getValue() },
                        { property: 'IsConfirmed', value: filtersWnd.getComponent(""IsConfirmed"").getValue().IsConfirmedField },
                        //{ property: 'OwnershipType', value: ownershipTypeFilterCmbx.getValue() },
                        { property: 'FolderNumber', value: filtersWnd.getComponent(""FolderNumber"").getValue() }
                    ];

                    store.setFilters(settings);
                    localStorage.setItem(localStorageName, JSON.stringify(settings));
                }

               /* var prevSettings = {};
                try {
                    var prevSettingString = JSON.parse(localStorage.getItem(localStorageName) || ""[]"");

                    for (var i = 0; i < prevSettingString.length; i++) {
                        prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
     ");
            WriteLiteral(@"               }
                }
                catch (err) {
                }*/

                //var ownershipTypeStore = Ext.create(""Ext.data.Store"",
                //    {
                //        autoLoad: true,
                //        proxy: {
                //            type: 'ajax',
                //            url: '/PracticeCompanies/OwnershipTypes',
                //            reader: {
                //                type: 'json',
                //                rootProperty: 'data'
                //            }
                //        }
                //    });

                //var ownershipTypeEditCmbx = Ext.create('Ext.form.ComboBox',
                //    {
                //        xtype: 'combobox',
                //        fieldLabel: 'Форма собственности',
                //        labelWidth: 115,
                //        width: 300,
                //        store: ownershipTypeStore,
                //        valueField: 'OwnershipType");
            WriteLiteral(@"Id',
                //        displayField: 'OwnershipType',
                //        queryMode: 'remote'
                //    });

                //var ownershipTypeFilterCmbx = Ext.create('Ext.form.ComboBox',
                //    {
                //        xtype: 'combobox',
                //        fieldLabel: 'Форма собственности',
                //        labelWidth: 115,
                //        width: 300,
                //        store: ownershipTypeStore,
                //        value: prevSettings[""OwnershipType""],
                //        valueField: 'OwnershipTypeId',
                //        displayField: 'OwnershipType',
                //        queryMode: 'remote'
                //    });

                var filtersWnd = Ext.create('Ext.window.Window',
                    {
                        title: ""Фильтры"",
                        closeAction: 'hide',
                        resizable: false,
                        autoHeight: true,
            ");
            WriteLiteral(@"            bodyPadding: 6,
                        defaults: {
                            xtype: 'textfield',
                            width: 500
                        },
                        items: [
                            {
                                xtype: 'textfield',
                                fieldLabel: 'Название предприятия',
                                value: savedFilters[""Name""],
                                labelWidth: 115,
                                itemId: 'Name',
                                margin: '0 0 10 0',
                                width: 500
                            },
                            {
                                xtype: 'textfield',
                                fieldLabel: 'Номер договора',
                                value: savedFilters[""ContractNumbers""],
                                labelWidth: 115,
                                margin: '0 0 10 0',
                                itemId: '");
            WriteLiteral(@"ContractNumber',
                                width: 300
                            },
                            {
                                xtype: 'radiogroup',
                                fieldLabel: 'Тип договора',
                                labelWidth: 115,
                                itemId: ""IsShortDated"",
                                value: savedFilters[""IsShortDated""],
                                name: 'IsShortDated',
                                //value:'true',
                                items: [
                                    {
                                        boxLabel: 'Все',
                                        name: 'IsShortDatedField',
                                        inputValue: '',
                                        checked: savedFilters[""IsShortDated""]===''
                                    },
                                    {
                                        boxLabel: 'Долгосрочный',
         ");
            WriteLiteral(@"                               name: 'IsShortDatedField',
                                        inputValue: 'false',
                                        checked: savedFilters[""IsShortDated""] ==='false'
                                    },
                                    {
                                        boxLabel: 'Краткосрочный',
                                        name: 'IsShortDatedField',
                                        inputValue: 'true',
                                        checked: savedFilters[""IsShortDated""] === 'true',
                                    }
                                ],
                                listeners: {
                                    change: function (t, newValue, oldValue, eOpts) {
                                        // если выбран краткосрочный тип договора
                                        if (newValue[""IsShortDatedField""] == 'true') {
                                            // блокируем возможност");
            WriteLiteral(@"ь выбрать бессрочный договор
                                            filtersWnd.items.get('IsEndless').setValue({ IsEndlessField: 'false' });
                                            filtersWnd.items.get('IsEndless').setDisabled(true);
                                        }
                                        else {
                                            filtersWnd.items.get('IsEndless').setDisabled(false);
                                        }
                                    }

                                }
                            },
                            {
                                xtype: 'radiogroup',
                                fieldLabel: 'Бессрочный',
                                labelWidth: 115,
                                itemId: ""IsEndless"",
                                name: 'IsEndless',
                                value: savedFilters[""IsEndless""],
                                items: [
                            ");
            WriteLiteral(@"        {
                                        boxLabel: 'Все',
                                        name: 'IsEndlessField',
                                        inputValue: '',
                                        checked: savedFilters[""IsEndless""] === ''
                                    },
                                    {
                                        boxLabel: 'Да',
                                        name: 'IsEndlessField',
                                        inputValue: 'true',
                                        checked: savedFilters[""IsEndless""] === 'true'
                                    },
                                    {
                                        boxLabel: 'Нет',
                                        name: 'IsEndlessField',
                                        inputValue: 'false',
                                        checked: savedFilters[""IsEndless""] === 'false'
                                    }
          ");
            WriteLiteral(@"                      ],
                                listeners: {
                                    change: function (t, newValue, oldValue, eOpts) {
                                        // если выбран бессрочный договор
                                        if (newValue['IsEndlessField'] == 'true') {
                                            // блокируем возможность выбрать тип договора
                                            filtersWnd.items.get('IsShortDated').setValue({ IsShortDatedField: 'false' });
                                            filtersWnd.items.get('IsShortDated').setDisabled(true);
                                        }
                                        else {
                                            filtersWnd.items.get('IsShortDated').setDisabled(false);
                                        }
                                    }
                                }
                            },
                            {
                ");
            WriteLiteral(@"                xtype: 'checkbox',
                                boxLabel: 'Без договора',
                                margin: '0 0 0 118',
                                itemId: 'WithoutContract',
                                value: savedFilters[""WithoutContract""],
                                width: 300,
                                listeners: {
                                    change: function (t, newValue, oldValue, eOpts) {
                                        // если выбран ""Без договора"", выбор Тип договора становится неактивным
                                        filtersWnd.items.get('ContractNumber').setValue("""");
                                        filtersWnd.items.get('ContractNumber').setDisabled(newValue);
                                        filtersWnd.items.get('IsShortDated').setValue({ IsShortDatedField: '' });
                                        filtersWnd.items.get('IsEndless').setValue({ IsEndlessField: '' });
                              ");
            WriteLiteral(@"          filtersWnd.items.get('IsShortDated').setDisabled(newValue);
                                        filtersWnd.items.get('IsEndless').setDisabled(newValue);
                                    }
                                }
                            },
                            {
                                xtype: 'radiogroup',
                                fieldLabel: 'Подтверждено',
                                labelWidth: 115,
                                itemId: ""IsConfirmed"",
                                value: savedFilters[""IsConfirmed""],
                                items: [
                                    {
                                        boxLabel: 'Все',
                                        name: 'IsConfirmedField',
                                        inputValue: '',
                                        checked: savedFilters[""IsConfirmed""] === ''
                                    },
                                    {
 ");
            WriteLiteral(@"                                       boxLabel: 'Да',
                                        name: 'IsConfirmedField',
                                        inputValue: 'true',
                                        checked: savedFilters[""IsConfirmed""] === 'true'
                                    },
                                    {
                                        boxLabel: 'Нет',
                                        name: 'IsConfirmedField',
                                        inputValue: 'false',
                                        checked: savedFilters[""IsConfirmed""] === 'false'
                                    }
                                ]
                            },
                            //ownershipTypeFilterCmbx,
                            {
                                xtype: 'textfield',
                                fieldLabel: 'Номер папки',
                                labelWidth: 115,
                                itemId:");
            WriteLiteral(@" 'FolderNumber',
                                value: savedFilters[""FolderNumber""],
                                width: 300
                            }
                        ],
                        buttons: [
                            {
                                text: ""ОК"",
                                handler: function () {
                                    setFilters();
                                    filtersWnd.hide();
                                }
                            },
                            {
                                text: ""Отмена"",
                                handler: function () { filtersWnd.hide(); }
                            }
                        ]
                    });

               setFilters();

                function required(value) {
                    return Ext.isEmpty(value) ? ""Поле не может быть пустым"" : true;
                }

                var removeInfoDoc = false;
                var upl");
            WriteLiteral(@"oadInfoDoc = false;

                var filePanel = Ext.create('Ext.form.Panel',
                    {
                        title: '',
                        fileUpload: true,
                        defaults: {
                            xtype: 'textfield',
                            width: 700
                        },
                        itemId: ""InfoDoc"",
                        items: [
                            {
                                xtype: 'fieldcontainer',
                                itemId: 'infodocContainer',
                                defaultType: 'textfield',
                                layout: {
                                    type: 'hbox',
                                    //align: 'stretch'
                                },
                                items: [
                                    {
                                        xtype: 'textfield',
                                        fieldLabel: 'Информация о пр");
            WriteLiteral(@"едприятии',
                                        labelWidth: 115,
                                        name: 'DocumentName',
                                        emptyText: 'Выберите файл',
                                        width: 500,
                                        multiple: false,
                                        readOnly: true,
                                        submitValue: false
                                    },
                                    {
                                        xtype: 'filefield', 
                                        name: 'document-path',
                                        id: 'form-file',
                                        hideLabel: true,
                                        buttonOnly: true,
                                        buttonText: 'Загрузить',
                                        flex:1,
                                        margin: '5 0 5 5',
                                      ");
            WriteLiteral(@"  listeners: {
                                            change: function (t, value, eOpts) {
                                                var newValue = value.replace(/^c:\\fakepath\\/i, ''); // remove fakepath
                                                this.up('form').getForm().findField('DocumentName').setValue(newValue);
                                                uploadInfoDoc = true;
                                                removeInfoDoc = false;
                                            }
                                        }
                                    },
                                    {
                                        xtype: 'button',
                                        text: ""Удалить"",
                                        flex:1,
                                        margin: '5 0 5 5',
                                        handler: function () {
                                            filePanel.reset();
                  ");
            WriteLiteral(@"                          uploadInfoDoc = false;
                                            removeInfoDoc = true;
                                        }
                                    }
                                ]
                            }
                        ]

                    });

                var countryStore = Ext.create(""Ext.data.Store"",
                    {
                        autoLoad: true,
                        proxy: {
                            type: 'ajax',
                            url: '/PracticeCompanies/Countries',
                            reader: {
                                type: 'json',
                                rootProperty: 'data'
                            }
                        }
                    });

                var regionStore = Ext.create(""Ext.data.Store"",
                    {
                        autoLoad: false,
                        proxy: {
                            type: 'ajax',
");
            WriteLiteral(@"                            url: '/PracticeCompanies/Regions',
                            reader: {
                                type: 'json',
                                rootProperty: 'data'
                            }
                        }
                    });

                var cityStore = Ext.create(""Ext.data.Store"",
                    {
                        autoLoad: false,
                        proxy: {
                            type: 'ajax',
                            url: '/PracticeCompanies/Cities',
                            reader: {
                                type: 'json',
                                rootProperty: 'data'
                            }
                        }
                    });

                function reloadRegionStore(countryId) {
                    regionStore.proxy.setUrl('");
#nullable restore
#line 486 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                         Write(Url.Action("Regions"));

#line default
#line hidden
#nullable disable
            WriteLiteral("?countryId=\' + countryId);\r\n                    regionStore.reload();\r\n                }\r\n\r\n                function reloadCityStore(regionId) {\r\n                    cityStore.proxy.setUrl(\'");
#nullable restore
#line 491 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                       Write(Url.Action("Cities"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"?regionId=' + regionId);
                    cityStore.reload();
                }

                function selectCountry(id) {
                    regionCmbx.setValue('');
                    cityCmbx.setValue('');
                    cityCmbx.setDisabled(true);
                    reloadRegionStore(id);
                    regionCmbx.setDisabled(false);
                }

                function selectRegion(id) {
                    cityCmbx.setValue('');
                    reloadCityStore(id);
                    cityCmbx.setDisabled(false);
                }

                var countryCmbx = Ext.create('Ext.form.ComboBox',
                    {
                        xtype: 'combobox',
                        fieldLabel: 'Страна*',
                        labelWidth: 115,
                        width: 300,
                        store: countryStore,
                        valueField: 'CountryId',
                        name:'CountryId',
                        displayF");
            WriteLiteral(@"ield: 'Country',
                        queryMode: 'local',
                        allowBlank: false,
                        forceSelection:true, 
                        listeners: {
                            'select': function (combo, records, eOpts) {
                                selectCountry(records.data.CountryId);
                            },
                            'blur': function (combo, event, eOpts) {
                                if (combo.getValue() == null) {
                                    combo.clearValue();
                                    regionCmbx.clearValue();
                                    regionCmbx.setDisabled(true);
                                    cityCmbx.clearValue();
                                    cityCmbx.setDisabled(true);
                                }
                            }
                        }
                    });

                var regionCmbx = Ext.create('Ext.form.ComboBox',
                    {");
            WriteLiteral(@"
                        xtype: 'combobox',
                        fieldLabel: 'Регион*',
                        labelWidth: 115,
                        store: regionStore,
                        width: 420,
                        valueField: 'RegionId',
                        name:'RegionId',
                        displayField: 'Region',
                        queryMode: 'local',
                        allowBlank: false,
                        forceSelection: true,
                        listeners: {
                            'select': function (combo, records, eOpts) {
                                selectRegion(records.data.RegionId);
                            },
                            'blur': function (combo, event, eOpts) {
                                if (combo.getValue() == null) {
                                    combo.clearValue();
                                    cityCmbx.clearValue();
                                    cityCmbx.setDisabled(true);
");
            WriteLiteral(@"                                }
                            }
                        }
                    });

                var cityCmbx = Ext.create('Ext.form.ComboBox',
                    {
                        xtype: 'combobox',
                        fieldLabel: 'Город*',
                        labelWidth: 115,
                        store: cityStore,
                        width: 420,
                        valueField: 'CityId',
                        name:'CityId',
                        displayField: 'City',
                        queryMode: 'local',
                        allowBlank: false,
                        forceSelection:true,
                        listeners: {
                            'blur': function (combo, event, eOpts) {
                                if (combo.getValue() == null)
                                    combo.clearValue();
                            }
                        }
                    });

                var st");
            WriteLiteral(@"atuses = Ext.create('Ext.data.Store', {
                    fields: ['value', 'name'],
                    data: [
                        { ""value"": 'true', ""name"": ""Подтверждено"" },
                        { ""value"": 'false', ""name"": ""На проверку"" }
                    ]
                });

                var statusCmbx = Ext.create('Ext.form.ComboBox',
                    {
                        xtype: 'combobox',
                        fieldLabel: 'Статус',
                        labelWidth: 115,
                        itemId: 'IsConfirmed',
                        name:'IsConfirmed',
                        store: statuses,
                        width: 300,
                        valueField: 'value',
                        displayField: 'name',
                        queryMode: 'local'
                    });

                var editWnd = Ext.create('Ext.window.Window',
                    {
                        title: ""Предприятие"",
                        closeA");
            WriteLiteral(@"ction: 'hide',
                        scrollable: true,
                        resizable: false,
                        //autoHeight: true,
                        height: 700,
                        width: 750,
                        bodyPadding: 6,
                        rowHeight: 100,
                        defaults: {
                            xtype: 'textfield',
                            width: 700
                        },
                        items: [
                            Ext.create('Ext.form.Panel',
                                {
                                    title: '',
                                    id: 'companyInfoPanel',
                                    items: [
                                        {
                                            xtype: 'hidden',
                                            itemId: 'Id',
                                            name:'Id'
                                        },
                     ");
            WriteLiteral(@"                   {
                                            xtype: 'textfield',
                                            fieldLabel: 'Название предприятия*',
                                            labelWidth: 115,
                                            itemId: 'Name',
                                            width: 700,
                                            name: 'Name',
                                            minLength:3,
                                            allowBlank:false
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Сокращенное название предприятия',
                                            labelWidth: 115,
                                            itemId: 'ShortName',
                                            name: 'ShortName',
                                            width: 500
   ");
            WriteLiteral(@"                                     },
                                        //ownershipTypeEditCmbx,
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'ИНН',
                                            labelWidth: 115,
                                            itemId: 'INN',
                                            vtype: 'numbers',
                                            name: 'INN',
                                            width: 250
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Руководитель',
                                            labelWidth: 115,
                                            itemId: 'Director',
                                            name: 'Director',
                               ");
            WriteLiteral(@"             regex: /\D[^0-9]$/,
                                            width: 700
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Инициалы руководителя',
                                            labelWidth: 115,
                                            itemId: 'DirectorInitials',
                                            name: 'DirectorInitials',
                                            vtype: 'initials',
                                            width: 400
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'ФИО руководителя в родительном падеже',
                                            labelWidth: 115,
                                            itemId: 'DirectorG");
            WriteLiteral(@"enitive',
                                            name: 'DirectorGenitive',
                                            width: 700
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Должность руководителя предприятия',
                                            labelWidth: 115,
                                            itemId: 'PostOfDirector',
                                            name: 'PostOfDirector',
                                            width: 700
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Должность руководителя в родительном падеже',
                                            labelWidth: 115,
                                            itemId: 'PostOfDire");
            WriteLiteral(@"ctorGenitive',
                                            name: 'PostOfDirectorGenitive',
                                            width: 700
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Ответственный',
                                            labelWidth: 115,
                                            itemId: 'PersonInCharge',
                                            name: 'PersonInCharge',
                                            width: 700
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Инициалы ответственного',
                                            name:'PersonInChargeInitials',
                                            labelWidth: 115,
                 ");
            WriteLiteral(@"                           itemId: 'PersonInChargeInitials',
                                            vtype: 'initials',
                                            width: 400
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Должность ответственного лица',
                                            labelWidth: 115,
                                            itemId: 'PostOfPersonInCharge',
                                            name: 'PostOfPersonInCharge',
                                            width: 700
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Телефон ответственного лица',
                                            labelWidth: 115,
                            ");
            WriteLiteral(@"                itemId: 'Phone',
                                            name: 'Phone',
                                            width: 700
                                        },
                                        countryCmbx,
                                        regionCmbx,
                                        cityCmbx,
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Адрес',
                                            labelWidth: 115,
                                            itemId: 'Address',
                                            name:'Address',
                                            width: 700
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Телефон предприятия',
                       ");
            WriteLiteral(@"                     labelWidth: 115,
                                            itemId: 'CompanyPhoneNumber',
                                            name: 'CompanyPhoneNumber',
                                            width: 300
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'E-mail',
                                            labelWidth: 115,
                                            itemId: 'Email',
                                            name:'Email',
                                            vtype: 'email',
                                            width: 400
                                        },
                                        {
                                            xtype: 'textfield',
                                            fieldLabel: 'Сайт',
                                            l");
            WriteLiteral(@"abelWidth: 115,
                                            itemId: 'Site',
                                            name: 'Site',
                                            width: 700
                                        },
                                        filePanel,
                                        statusCmbx
                                    ]
                                })
                        ],
                        buttons: [
                            {
                                id: 'btnSaveCompany',
                                text: ""Сохранить"",
                                handler: function (button) {
                                    var companyInfoPanel = editWnd.queryById('companyInfoPanel').getForm();

                                    if (!companyInfoPanel.isValid()) {
                                        Ext.Msg.alert('Ошибка', 'Заполнены не все обязательные поля!');
                                        return;
       ");
            WriteLiteral("                             }\r\n                                    companyInfoPanel.submit({\r\n                                        url: \'");
#nullable restore
#line 790 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                         Write(Url.Action("SaveCompanyInfos"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                        params: {
                                            removeInfoDoc: removeInfoDoc,
                                            uploadInfoDoc: uploadInfoDoc
                                        },
                                        success: function (form, action) {
                                            store.reload();
                                        },
                                        failure: function (form, action) {
                                            if (action.result.message != null) {
                                                Ext.MessageBox.alert('Ошибка', action.result.message);
                                            }
                                            else {
                                                Ext.MessageBox.alert('Ошибка', ""У вас нет прав вносить изменения в справочник"");
                                            }
                                        }
              ");
            WriteLiteral(@"                      });
                                    editWnd.hide();
                                }
                            },
                            {
                                text: ""Отмена"",
                                handler: function () { editWnd.hide(); }
                            }
                        ]
                    });

                var similarCompaniesStore = Ext.create(""Ext.data.Store"",
                    {
                        autoLoad: false,
                        proxy: {
                            type: 'ajax',
                            url: '");
#nullable restore
#line 822 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                             Write(Url.Action("SimilarCompanies"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                            reader: {
                                type: 'json',
                                rootProperty: 'data',
                                totalProperty: 'total'
                            }
                        }
                    });

                var confirmWnd = Ext.create('Ext.window.Window',
                    {
                        title: ""Подтверждение статуса"",
                        closeAction: 'hide',
                        scrollable: true,
                        resizable: true,
                        autoHeight: true,
                        autoWidth: true,
                        bodyPadding: 6,
                        defaults: {
                            xtype: 'textfield',
                            width: 870
                        },
                        items: [
                            {
                                xtype: 'hidden',
                                itemId: 'Id',
                   ");
            WriteLiteral(@"         },
                            {
                                xtype: 'grid',
                                itemId: 'SetCompanyStatusGrid',
                                store: similarCompaniesStore,
                                loadMask: true,
                                height: 400,
                                columnLines: true,
                                tbar: [
                                    {
                                        xtype: 'textfield',
                                        fieldLabel: 'Ключевое слово для поиска',
                                        labelWidth: 120,
                                        itemId: 'similarCompanyName',
                                        width: 600
                                    },
                                    {
                                        xtype: 'button',
                                        icon: '/Content/Images/search.png',
                                       ");
            WriteLiteral(@" handler: function () {
                                            var similarCompanyName = Ext.ComponentQuery.query('#similarCompanyName')[0].getValue();
                                            if (similarCompanyName != """" && similarCompanyName != null) {
                                                similarCompaniesStore.proxy.setUrl('");
#nullable restore
#line 870 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                                                               Write(Url.Action("SimilarCompanies"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"?id=' + confirmWnd.getComponent('Id').getValue() +
                                                    '&name=' + similarCompanyName);
                                                similarCompaniesStore.reload();
                                            }
                                            else
                                            {
                                                Ext.MessageBox.alert('Ошибка', ""Укажите ключевое слово для поиска"");
                                            }
                                        }
                                    }
                                ],
                                columns: [
                                    {
                                        header: 'Номер',
                                        align: 'center',
                                        dataIndex: 'Id',
                                        width: 80,
                                        cellWrap: true,
             ");
            WriteLiteral(@"                           renderer: Urfu.renders.htmlEncodeWithToolTip
                                    },
                                    {
                                        header: 'Название',
                                        align: 'left',
                                        dataIndex: 'Name',
                                        width: 400,
                                        cellWrap: true,
                                        sortable: false,
                                        renderer: Urfu.renders.htmlEncodeWithToolTip
                                    },
                                    {
                                        header: 'Адрес',
                                        align: 'left',
                                        dataIndex: 'Address',
                                        width: 250,
                                        cellWrap: true,
                                        sortable: false,
                 ");
            WriteLiteral(@"                       renderer: Urfu.renders.htmlEncodeWithToolTip
                                    },
                                    {
                                        header: 'Статус',
                                        align: 'left',
                                        dataIndex: 'Status',
                                        width: 160,
                                        cellWrap: true,
                                        sortable: false,
                                        renderer: Urfu.renders.htmlEncodeWithToolTip
                                    }
                                ],
                                selModel: {
                                    selType: 'checkboxmodel',
                                    mode: 'MULTI',
                                    headerWidth: 30,
                                    checkOnly: 'true',
                                    allowDeselect: true
                                }
        ");
            WriteLiteral(@"                    }
                        ],

                        buttons: [
                            {
                                id: 'btnIntegrateCompanies',
                                text: ""Объединить"",
                                handler: function () {
                                    var objects = confirmWnd.getComponent('SetCompanyStatusGrid').getSelectionModel().getSelection();
                                    if (objects.length == 0) {
                                        Ext.MessageBox.alert('Ошибка', ""Выберите хотя бы одно предприятие для объединения"");
                                    }
                                    else{
                                    var request = function () {
                                            var companyIds = [];
                                            objects.forEach(function (item, index, array) {
                                                companyIds.push(item.data.Id);
                      ");
            WriteLiteral("                      });\r\n\r\n                                            Ext.Ajax.request({\r\n                                                url: \'");
#nullable restore
#line 945 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                                 Write(Url.Action("IntegrateCompanies"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                                params: {
                                                    idsToRemove: companyIds,
                                                    newId: confirmWnd.getComponent('Id').getValue(),
                                                },
                                                success: function (response) {
                                                    if (response.responseText != """") {
                                                        var data = Ext.decode(response.responseText);
                                                        if (data.success) {
                                                            store.reload();
                                                            confirmWnd.hide();
                                                        }
                                                        else {
                                                            Ext.MessageBox.show({
                  ");
            WriteLiteral(@"                                              title: 'Ошибка',
                                                                msg: data.message,
                                                                buttons: Ext.MessageBox.OK
                                                            });
                                                        }
                                                    }
                                                },
                                                failure: function (response) {
                                                    Ext.MessageBox.alert('Ошибка', ""Неизвестная ошибка"");
                                                }
                                            });
                                        }

                                        Ext.MessageBox.show({
                                            title: 'Информационное сообщение',
                                            msg: ""Выбранные предприятия будут ");
            WriteLiteral(@"удалены! Их договоры будут переведены на текущее предприятие. Продолжить?"",
                                            buttons: Ext.MessageBox.YESNO,
                                            fn: function (btn) {
                                                if (btn === 'yes') {
                                                    request();
                                                }
                                            }
                                        });
                                    }
                                }
                            },
                            {
                                text: ""Новое предприятие"",
                                handler: function () {
                                    Ext.Ajax.request({
                                            url: '");
#nullable restore
#line 989 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                             Write(Url.Action("SetConfirmedStatus"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                            params: {
                                                id: confirmWnd.getComponent('Id').getValue()
                                            },
                                        success: function (response) {
                                            if (response.responseText != """")
                                                var data = Ext.decode(response.responseText);
                                            if (data.success) {
                                                Ext.MessageBox.show({
                                                    msg: data.message,
                                                    buttons: Ext.MessageBox.OK
                                                    });
                                                store.reload();
                                                confirmWnd.hide();
                                            }
                                            else {
 ");
            WriteLiteral(@"                                               Ext.MessageBox.show({
                                                    title: 'Ошибка',
                                                    msg: data.message,
                                                    buttons: Ext.MessageBox.OK
                                                });
                                            }

                                            },
                                            failure: function (response) {
                                                Ext.MessageBox.alert('Ошибка', ""Неизвестная ошибка"");
                                            }
                                        });

                                }
                            }
                        ]

                    });

                var tpl = '<a href=""");
#nullable restore
#line 1024 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                               Write(Url.Action("Contracts"));

#line default
#line hidden
#nullable disable
            WriteLiteral("?id={Id}\">Договоры</a>\';\r\n\r\n                var tplInfoDoc = \'<a href=\"");
#nullable restore
#line 1026 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                      Write(Url.Action("DownloadInfoDocument"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"?id={Id}"">{DocumentName}</a>';

                var gridPanel = Ext.create('Ext.grid.Panel',
                    {
                        region: 'center',
                        store: store,
                        loadMask: true,
                        columnLines: true,
                        tbar: [
                            {
                                xtype: 'button',
                                text: ""Фильтры"",
                                handler: function () {
                                    filtersWnd.show();
                                }
                            },
                            {
                                xtype: 'button',
                                text: ""Отменить фильтры"",
                                handler: function () {
                                    store.clearFilter();
                                    settings = [];
                                    localStorage.setItem(localStorageName, JSON.stringify");
            WriteLiteral(@"([]));
                                }
                            }, '-',
                            {
                                xtype: 'button',
                                text: ""Добавить предприятие"",
                                handler: function () {
                                    checkEditRole(function () {
                                        setEmptyValuesToEditForm();
                                        editWnd.show();
                                    });
                                }
                            }, '-',
                            {
                                xtype: 'button',
                                text: ""Открыть в Excel"",
                                handler: function () {
                                    var fileUrl = '");
#nullable restore
#line 1065 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                              Write(Url.Action("DownloadCompaniesReportExcel"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'
                                        .concat('?filter=' + encodeURIComponent(localStorage.getItem(localStorageName) || ""[]""));
                                    window.location.href = fileUrl;
                                    return false;
                                }
                            }, '-',
                            {
                                xtype: 'button',
                                text: ""Удалить"",
                                handler: function () {
                                    checkEditRole(function () {
                                        var objects = gridPanel.getSelectionModel().getSelection();
                                        if (objects.length == 0) {
                                            Ext.MessageBox.alert('Уведомление', ""Выберите предприятия для удаления"");
                                            return;
                                        }
                                        
                    ");
            WriteLiteral(@"                    var remove = function () {
                                            var companyIds = [];
                                            objects.forEach(function (item, index, array) {
                                                companyIds.push(item.data.Id);
                                            });
                                            Ext.Ajax.request({
                                                url: '");
#nullable restore
#line 1088 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                                 Write(Url.Action("DeleteCompanies"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                                params: {
                                                    companyIds: companyIds
                                                },
                                                success: function (response) {
                                                    store.reload();
                                                },
                                                failure: function (response) {
                                                    if (response.responseText != """") {
                                                        var data = Ext.decode(response.responseText);
                                                        Ext.MessageBox.show({
                                                            title: 'Ошибка',
                                                            msg: data.message,
                                                            buttons: Ext.MessageBox.OK
                                    ");
            WriteLiteral(@"                    });
                                                    }
                                                }
                                            });
                                        }

                                        var request = function () {
                                            var companyIds = [];
                                            objects.forEach(function (item, index, array) {
                                                companyIds.push(item.data.Id);
                                            });
                                            Ext.Ajax.request({
                                                    url: '");
#nullable restore
#line 1114 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                                     Write(Url.Action("CheckStudentsAdmissions2"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                                    params: {
                                                        companyIds: companyIds
                                                    },
                                                    success: function (response) {
                                                        if (response.responseText != """") {
                                                            var data = Ext.decode(response.responseText);
                                                            if (data.success) {
                                                                remove();
                                                            }
                                                            else {
                                                                Ext.MessageBox.show({
                                                                    title: 'Предупреждение',
                                                                    ms");
            WriteLiteral(@"g: data.message + ""Вы хотите удалить предприятия? Зачисления студентов будут удалены!"",
                                                                    buttons: Ext.MessageBox.YESNO,
                                                                    fn: function (btn) {
                                                                        if (btn === 'yes') {
                                                                            remove();
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                        }
                                                    },
                                                    failure: function (response) {
                                                    }
                                ");
            WriteLiteral(@"            });
                                        }
                                        
                                        Ext.MessageBox.show({
                                            title: 'Информационное сообщение',
                                            msg: ""Удалить выбранные предприятия?"",
                                            buttons: Ext.MessageBox.YESNO,
                                            fn: function (btn) {
                                                if (btn === 'yes') {
                                                    request();
                                                }
                                            }
                                        });
                                    });
                                }
                            },
                        ],
                        plugins: [
                            {
                                ptype: ""rowexpander"",
                  ");
            WriteLiteral(@"              rowBodyTpl: new Ext.XTemplate(
                                    '<p><b>ИНН: </b>{INN}</p>',
                                    '<p><b>Руководитель: </b>{Director}</p>',
                                    '<p><b>Инициалы руководителя: </b>{DirectorInitials}</p>',
                                    '<p><b>ФИО руководителя в родительном падеже: </b>{DirectorGenitive}</p>',
                                    '<p><b>Пост руководителя: </b>{PostOfDirector}</p>',
                                    '<p><b>Пост руководителя в родительном падеже: </b>{PostOfDirectorGenitive}</p>',
                                    '<p><b>Страна: </b>{Country}</p>',
                                    '<p><b>Регион: </b>{Region}</p>',
                                    '<p><b>Город: </b>{City}</p>',
                                    '<p><b>Адрес: </b>{Address}</p>',
                                    '<p><b>Телефон предприятия: </b>{CompanyPhoneNumber}</p>',
                                    '<p");
            WriteLiteral(@"><b>Ответственное лицо: </b>{PersonInCharge}</p>',
                                    '<p><b>Инициалы ответственного лица: </b>{PersonInChargeInitials}</p>',
                                    '<p><b>Должность ответственного лица: </b>{PostOfPersonInCharge}</p>',
                                    '<p><b>Телефон ответственного лица: </b>{Phone}</p>',
                                    '<p><b>Email: </b>{Email}</p>',
                                    '<p><b>Сайт: </b>{Site}</p>'
                                )
                            }
                        ],
                        columns: [
                            { xtype: 'rownumberer', width: 50 },
                            {
                                header: 'Номер',
                                align: 'center',
                                dataIndex: 'Id',
                                width: 90,
                                cellWrap: true,
                                renderer: Urfu.renders.html");
            WriteLiteral(@"EncodeWithToolTip
                            },
                            {
                                header: 'Название',
                                align: 'left',
                                dataIndex: 'Name',
                                width: 400,
                                cellWrap: true,
                                renderer: Urfu.renders.htmlEncodeWithToolTip
                            },
                            {
                                header: 'Сокращенное название',
                                align: 'left',
                                dataIndex: 'ShortName',
                                width: 250,
                                cellWrap: true,
                                renderer: Urfu.renders.htmlEncodeWithToolTip
                            },
                            //{
                            //    header: 'Форма собственности',
                            //    align: 'left',
                            // ");
            WriteLiteral(@"   dataIndex: 'OwnershipType',
                            //    width: 150,
                            //    cellWrap: true,
                            //    renderer: Urfu.renders.htmlEncodeWithToolTip
                            //},
                            {
                                header: 'Договоры',
                                align: 'left',
                                dataIndex: 'Contracts',
                                cellWrap: true,
                                sortable: false,
                                width: 300,
                                renderer: Urfu.renders.htmlEncodeWithToolTip
                            },
                            {
                                header: 'Информация о предприятии',
                                xtype: 'templatecolumn',
                                sortable: false,
                                tpl: tplInfoDoc,
                                width: 150
                            },
   ");
            WriteLiteral(@"                         {
                                header: 'Статус',
                                align: 'center',
                                dataIndex: 'IsConfirmed',
                                width: 160,
                                renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                                    return (value) ? ""Подтверждено"" : ""На проверку"";
                                }
                            },
                            {
                                xtype: 'actioncolumn',
                                region: 'center',
                                sortable: false,
                                width: 100,
                                items: [
                                    {
                                        icon: '");
#nullable restore
#line 1247 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                          Write(Url.Content("~/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                        iconCls: 'icon-padding',
                                        text: 'Редактировать',
                                        tooltip: 'Редактировать',
                                        handler: function (grid, rowIndex, colIndex) {
                                            checkEditRole(function () {
                                                var rec = grid.getStore().getAt(rowIndex);
                                                setEmptyValuesToEditForm();
                                                editWnd.show();
                                                setValuesToEditForm(rec);
                                                //editWnd.down('form').loadRecord(rec);
                                            });
                                        }
                                    },
                                    {
                                        icon: '");
#nullable restore
#line 1262 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                          Write(Url.Content("~/Content/Images/clip.png"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                        iconCls: 'icon-padding',
                                        text: 'Подтвердить',
                                        tooltip: 'Подтвердить',
                                        handler: function (grid, rowIndex, colIndex) {
                                            checkEditRole(function () {
                                                var rec = grid.getStore().getAt(rowIndex);
                                                Ext.ComponentQuery.query('#similarCompanyName')[0].setValue(rec.get(""Name""));
                                                similarCompaniesStore.removeAll();
                                                similarCompaniesStore.proxy.setUrl('");
#nullable restore
#line 1271 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                                                               Write(Url.Action("SimilarCompanies"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"?id=' + rec.get('Id') +
                                                    '&name=' + rec.get('Name'));
                                                similarCompaniesStore.reload();
                                                confirmWnd.getComponent('Id').setValue(rec.get('Id'));
                                                confirmWnd.show();
                                            });
                                        }
                                    },
                                    {
                                        icon: '");
#nullable restore
#line 1280 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                          Write(Url.Content("~/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                        iconCls: 'icon-padding',
                                        text: 'Удалить',
                                        tooltip: 'Удалить',
                                        handler: function (grid, rowIndex, colIndex) {

                                            var remove = function () {
                                                var rec = grid.getStore().getAt(rowIndex);
                                                Ext.Ajax.request({
                                                    url: '");
#nullable restore
#line 1289 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                                     Write(Url.Action("DeleteCompany"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                                    params: {
                                                        companyId: rec.get(""Id"")
                                                    },
                                                    success: function (response) {
                                                        store.reload();
                                                    },
                                                    failure: function (response) {
                                                        if (response.responseText != """") {
                                                            var data = Ext.decode(response.responseText);
                                                            Ext.MessageBox.show({
                                                                title: 'Ошибка',
                                                                msg: data.message,
                                                                buttons: E");
            WriteLiteral(@"xt.MessageBox.OK
                                                            });
                                                        }
                                                    }
                                                });
                                            }

                                            var request = function () {
                                                var rec = grid.getStore().getAt(rowIndex);
                                                Ext.Ajax.request({
                                                     url: '");
#nullable restore
#line 1312 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                                      Write(Url.Action("CheckStudentsAdmissions"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                                     params: {
                                                         companyId: rec.get(""Id"")
                                                     },
                                                     success: function (response) {
                                                         if (response.responseText != """") {
                                                             var data = Ext.decode(response.responseText);
                                                             if (data.success) {
                                                                 remove();
                                                             }
                                                             else {
                                                                 Ext.MessageBox.show({
                                                                     title: 'Предупреждение',
                                                        ");
            WriteLiteral(@"             msg: data.message + ""Вы хотите удалить предприятие? Зачисления студентов будут удалены!"",
                                                                     buttons: Ext.MessageBox.YESNO,
                                                                     fn: function (btn) {
                                                                         if (btn === 'yes') {
                                                                             remove();
                                                                         }
                                                                     }
                                                                 });
                                                             }
                                                         }
                                                     },
                                                     failure: function (response) {
                                                     }
     ");
            WriteLiteral(@"                                           });
                                            }

                                            var checkFunction = function () {
                                                Ext.MessageBox.show({
                                                    title: 'Информационное сообщение',
                                                    msg: ""Вы хотите удалить предприятие?"",
                                                    buttons: Ext.MessageBox.YESNO,
                                                    fn: function (btn) {
                                                        if (btn === 'yes') {
                                                            request();
                                                        }
                                                    }
                                                });
                                            }

                                            checkEditRole(checkFunction);");
            WriteLiteral(@"
                                        }
                                    }
                                ]
                            },
                            {
                                xtype: 'templatecolumn',
                                sortable: false,
                                tpl: tpl,
                                width: 100
                            }
                        ],
                        selModel: {
                            selType: 'checkboxmodel',
                            mode: 'MULTI',
                            headerWidth: 30,
                            checkOnly: 'true',
                            allowDeselect: true
                        }
                    });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);


                gridPanel.getStore()
                .on('load',
                    function(store, records, options) {
    ");
            WriteLiteral("                    var focus = \'");
#nullable restore
#line 1385 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\PracticeCompanies\Index.cshtml"
                                Write(ViewBag.Focus);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
                        if (focus && focus.length > 0) {

                            var focusRow = store.findExact('Id', parseInt(focus));
                            if (focusRow >= 0) {
                                var rowData = store.getAt(focusRow);
                                gridPanel.getView().focusRow(rowData);
                                gridPanel.getSelectionModel().select(rowData);
                            }
                        }
                        return false;
                    });
            });
        </script>
    </div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
