#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "050abf6ea74657e946570d5be2b421d278de4307"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_SectionFKSubgroup_Index), @"mvc.1.0.view", @"/Views/SectionFKSubgroup/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"050abf6ea74657e946570d5be2b421d278de4307", @"/Views/SectionFKSubgroup/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_SectionFKSubgroup_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Urfu.Its.Web.DataContext.SectionFKCompetitionGroup>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
  
    ViewBag.Title = "Подгруппы для секции ФК";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";
    var filterName = "SectionFKSubgroupFilters";

#line default
#line hidden
#nullable disable
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();
            Ext.Ajax.setTimeout(120000);
            Ext.define('ComboBoxModel',
                {
                    extend: 'Ext.data.Model',
                    fields:
                    [
                        { type: 'string', name: 'Id' },
                        { type: 'string', name: 'Name' }
                    ]
                });
            var all = Ext.create('ComboBoxModel',
                {
                    Name: 'Все'
                });
            var semestersStore = Ext.create('Ext.data.Store',
                {
                    model: 'ComboBoxModel',
                    proxy:
                    {
                        type: 'ajax',
                        url: '/Minors/Semesters',
                        reader: { type: 'json', rootProperty: 'data' }
                    },
                    listeners: {
                        ");
                WriteLiteral(@"load: function() {
                            this.add(all);
                            this.commitChanges();
                        }
                    },
                    remoteSort: false, //true for server sorting
                    sorters: [
                        {
                            property: 'Id',
                            direction: 'ASC'
                        }
                    ]
                });

            var yearStore = Ext.create('Ext.data.Store',
                {
                    model: 'ComboBoxModel',
                    proxy:
                    {
                        type: 'ajax',
                        url: '/MinorSubgroup/MinorPeriodYears',
                        reader: { type: 'json', rootProperty: 'data' }
                    },
                    listeners: {
                        load: function() {
                            this.add(all);
                            this.commitChanges();
                       ");
                WriteLiteral(@" }
                    },
                    remoteSort: false, //true for server sorting
                    sorters: [
                        {
                            property: 'Id',
                            direction: 'ASC'
                        }
                    ]
                });

            var moduleStore = Ext.create('Ext.data.Store',
                {
                    idProperty: 'Id',
                    proxy:
                    {
                        type: 'ajax',
                        url: '");
#nullable restore
#line 80 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                         Write(Url.Action("Modules", new {competitionGroupId = Model.Id}));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                        reader: { type: 'json', rootProperty: 'data' }
                    },
                    listeners: {
                        load: function() {
                            this.add(all);
                            this.commitChanges();
                        }
                    },
                    remoteFilter: false,
                    remoteSort: false, //true for server sorting
                    sorters: [
                        {
                            property: 'Id',
                            direction: 'ASC'
                        }
                    ]
                });
            var printWnd = null;

            function setSubgroupFilter() {
                moduleStore.clearFilter();
                var year = printWnd.getComponent(""year"").getValue();
                var semesterId = printWnd.getComponent(""semester"").getValue();

                if (year && year.length > 0)
                    moduleStore.filter(""Year"", ye");
                WriteLiteral(@"ar);
                if (semesterId && semesterId.length > 0)
                    moduleStore.filter(""SemesterId"", semesterId);
            }

            var store = Ext.create(""Ext.data.Store"",
                {
                    idProperty: 'Id',
                    fields: [
                        ""Id"", ""Year"", ""Semester"", ""ModuleTitle"", ""Name"", ""subgroupType"", ""Limit"", ""count"", ""teacher""
                    ],
                    autoLoad: false,
                    remoteSort: true,
                    groupField: 'ModuleTitle',
                    remoteFilter: true,
                    proxy: {
                        type: 'ajax',
                        url: '");
#nullable restore
#line 123 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                         Write(Url.Action("Index", new {competitionGroupId = Model.Id}));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        },
                        timeout: 120000
                    }
                });

            function updateTitle() {
                if (Urfu && Urfu.panel)
                    Urfu.panel.setTitle(""");
#nullable restore
#line 135 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                    Write(ViewBag.Title);

#line default
#line hidden
#nullable disable
                WriteLiteral("\");\r\n                Ext.Ajax.request({\r\n                    url: \'/SectionFKSubgroup/StudentsCount?competitionGroupId=");
#nullable restore
#line 137 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                                         Write(Model.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral("&filter=\' +\r\n                        encodeURIComponent(localStorage.getItem(\"");
#nullable restore
#line 138 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                            Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral("\") || \"[]\"),\r\n                    method: \'GET\',\r\n                    success: function(response) {\r\n                        if (Urfu && Urfu.panel) \r\n                            Urfu.panel\r\n                                .setTitle(\"");
#nullable restore
#line 143 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                      Write(ViewBag.Title);

#line default
#line hidden
#nullable disable
                WriteLiteral("  Кол-во зачисленных студентов: \\\\ \" +\r\n                                    \"");
#nullable restore
#line 144 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                Write(Model.Name.Replace("\n",""));

#line default
#line hidden
#nullable disable
                WriteLiteral("\");\r\n                        else\r\n                            setTimeout(function() {\r\n                                while (!Urfu || !Urfu.panel) {\r\n                                    Urfu.panel.setTitle(\"");
#nullable restore
#line 148 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                    Write(ViewBag.Title);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"  Кол-во зачисленных студентов: \\ "" +
                                        response.responseText,
                                        100);
                                }
                            });
                    },
                    params: {
                        //filter: JSON.parse(localStorage.getItem(""");
#nullable restore
#line 155 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                              Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral("\") || \"[]\")\r\n\r\n                    }\r\n                });\r\n            }\r\n\r\n            var prevSettings = {};\r\n            try {\r\n                var prevSettingString = JSON.parse(localStorage.getItem(\"");
#nullable restore
#line 163 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                                    Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }

            filtersWnd = null;

            function loadStore() {
                store.proxy.setUrl('");
#nullable restore
#line 175 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                               Write(Url.Action("Index", new {competitionGroupId = Model.Id}));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' +\r\n                    \'&filter=\' +\r\n                    encodeURIComponent(localStorage.getItem(\"");
#nullable restore
#line 177 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                        Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""")));
                store.load();
            }

            var setFilters = function() {
                var settings = [
                    { property: 'Year', value: filtersWnd.getComponent(""Year"").getValue() },
                    { property: 'Semester', value: filtersWnd.getComponent(""Semester"").getValue() },
                    { property: 'ModuleTitle', value: filtersWnd.getComponent(""ModuleTitle"").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent(""Name"").getValue() },
                    { property: 'subgroupType', value: filtersWnd.getComponent(""subgroupType"").getValue() },
                    { property: 'Limit', value: filtersWnd.getComponent(""Limit"").getValue() },
                    { property: 'count', value: filtersWnd.getComponent(""count"").getValue() }
                ];
                localStorage.setItem(""");
#nullable restore
#line 191 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                 Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""", JSON.stringify(settings));
                loadStore();
                updateTitle();
            };

            filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Фильтры"",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: true,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 500
                    },
                    items: [
                        { fieldLabel: ""Год"", itemId: ""Year"", value: prevSettings[""Year""] },
                        { fieldLabel: ""Семестр"", itemId: ""Semester"", value: prevSettings[""Semester""] },
                        { fieldLabel: ""Модуль"", itemId: ""ModuleTitle"", value: prevSettings[""ModuleTitle""] },
                        { fieldLabel: ""Индекс"", itemId: ""Name"", value: prevSettings[""Name""] },
                        { fieldLabel: ""Тип подгруппы"", itemId: ""subg");
                WriteLiteral(@"roupType"", value: prevSettings[""subgroupId""] },
                        { fieldLabel: ""Лимит"", itemId: ""Limit"", value: prevSettings[""Limit""] },
                        { fieldLabel: ""Студенты"", itemId: ""count"", value: prevSettings[""count""] }
                    ],
                    buttons: [
                        {
                            text: ""OK"",
                            handler: function() {
                                setFilters();
                                filtersWnd.hide();
                            }
                        },
                        {
                            text: ""Отмена"",
                            handler: function() { filtersWnd.hide(); }
                        }
                    ]
                });

            printWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Печать"",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: tru");
                WriteLiteral(@"e,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 700
                    },
                    items: [
                        {
                            fieldLabel: ""Год"",
                            itemId: ""year"",
                            editable: false,
                            xtype: ""combobox"",
                            store: yearStore,
                            valueField: 'Id',
                            displayField: 'Name',
                            queryMode: 'remote',
                            listeners: {
                                change: function(field, newValue, oldValue) {
                                    all.data.Year = newValue;
                                    setSubgroupFilter();
                                },
                                scope: this
                            }
                        },
                        ");
                WriteLiteral(@"{
                            fieldLabel: ""Семестр"",
                            itemId: ""semester"",
                            editable: false,
                            xtype: ""combobox"",
                            store: semestersStore,
                            valueField: 'Id',
                            displayField: 'Name',
                            queryMode: 'remote',
                            listeners: {
                                change: function(field, newValue, oldValue) {
                                    all.data.SemesterId = newValue;
                                    setSubgroupFilter();
                                },
                                scope: this
                            }
                        },
                        {
                            fieldLabel: ""Секция"",
                            itemId: ""module"",
                            editable: false,
                            xtype: ""combobox"",
                   ");
                WriteLiteral(@"         store: moduleStore,
                            valueField: 'Id',
                            displayField: 'Name',
                            queryMode: 'remote',
                            listeners: {
                                change: function(field, newValue, oldValue) {
                                },
                                scope: this
                            },
                            tpl: Ext.create('Ext.XTemplate',
                                '<tpl for=""."">',
                                '<div class=""x-boundlist-item"" style=""border-bottom:1px solid #f0f0f0;"">',
                                '<div>{Name}</div></div>',
                                '</tpl>'
                            ),

                            displayTpl: Ext.create('Ext.XTemplate',
                                '<tpl for=""."">',
                                '{Name}',
                                '</tpl>'
                            )

                   ");
                WriteLiteral(@"     }
                    ],
                    buttons: [
                        {
                            text: ""Распечатать"",
                            handler: function() {

                                var filter = [
                                    { property: ""Year"", value: printWnd.getComponent(""year"").getValue() },
                                    { property: ""semesterId"", value: printWnd.getComponent(""semester"").getValue() },
                                    { property: ""moduleId"", value: printWnd.getComponent(""module"").getValue() },
                                ];
                                var url = '");
#nullable restore
#line 316 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                      Write(Url.Action("MassPrint", new {competitionGroupId = Model.Id}));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' +
                                    ""&filter="" +
                                    JSON.stringify(filter);
                                window.location = url;
                                printWnd.hide();
                            }
                        },
                        {
                            text: ""Отмена"",
                            handler: function() { printWnd.hide(); }
                        }
                    ]
                });
            var copyUrl = """";
            var copyMembershipsWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Выбор параметра копирования"",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: true,
                    bodyStyle: ""margin: 10px;"",
                    bodyPadding: 6,
                    defaults: {
                        width: 400,

                    },
                    items: [
                   ");
                WriteLiteral(@"     {
                            //fieldLabel: ""Преподаватель "",
                            labelwidth: 150,
                            itemId: ""withTeacher"",
                            //editable: true,
                            xtype: ""checkboxfield"",
                            boxLabel: ""С преподавателем""

                        },
                    ],
                    buttons: [
                        {
                            text: ""Копировать"",
                            handler: function() {
                                copyMembershipsWnd.mask('Копирование..');
                                var url = copyUrl +
                                    ""&withTeacher="" +
                                    (copyMembershipsWnd.getComponent(""withTeacher"").getValue() ? ""true"" : ""false"");

                                Ext.Ajax.request({
                                    method: ""POST"",
                                    url: url,
                                ");
                WriteLiteral(@"    success: function(response) {
                                        copyMembershipsWnd.unmask();
                                        copyMembershipsWnd.hide();
                                        var data = Ext.decode(response.responseText);
                                        Ext.MessageBox.show({
                                            title: 'Информационное сообщение',
                                            msg: data.message,
                                            buttons: Ext.MessageBox.OK,
                                            fn: function(btn) {
                                                if (data.success) {
                                                    window.location = '/SectionFKSubgroup/Index?competitionGroupId=' + data.competitionGroupId + '&focus=' + data.focus;
                                                }
                                            }
                                        });
                                    }");
                WriteLiteral(@",
                                    failure: function(response) {
                                        copyMembershipsWnd.unmask();
                                        copyMembershipsWnd.hide();
                                        Ext.MessageBox.alert('Ошибка', ""Неизвестная ошибка"");
                                    }
                                });
                            }
                        },
                        {
                            text: ""Отмена"",
                            handler: function() { copyMembershipsWnd.hide(); }
                        }
                    ]
                });
            setFilters();
            var tpl = '<a href=""/MinorSubgroup/Students?id={Id}"">Студенты</a>\
                | <a href=""/MinorSubgroup/Edit?id={Id}"">Редактировать</a>';
            var grouping = Ext.create('Ext.grid.feature.Grouping',
                { ftype: 'grouping', collapsible: true, startCollapsed: true });
            var gridPanel = E");
                WriteLiteral(@"xt.create('Ext.grid.Panel',
                {
                    region: 'center',
                    store: store,
                    loadMask: true,
                    features: [grouping],
                    tbar: [
                        {
                            xtype: 'button',
                            text: 'Фильтры...',
                            handler: function() { filtersWnd.show(); }
                        },
                        {
                            xtype: 'button',
                            text: ""Отменить фильтры"",
                            handler: function() {
                                localStorage.setItem(""");
#nullable restore
#line 415 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                 Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""", []);
                                updateTitle();
                                loadStore();
                            }
                        },
                        {
                            xtype: 'button',
                            text: ""Количество подгрупп"",
                            handler: function() {
                                window.location = ""/SectionFKSubgroupMeta/Index?competitionGroupId=");
#nullable restore
#line 424 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                                                              Write(Model.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""";
                            }
                        },
                        {
                            xtype: 'button',
                            text: ""Развернуть\\Свернуть группировку"",
                            handler: function() {
                                window.groupsCollapsed = !window.groupsCollapsed;
                                if (window.groupsCollapsed)
                                    grouping.expandAll();
                                else
                                    grouping.collapseAll();
                            }
                        },
                        {
                            xtype: 'button',
                            text: ""Удалить"",
                            handler: function() {
                                var objects = gridPanel.getSelectionModel().getSelection();
                                if (objects.length === 0)
                                    return;
                                Ext.Me");
                WriteLiteral(@"ssageBox.confirm('Удаление подгрупп',
                                    'Удалить подгруппы и зачисления студентов в них (' +
                                    objects.length +
                                    ' шт.) ?',
                                    function(btn) {
                                        if (btn === 'yes') {
                                            var refresh = function() {
                                                window
                                                    .location =
                                                    ""/SectionFKSubgroup/Index?competitionGroupId=");
#nullable restore
#line 454 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                                                            Write(Model.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""";
                                            };
                                            Ext.Ajax.request({
                                                url: '/SectionFKSubgroup/Delete',
                                                success: refresh,
                                                failure: refresh,
                                                params:
                                                    { ids: objects.map(function(obj) { return obj.data.Id }) }
                                            });
                                        }
                                    });
                            }
                        }, {
                            xtype: 'button',
                            text: ""Копировать"",
                            handler: function() {
                                var objects = gridPanel.getSelectionModel().getSelection();
                                if (objects.length !== 2) {
                            ");
                WriteLiteral(@"        Ext.MessageBox
                                        .alert(""Копирование зачислений студентов"", 'Выберите две подгруппы');
                                    return;
                                }

                                var o0 = objects[0].data;
                                var o1 = objects[1].data;

                                if ((!!o0.count) === (!!o1.count)) {
                                    Ext.MessageBox.alert(""Копирование зачислений студентов"",
                                        'Одна из подгрупп должна быть пустой, в другую должны быть зачислены студенты');
                                    return;
                                }


                                var src = null;
                                var dst = null;
                                if (o0.count === 0)
                                    dst = o0;
                                if (o1.count === 0)
                                    dst = o1;
                   ");
                WriteLiteral(@"             if (o0.count !== 0)
                                    src = o0;
                                if (o1.count !== 0)
                                    src = o1;
                                if (src.subgroupType === dst.subgroupType) {
                                    Ext.MessageBox.alert(""Копирование зачислений студентов"",
                                        'Выберите другой вид нагрузки!');
                                } else {
                                    copyUrl = ""/SectionFKSubgroup/SimpleCopyMembership?srcId="" +
                                        src.Id +
                                        ""&dstId="" +
                                        dst.Id;

                                    copyMembershipsWnd.show();
                                }


                            }
                        },
                        '-',
                        {
                            xtype: 'splitbutton',
                            text");
                WriteLiteral(@": 'Другое',
                            menu: [
                                {
                                    //   xtype: 'button',
                                    text: ""Создать подгруппы"",
                                    handler: function() {
                                        window.location = ""/SectionFKSubgroup/Create?competitionGroupId=");
#nullable restore
#line 521 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                                                                   Write(Model.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""";
                                    }
                                },
                                {
                                    //xtype: 'button',
                                    text: ""Распределить студентов"",
                                    handler: function() {
                                        window
                                            .location =
                                            ""/SectionFKSubgroup/FillGroupsWithStudents?competitionGroupId=");
#nullable restore
#line 530 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                                                                     Write(Model.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""";
                                    }
                                },
                                '-',
                                {
                                    //  xtype: 'button',
                                    text: 'Открыть в Excel',
                                    handler: function() {
                                        var fileUrl =
                                            '");
#nullable restore
#line 539 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                        Write(Url.Action("DownloadSubGroups", new {competitionGroupId = Model.Id}));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' +\r\n                                                \"&filter=\" +\r\n                                                encodeURIComponent(localStorage.getItem(\"");
#nullable restore
#line 541 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                                                                    Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""") || ""[]"");
                                        window.location.href = fileUrl;
                                    }
                                },
                                {
                                    //   xtype: 'button',
                                    text: 'Печать',
                                    handler: function() {
                                        printWnd.show();
                                    }
                                }
                            ]


                        }
                    ],
                    columns:
                    [
                        { xtype: 'rownumberer', width: 50 },
                        {
                            header: 'Год',
                            dataIndex: 'Year',
                            width: 100,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Семес");
                WriteLiteral(@"тр',
                            dataIndex: 'Semester',
                            width: 100,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Модуль',
                            dataIndex: 'ModuleTitle',
                            width: 300,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Индекс',
                            dataIndex: 'Name',
                            width: 300,
                            renderer: function(value, metaData, record, rowIdx, colIdx, store) {
                                metaData.tdAttr = 'data-qtip=""' + value + '""';
                                return value;
                            }
                        },
                        {
                            header: 'Нагрузка',
                            ");
                WriteLiteral(@"align: 'center',
                            dataIndex: 'subgroupType',
                            renderer: Ext.util.Format.htmlEncode,
                            width: 180
                        },
                        {
                            header: 'Лимит',
                            align: 'center',
                            dataIndex: 'Limit',
                            renderer: Ext.util.Format.htmlEncode,
                            width: 120
                        },
                        {
                            header: 'Студенты',
                            align: 'center',
                            dataIndex: 'count',
                            renderer: Ext.util.Format.htmlEncode,
                            width: 120
                        },
                        {
                            header: 'Преподаватель',
                            align: 'center',
                            dataIndex: 'teacher',
                            ");
                WriteLiteral(@"renderer: Ext.util.Format.htmlEncode,
                            width: 150
                        },
                        {
                            sortable: false,
                            width: 470,
                            dataIndex: 'MarksFrozen',
                            renderer: function(value, metaData, record) {
                                return '<a href=""/SectionFKSubgroup/Students?id=' +
                                    record.get(""Id"") +
                                    '"">Студенты</a>\
                                  | <a href=""/SectionFKSubgroup/Edit?id=' +
                                    record.get(""Id"") +
                                    '"">Редактировать</a>';
                            }
                        }
                    ],
                    selModel:
                    {
                        selType: 'checkboxmodel',
                        headerWidth: 30

                    }
                });

         ");
                WriteLiteral(@"   var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);

            gridPanel.getStore()
                .on('load',
                    function(store, records, options) {
                        var focus = '");
#nullable restore
#line 646 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                                Write(ViewBag.Focus);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
                        if (focus && focus.length > 0) {

                            var focusRow = store.findExact('Id', parseInt(focus));
                            if (focusRow >= 0) {
                                var rowData = store.getAt(focusRow);
                                var gv = gridPanel.getView();

                                var groupingFeature = gridPanel.getView().features[0];

                                groupingFeature.expand(rowData.data['ModuleTitle'], true);

                                gv.focusRow(rowData);
                                gridPanel.getSelectionModel().select(rowData);
                            }
                            return false;
                        }
                    });

            var alertString = '");
#nullable restore
#line 665 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKSubgroup\Index.cshtml"
                          Write(ViewBag.Message);

#line default
#line hidden
#nullable disable
                WriteLiteral("\';\r\n            if (alertString.length > 0)\r\n                Ext.MessageBox.alert(\'Копирование зачислений студентов\', alertString);\r\n\r\n        });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Urfu.Its.Web.DataContext.SectionFKCompetitionGroup> Html { get; private set; }
    }
}
#pragma warning restore 1591
