#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f5596876bd82b4753083218d0690bb66a798a4a5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ProfOrders_Index), @"mvc.1.0.view", @"/Views/ProfOrders/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f5596876bd82b4753083218d0690bb66a798a4a5", @"/Views/ProfOrders/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_ProfOrders_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
  
    ViewBag.Title = "Приказы Минтруда России";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<style>\r\n      .x-action-col-icon {\r\n        height: 16px;\r\n        width: 16px;\r\n        margin-left: 5px !important;\r\n    }\r\n      .first {          \r\n          font-size: 1.1em;\r\n      }\r\n</style>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();

            var filterName = ""ProfOrderFilters"";

            function parseJson(json) {
                var data = JSON.parse(json.replace(/&quot;/g, '""'));
                return data;
            }

            var StatusesStore = Ext.create(""Ext.data.Store"",
                {
                    fields: ['StatusName'],
                    data: parseJson('");
#nullable restore
#line 33 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                Write(ViewBag.OrderStatuses);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"')
                });

            Ext.define('ProfOrder',
                {
                    extend: 'Ext.data.Model',
                    fields: [
                        { name: 'ProfOrderId', type: 'int' },
                        { name: 'ProfStandardCode', type: 'string' },
                        { name: 'NumberOfMintrud', type: 'string' },
                        {
                            name: 'DateOfMintrud',
                            type: 'date',
                            dateFormat: 'MS',
                            serialize: function(value, record) {
                                var date = new Date(parseInt(value.substr(6)));
                                return Ext.Date.format(date, Ext.Date.patterns.ISO8601Short);
                            }
                        },
                        { name: 'RegNumberOfMinust', type: 'string' },
                        {
                            name: 'RegNumberDateOfMinust',
                            ty");
                WriteLiteral(@"pe: 'date',
                            dateFormat: 'MS',
                            serialize: function(value, record) {
                                var date = new Date(parseInt(value.substr(6)));
                                return Ext.Date.format(date, Ext.Date.patterns.ISO8601Short);
                            }
                        },
                        { name: 'Status', type: 'string' },
                    ]

                });

            var ProfOrderStore = Ext.create(""Ext.data.Store"",
                {
                    autoLoad: true,
                    model: 'ProfOrder',
                    remoteSort: true,
                    remoteFilter: true,
                    proxy: {
                        type: 'ajax',
                        url: window.location.pathname,
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total',
       ");
                WriteLiteral(@"                 }
                    }

                });

            var prevSettings = {};

            try {
                var prevSettingString = JSON.parse(localStorage.getItem(filterName) || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
                ProfOrderStore.setFilters(prevSettingString);
            } catch (err) {
                console.log(err);
            }

            var filtersWnd = null;

            var setFilters = function() {
                var settings = [
                    { property: 'ProfStandardCode', value: filtersWnd.getComponent(""ProfStandardCodeField"").getValue() },
                    { property: 'NumberOfMintrud', value: filtersWnd.getComponent(""NumberOfMintrudField"").getValue() },
                    { property: 'Status', value: filtersWnd.getComponent(""StatusField"").getValue() },
      ");
                WriteLiteral(@"          ];
                ProfOrderStore.setFilters(settings);
                localStorage.setItem(filterName, JSON.stringify(settings));
            };


            filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Фильтры"",
                    closeAction: 'hide',
                    closeToolText: 'Закрыть окно',
                    resizable: false,
                    autoHeight: true,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 400
                    },
                    items: [
                        { fieldLabel: ""Код профессионального стандарта"", labelWidth: 150, itemId: ""ProfStandardCodeField"", value: prevSettings[""ProfStandardCode""] },
                        { fieldLabel: ""Номер приказа Минтруда России"", labelWidth: 150, itemId: ""NumberOfMintrudField"", value: prevSettings[""NumberOfMintrud""] },
                        {
         ");
                WriteLiteral(@"                   xtype: 'combobox',
                            fieldLabel: ""Статус приказа"",
                            labelWidth: 150,
                            itemId: ""StatusField"",
                            store: StatusesStore,
                            value: prevSettings[""Status""],
                            queryMode: 'local',
                            displayField: 'StatusName',
                            valueField: 'StatusName',
                            anyMatch: true,
                            width: 400
                        }
                    ],
                    buttons: [
                        {
                            text: ""OK"",
                            handler: function() {
                                setFilters();
                                filtersWnd.hide();
                            }
                        },
                        {
                            text: ""Отмена"",
                            handler: fu");
                WriteLiteral(@"nction() { filtersWnd.hide(); }
                        }
                    ]
                });


            function createRecordWindow(store, record) {
                return Ext.create('Ext.window.Window',
                    {
                        title: record ? 'Редактирование записи' : 'Добавление записи',
                        closeAction: 'hide',
                        closeToolText: 'Закрыть окно',
                        resizable: false,
                        bodyPadding: 6,
                        viewModel: {
                            data: Ext.apply({}, record ? record.data : {}),
                            stores: {
                                profstandards: {
                                    proxy: {
                                        autoLoad: true,
                                        type: 'ajax',
                                        url: '");
#nullable restore
#line 171 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                         Write(Url.Action("ProfStandards"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                        reader: { type: 'json' }
                                    }
                                }
                            }
                        },
                        items:
                        {
                            xtype: 'form',
                            layout: { type: 'vbox', align: 'stretch' },
                            defaults: {
                                xtype: 'textfield',
                                labelWidth: 170,
                            },
                            items: [
                                {
                                    xtype: 'hidden',
                                    name: 'Id',
                                    bind: '{ProfOrderId}',
                                },
                                {
                                    xtype: 'combobox',
                                    fieldLabel: 'Код профессионального стандарта',
                      ");
                WriteLiteral(@"              name: 'ProfStandardCode',
                                    bind: {
                                        store: '{profstandards}',
                                        value: '{ProfStandardCode}'
                                    },
                                    editable: true,
                                    allowBlank: false,
                                    queryMode: 'remote',
                                    displayField: 'Code',
                                    forceSelection: true,
                                    tpl: Ext.create('Ext.XTemplate',
                                        '<tpl for=""."">',
                                        '<div class=""x-boundlist-item"" data-qtip=""{Title}"" style=""border-bottom:1px"">',
                                        '<div>{Code}</div>' +
                                        '</div>',
                                        '</tpl>'
                                    )
                         ");
                WriteLiteral(@"       },
                                {
                                    xtype: 'textfield',
                                    fieldLabel: 'Номер приказа Минтруда России',
                                    bind: '{NumberOfMintrud}',
                                    name: 'NumberOfMintrud',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'datefield',
                                    fieldLabel: 'Дата приказа Минтруда России',
                                    bind: '{DateOfMintrud}',
                                    startDay: 1,
                                    format: 'd.m.Y',
                                    allowBlank: false,
                                    name: 'DateOfMintrud'
                                },
                                {
                                    xtype: 'textfield',
                                    fiel");
                WriteLiteral(@"dLabel: 'Регистрационный номер Минюста ',
                                    bind: '{RegNumberOfMinust}',
                                    itemId: 'RegNumberOfMinust',
                                    name: 'RegNumberOfMinust',
                                    allowBlank: false
                                },
                                {
                                    xtype: 'datefield',
                                    fieldLabel: 'Дата регистрационного номера Минюста России',
                                    bind: '{RegNumberDateOfMinust}',
                                    startDay: 1,
                                    allowBlank: false,
                                    name: 'RegNumberDateOfMinust'
                                },
                                {
                                    xtype: 'combobox',
                                    fieldLabel: ""Статус приказа"",
                                    bind: '{Status}',
              ");
                WriteLiteral(@"                      store: StatusesStore,
                                    queryMode: 'local',
                                    displayField: 'StatusName',
                                    valueField: 'StatusName',
                                    name: 'Status',
                                    anyMatch: true,
                                    allowBlank: false,
                                    forceSelection: true
                                }
                            ]
                        },
                        buttons: [
                            {
                                text: ""Сохранить"",
                                formBind: true,
                                handler: function() {

                                    var window = this.up('window');
                                    var form = window.down('form');

                                    if (!form.isValid()) {
                                        Ext.Msg.alert('");
                WriteLiteral("Ошибка\', \'Заполнены не все поля\');\r\n                                        return;\r\n                                    }\r\n                                    form.submit({\r\n                                        url: record ? \'");
#nullable restore
#line 273 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                                  Write(Url.Action("Edit"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' : \'");
#nullable restore
#line 273 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                                                          Write(Url.Action("Create"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                        success: function(form, action) {
                                            var r = action.result;
                                            if (!r.success) {
                                                Ext.MessageBox.alert('', r.message);
                                            } else {
                                                Ext.MessageBox.alert('', 'Информация сохранена.');
                                                ProfOrderStore.reload();
                                                window.close();
                                            }
                                        },
                                        failure: function(form, action) {
                                            Ext.MessageBox.alert('', 'Информация не сохранена. ' + action.result.message);
                                        }
                                    });
                                }
                          ");
                WriteLiteral(@"  },
                            {
                                text: ""Отмена"",
                                handler: function() { this.up('window').close(); }
                            }
                        ]

                    });
            };

            var gridPanel = Ext.create('Ext.grid.Panel',
                {
                    region: 'center',
                    store: ProfOrderStore,
                    columnLines: true,
                    tbar: [
                        {
                            xtype: 'button',
                            text: 'Фильтры...',
                            handler: function() { filtersWnd.show(); }
                        },
                        {
                            xtype: 'button',
                            text: ""Отменить фильтры"",
                            handler: function() {
                                ProfOrderStore.clearFilter();
                                ProfOrderStore.load();
  ");
                WriteLiteral(@"                              localStorage.setItem(filterName, JSON.stringify([]));
                            }
                        },
                        {
                            xtype: 'button',
                            text: 'Добавить приказ',
                            hidden: '");
#nullable restore
#line 322 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                            handler: function() { createRecordWindow(ProfOrderStore).show(); }
                        }
                    ],
                    columns: [
                        { xtype: 'rownumberer', header: '№', width: 60 },
                        { header: 'Код профессионального стандарта', dataIndex: 'ProfStandardCode', width: 250, align: 'center', renderer: Ext.util.Format.htmlEncode },
                        { header: 'Номер приказа Минтруда России', dataIndex: 'NumberOfMintrud', width: 250, align: 'center', renderer: Ext.util.Format.htmlEncode },
                        { header: 'Дата приказа Минтруда России', dataIndex: 'DateOfMintrud', width: 250, align: 'center', renderer: Ext.util.Format.dateRenderer('d.m.Y') },
                        { header: 'Регистрационный номер Минюста России', dataIndex: 'RegNumberOfMinust', width: 250, align: 'center', renderer: Ext.util.Format.htmlEncode },
                        { header: 'Дата регистрационного номера Мин");
                WriteLiteral(@"юста России', dataIndex: 'RegNumberDateOfMinust', width: 250, align: 'center', renderer: Ext.util.Format.dateRenderer('d.m.Y') },
                        { header: 'Статус', dataIndex: 'Status', width: 250, align: 'center', renderer: Ext.util.Format.htmlEncode },
                        {
                            xtype: 'actioncolumn',
                            resizable: false,
                            sortable: false,
                            width: 60,
                            align: 'center',
                            hidden: '");
#nullable restore
#line 340 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \'False\',\r\n                            items: [\r\n                                {\r\n                                    icon: \'");
#nullable restore
#line 343 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                      Write(Url.Content("/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    tooltip: 'Редактировать',
                                    handler: function(grid, rowIndex, colIndex, item, e, record) {
                                        createRecordWindow(ProfOrderStore, record).show();
                                    }
                                },
                                {
                                    icon: '");
#nullable restore
#line 350 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                      Write(Url.Content("/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    tooltip: 'Удалить',

                                    handler: function(grid, rowIndex, colIndex, item, e, record) {
                                        Ext.MessageBox.show({
                                            title: 'Удаление',
                                            msg: 'Вы действительно хотите удалить запись?',
                                            buttons: Ext.MessageBox.YESNO,
                                            fn: function(button) {
                                                if ('yes' == button) {
                                                    Ext.Ajax.request({
                                                        method: 'GET',
                                                        url: '");
#nullable restore
#line 362 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                                         Write(Url.Action("Delete"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                                        params: { id: record.get('ProfOrderId') },
                                                        success: function(response) {
                                                            var r = Ext.decode(response.responseText);
                                                            if (!r.success)
                                                                Ext.MessageBox.alert('', r.message);
                                                            else {
                                                                ProfOrderStore.reload();
                                                                Ext.MessageBox.alert('', 'Запись удалена');
                                                            }
                                                        },
                                                        failure: function(xhr) {
                                                            Ext.MessageBox.sho");
                WriteLiteral(@"w({
                                                                msg: xhr.responseText
                                                            })

                                                        }
                                                    });
                                                }
                                            },
                                            icon: Ext.MessageBox.QUESTION
                                        })
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'actioncolumn',
                            resizable: false,
                            sortable: false,
                            width: 70,
                            align: 'center',
                            items: [
                                {
                                    icon: '/Content/Images/document-");
                WriteLiteral(@"add2.png',
                                    tooltip: 'Приказы Минтруда России изменения',
                                    handler: function(grid, rowIndex, colIndex) {
                                        var rec = grid.getStore().getAt(rowIndex);
                                        proforderChangesStore.getProxy().extraParams = {
                                                proforderId: rec.get('ProfOrderId')
                                            },
                                            proforderChangesStore.load();
                                        var proforderChangesVM = proforderChangesWindow.getViewModel();
                                        proforderChangesVM.setData(rec.data);
                                        proforderChangesVM.set('DateOfMintrud', Ext.util.Format.date(rec.get('DateOfMintrud'), 'd.m.Y'));
                                        proforderChangesVM.set('RegNumberDateOfMinust', Ext.util.Format.date(rec.get('RegNumberDateOfMinust')");
                WriteLiteral(@", 'd.m.Y'));
                                        proforderChangesWindow.show();

                                    }
                                }
                            ]
                        }
                    ]

                });

            Ext.define('ProfOrderСhange',
                {
                    extend: 'Ext.data.Model',
                    fields: [
                        {
                            name: 'ProfOrderChangeID',
                            type: 'int'
                        },
                        {
                            name: 'ProfOrderId',
                            type: 'int'
                        },
                        { name: 'DateOfMintrud', type: 'date', dateFormat: 'd.m.Y' },
                        'NumberOfMintrud', 'RegNumberOfMinust',
                        { name: 'RegNumberDateOfMinust', type: 'date', dateFormat: 'd.m.Y' },
                        'Status'
                    ],

           ");
                WriteLiteral(@"         validations: [
                        {
                            type: 'length',
                            field: 'NumberOfMintrud',
                            min: 1
                        }, {
                            type: 'length',
                            field: 'RegNumberOfMinust',
                            min: 1
                        }, {
                            type: 'length',
                            field: 'Status',
                            min: 1
                        },
                        {
                            type: 'length',
                            field: 'DateOfMintrud',
                            min: 1
                        },
                        {
                            type: 'length',
                            field: 'RegNumberDateOfMinust',
                            min: 1
                        }
                    ],

                    setMainproforder: function(proforderId) {
         ");
                WriteLiteral(@"               this.set('ProfOrderId', proforderId);
                    }

                });


            var proforderChangesStore = Ext.create(""Ext.data.Store"",
                {
                    autoLoad: false,
                    model: 'ProfOrderСhange',
                    proxy: {
                        type: 'ajax',
                        url: '");
#nullable restore
#line 475 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                         Write(Url.Action("GetProfOrderChanges"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                        reader: {
                            type: 'json',
                            rootProperty: 'data'
                        }
                    }
                });

            var proforderChangesWindow = Ext.create('Ext.window.Window',
                {
                    title: 'Изменения приказа Минтруда России',
                    closeToolText: 'Закрыть окно',
                    closeAction: 'hide',
                    height: 500,
                    width: 1430,
                    layout: 'fit',
                    viewModel: {
                        data: {}
                    },
                    items: [
                        {
                            xtype: 'gridpanel',
                            store: proforderChangesStore,
                            viewConfig: {
                                markDirty: false
                            },
                            columnLines: true,
                            plugi");
                WriteLiteral(@"ns: {
                                ptype: 'rowediting',
                                clicksToEdit: 1,
                                autoCancel: false,
                                errorsText: 'Ошибка',
                                dirtyText: 'Вам необходимо подтвердить или отменить изменения',
                                listeners: {
                                    cancelEdit: function(rowEditing, context) {
                                        if (context.record.phantom) {
                                            proforderChangesStore.remove(context.record);
                                        }
                                    }
                                },
                                saveBtnText: ""Сохранить"",
                                cancelBtnText: ""Отмена""
                            },
                            columns: {
                                items:[
                                    { xtype: 'rownumberer',width: 40,  fl");
                WriteLiteral(@"ex: 0},
                                {
                                    header: 'Номер внесения изменений в профессиональный стандарт',
                                    dataIndex: 'NumberOfMintrud',
                                    align: 'center',
                                    cellWrap: true,
                                    sortable: true,
                                    field: {
                                        xtype: 'textfield'
                                    }
                                },
                                {
                                    header: 'Дата внесения изменений в профессиональный стандарт',
                                    dataIndex: 'DateOfMintrud',
                                    align: 'center',
                                    cellWrap: true,
                                    sortable: true,
                                    renderer: Ext.util.Format.dateRenderer('d.m.Y'),
                         ");
                WriteLiteral(@"           field: {
                                        xtype: 'datefield',
                                        startDay: 1,
                                        invalidText: ""{0} не является правильной датой - дата должна быть указана в формате дд.мм.гг "",
                                        formatText: ""Дата должна быть указана в формате дд.мм.гг""
                                    }
                                },
                                {
                                    header: 'Регистрационный номер Минюста России',
                                    dataIndex: 'RegNumberOfMinust',
                                    align: 'center',
                                    cellWrap: true,
                                    sortable: true,
                                    field: {
                                        xtype: 'textfield'
                                    }
                                },
                                {
            ");
                WriteLiteral(@"                        header: 'Дата регистрационного номера Минюста России',
                                    dataIndex: 'RegNumberDateOfMinust',
                                    align: 'center',
                                    cellWrap: true,
                                    sortable: true,
                                    renderer: Ext.util.Format.dateRenderer('d.m.Y'),
                                    field: {
                                        xtype: 'datefield',
                                        startDay: 1,
                                        invalidText: ""{0} не является правильной датой - дата должна быть указана в формате дд.мм.гг "",
                                        formatText: ""Дата должна быть указана в формате дд.мм.гг""
                                    }
                                },
                                {
                                    header: 'Статус',
                                    dataIndex: 'Status',
     ");
                WriteLiteral(@"                               align: 'center',
                                    flex:1/2,
                                    editor: {
                                        xtype: 'combobox',
                                        editable: false,
                                        store: StatusesStore,
                                        displayField: 'StatusName',
                                        valueField: 'StatusName'
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    menuDisabled: true,
                                    width: 50,
                                    flex: 0,
                                    hidden: '");
#nullable restore
#line 587 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \'False\',\r\n                                    items: [\r\n                                        {\r\n                                            icon: \'");
#nullable restore
#line 590 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                              Write(Url.Content("/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                            iconCls: 'icon-padding',
                                            tooltip: 'Удалить',
                                            handler: function(grid, rowIndex, colIndex, item, e, record) {
                                                Ext.MessageBox.show({
                                                    title: 'Уведомление',
                                                    msg: ""Удалить запись?"",
                                                    buttons: Ext.MessageBox.YESNO,
                                                    fn: function(btn) {
                                                        if (btn === 'yes') {
                                                            if (record.phantom) {
                                                                proforderChangesStore.removeAt(rowIndex);
                                                                return;
                                                        ");
                WriteLiteral("    }\r\n                                                            Ext.Ajax.request({\r\n                                                                method: \'GET\',\r\n                                                                url: \'");
#nullable restore
#line 606 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                                                 Write(Url.Action("RemoveProfOrderChange"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                                                params: { ProfOrderChangeId: record.get('ProfOrderChangeID') },
                                                                success: function() {
                                                                    Ext.MessageBox.show({
                                                                        title: 'Информационное сообщение',
                                                                        msg: 'Запись удалена успешно',
                                                                        buttons: Ext.MessageBox.OK
                                                                    });
                                                                    proforderChangesStore.removeAt(rowIndex);
                                                                },
                                                                failure: function(response) {
                                                      ");
                WriteLiteral(@"              console.log(response.status);
                                                                }

                                                            });
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    ]
                                }
                                ],
                                defaults: {
                                    flex: 1
                                }
                            },
                        dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            layout: {
                                align: 'left',
                                type: 'vbox'
                            },
");
                WriteLiteral(@"                            items: [
                                { xtype: 'tbtext', bind: { html: '<b>Код профессионального стандарта : </b><span class=""first"">{ProfStandardCode}' }, margin: '10 0 0 5' },
                                { xtype: 'tbtext', bind: { html: '<b>Номер приказа Минтруда России : </b>{NumberOfMintrud}' }, margin: '10 0 0 5' },
                                { xtype: 'tbtext', bind: { html: '<b>Дата приказа Минтруда России : </b>{DateOfMintrud}' }, margin: '10 0 0 5' },
                                { xtype: 'tbtext', bind: { html: '<b>Регистрационный номер Минюста России : </b>{RegNumberOfMinust}' }, margin: '10 0 0 5' },
                                { xtype: 'tbtext', bind: { html: '<b>Дата регистрационного номера Минюста России : </b>{RegNumberDateOfMinust}' }, margin: '10 0 0 5' },
                                { xtype: 'tbtext', bind: { html: '<b>Статус : </b>{Status}' }, margin: '10 0 10 5' },
                                {
                                 ");
                WriteLiteral("   xtype: \'button\',\r\n                                    text: \'Добавить изменение\',\r\n                                    hidden: \'");
#nullable restore
#line 651 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                                    handler: function() {
                                        rowEditing = proforderChangesWindow.query('gridpanel')[0].findPlugin('rowediting');
                                        var rec = new ProfOrderСhange();
                                        rec.setMainproforder(proforderChangesWindow.viewModel.get('ProfOrderId'));
                                        proforderChangesStore.insert(0, rec);
                                        rowEditing.startEdit(rec, 0);
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        beforeedit: function(editor, e) {
                            if ('");
#nullable restore
#line 665 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                            Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False') return false;
                            editor.getEditor().items.items[editor.getEditor().items.length - 1].disable()
                        },
                        edit: function(editor, e) {
                            if (!e.record.isValid()) {
                                Ext.Msg.alert('Ошибка ', 'Заполнены не все поля. Приказ не сохранен!');
                                return;
                            }
                            Ext.Ajax.request({
                                method: 'POST',
                                url: '");
#nullable restore
#line 675 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProfOrders\Index.cshtml"
                                 Write(Url.Action("UpdateProforderChange"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                jsonData: e.record.data,
                                success: function(response) {
                                    proforderChangesStore.reload();
                                },
                                failure: function() {
                                    e.record.reject();
                                }
                            });
                        }
                    }

                }
            ]
        });


        var items = [
            gridPanel
        ];

        Urfu.createViewport('border', items);
    });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
