#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\CompetenceGroups\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "53d3ec3e25729fbefbd3c76a9399a085df29d800"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_CompetenceGroups_Index), @"mvc.1.0.view", @"/Views/CompetenceGroups/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"53d3ec3e25729fbefbd3c76a9399a085df29d800", @"/Views/CompetenceGroups/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_CompetenceGroups_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\CompetenceGroups\Index.cshtml"
  
    ViewBag.Title = "Справочник Категории (группы) компетенций";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    .no-padding .x-grid-cell-inner {
        padding: 0
    }

    .x-form-item-default.x-item-disabled {
        filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
        opacity: 1;
    }

    .x-item-disabled,
    .x-item-disabled * {
        cursor: default;
        pointer-events: none;
        color: rgb(90,90,97)
    }
</style>

");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
    
    Ext.onReady(function() {

        Ext.tip.QuickTipManager.init();

        Ext.define('ComboBoxModel',
        {
            extend: 'Ext.data.Model',
            fields:
            [
                { type: 'string', name: 'Id' },
                { type: 'string', name: 'Name' }
            ]
        });

        var store = Ext.create(""Ext.data.Store"",
        {
            autoLoad: true,
            remoteSort: true,
            remoteFilter: true,

            proxy: {
                type: 'ajax',
                url: window.location.pathname,
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: 'total'
                }
            }
            });
     
        var gridPanel = Ext.create('Ext.grid.Panel',
        {
            multiSelect: true,
            region: 'center',
            store: store,
            loadMask: true,
    ");
                WriteLiteral("        columnLines: true,\r\n            tbar: [\r\n                {\r\n                    xtype: \'button\',\r\n                    text: \'Добавить\',\r\n                    hidden: \'");
#nullable restore
#line 70 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\CompetenceGroups\Index.cshtml"
                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                    handler: function() { createRecordWindow(store).show(); }
                }
            ],
            columns: [
                { xtype: 'rownumberer', width: 50 },
                {
                    header: 'Название группы компетенций',
                    dataIndex: 'Name',
                    width: 600,
                    cellWrap: true,
                    renderer: Urfu.renders.htmlEncode
                },
                {
                    xtype: 'actioncolumn',
                    resizable: false,
                    sortable: false,
                    hidden: '");
#nullable restore
#line 87 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\CompetenceGroups\Index.cshtml"
                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \'False\',\r\n                    width: 80,\r\n                    items: [\r\n                        {\r\n                            icon: \'");
#nullable restore
#line 91 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\CompetenceGroups\Index.cshtml"
                              Write(Url.Content("/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            tooltip: 'Редактировать',
                            iconCls: 'icon-padding',
                            handler: function(grid, rowIndex, colIndex,item,e,record) {
                                createRecordWindow(store, record).show();
                            }
                        }, {
                            icon: '");
#nullable restore
#line 98 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\CompetenceGroups\Index.cshtml"
                              Write(Url.Content("/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            tooltip: 'Удалить',
                            iconCls: 'icon-padding',
                            handler: function(grid, rowIndex, colIndex, item, e, record) {
                                
                                if (confirm('Вы действительно желаете удалить запись?')) {
                                    Ext.Ajax.request({
                                        method: 'GET',
                                        url: '");
#nullable restore
#line 106 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\CompetenceGroups\Index.cshtml"
                                         Write(Url.Action("Delete"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                        success: function(response) {
                                            store.load();
                                        },
                                        failure: function(d) {
                                            if (d.error)
                                                alert(d.error);
                                            console.error(d);
                                        },
                                        params: { id: record.get('Id') }
                                    });
                                }
                            }
                        }
                    ]
                }
            ]
        });
        d = null;
        var items = [
            gridPanel
        ];
      
        Urfu.createViewport('border', items);

        function createRecordWindow(store, record) {
            return Ext.create('Ext.window.Window',
            {
                tit");
                WriteLiteral(@"le: record ? 'Редактирование категории компетенций' : 'Добавление категории компетенций',
                resizable: false,
                autoHeight: true,
                width: 525,
                bodyPadding: 6,
                x: 100,
                y: 100,
                modal: true,
                name: 'editForm',
                viewModel: {
                    data: Ext.apply({}, record ? record.data : {})
                },
                items: {
                    xtype: 'form',
                    id: 'form',
                    layout: {
                        type: 'vbox',
                        //align: 'stretch'
                    },
                    defaults: {
                        xtype: 'textfield',
                        labelWidth: 160,
                        autoWidth: true,
                        width: 500
                    },
                    items: [
                        {
                            fieldLabel: 'Идентификатор',");
                WriteLiteral(@"
                            name: 'Id',
                            bind: '{Id}',
                            readOnly: true,
                            hidden: true,
                        },
                        {
                            xtype: 'textarea',
                            fieldLabel: 'Наименование',
                            maxLength: 400,
                            name: 'Name',
                            bind: '{Name}',
                            allowBlank: false,
                            editable: true
                        }
                    ]
                },

                buttons: [
                    {
                        text: ""OK"",
                        formBind: true,
                        handler: function() {
                            var window = this.up('window');
                            var form = window.down('form');
                            var data = form.getValues();
                            if (recor");
                WriteLiteral("d)\r\n                                data.Id = record.get(\'Id\');\r\n                            if (record || form.isValid()) {\r\n                                Ext.Ajax.request({\r\n                                    url: record ? \'");
#nullable restore
#line 191 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\CompetenceGroups\Index.cshtml"
                                              Write(Url.Action("Edit"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' : \'");
#nullable restore
#line 191 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\CompetenceGroups\Index.cshtml"
                                                                      Write(Url.Action("Create"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    success: function(response) {
                                        var d = Ext.JSON.decode(response.responseText);
                                        if (!d.success) {
                                            if (d.errors) {
                                                var basicForm = form.getForm();
                                                for (var key in d.errors) {
                                                    if (d.errors.hasOwnProperty(key)) {
                                                        var field = basicForm.findField(key);
                                                        if (field)
                                                            field.markInvalid(d.errors[key]);
                                                    }
                                                }
                                            }
                                            if (d.error) {
                          ");
                WriteLiteral(@"                      Ext.MessageBox.show({
                                                    title: 'Ошибка',
                                                    msg: d.error,
                                                    buttons: Ext.MessageBox.OK
                                                });
                                            }
                                        } else {
                                            window.close();
                                            store.load();
                                        }
                                    },
                                    failure: function(d) {
                                        if (d.error)
                                            alert(d.error);
                                        console.error(d);
                                    },
                                    jsonData: data
                                });
                            }
               ");
                WriteLiteral("         }\r\n                    }, {\r\n                        text: \"Отмена\",\r\n                        handler: function() { this.up(\'window\').close(); }\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n\r\n        });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
