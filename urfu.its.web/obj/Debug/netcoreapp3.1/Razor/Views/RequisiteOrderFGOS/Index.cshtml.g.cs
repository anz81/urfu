#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\RequisiteOrderFGOS\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "130705069d264cb6089409a052a386aca4435a86"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_RequisiteOrderFGOS_Index), @"mvc.1.0.view", @"/Views/RequisiteOrderFGOS/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"130705069d264cb6089409a052a386aca4435a86", @"/Views/RequisiteOrderFGOS/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_RequisiteOrderFGOS_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\RequisiteOrderFGOS\Index.cshtml"
  
    ViewBag.Title = "Справочник Реквизиты приказа";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        Ext.define('RequisiteOrder',
            {
                extend: 'Ext.data.Model',
                fields: [
                    { name: 'id', type: 'int' },
                    { name: 'directionId', type: 'string' },
                    { name: 'directionOkso', type: 'string' },
                    { name: 'directionName', type: 'string' },
                    { name: 'date', type: 'string' },
                    { name: 'order', type: 'string' }
                ]
            });

        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();

            var store = Ext.create(""Ext.data.Store"",
                {
                    model: 'RequisiteOrder',
                    autoLoad: true,
                    //pageSize: 300,
                    remoteSort: true,
                    remoteFilter: true,

                    proxy: {
                        type: 'ajax',
                        url: window.location.pat");
                WriteLiteral(@"hname,
                        reader: {
                            type: 'json'
                        }
                    }
                });
            var prevSettings = {};

            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""RequisiteOrderFGOSFilters"") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }

            var filtersWnd = null;

            var setFilters = function() {
                var settings = [
                    { property: 'directionOkso', value: filtersWnd.getComponent(""directionOkso"").getValue() },
                    { property: 'directionName', value: filtersWnd.getComponent(""directionName"").getValue() },
                ];");
                WriteLiteral(@"

                localStorage.setItem(""RequisiteOrderFGOSFilters"", JSON.stringify(settings));
                store.setFilters(settings);
                store.load();

            };


            filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Фильтры"",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: true,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 500
                    },
                    items: [
                        {
                            fieldLabel: ""ОКСО направления"",
                            itemId: ""directionOkso"",
                            value: prevSettings[""directionOkso""]
                        },
                        {
                            fieldLabel: ""Название направления"",
                            itemId: ""directionName"",
      ");
                WriteLiteral(@"                      value: prevSettings[""directionName""]
                        },
                    ],
                    buttons: [
                        {
                            text: ""OK"",
                            handler: function() {
                                setFilters();
                                filtersWnd.hide();
                            }
                        },
                        {
                            text: ""Отмена"",
                            handler: function() { filtersWnd.hide(); }
                        }
                    ]
                });

            setFilters();

            var gridPanel = null;

            gridPanel = Ext.create('Ext.grid.Panel',
                {
                    multiSelect: true,
                    region: 'center',
                    store: store,
                    loadMask: true,
                    columnLines: true,
                    tbar: [
                        {
");
                WriteLiteral(@"                            xtype: 'button',
                            text: 'Добавить',
                            handler: function() { createRecordWindow(store).show(); }
                        },
                        {
                            xtype: 'button',
                            text: 'Фильтры...',
                            handler: function() { filtersWnd.show(); }
                        },
                        {
                            xtype: 'button',
                            text: ""Отменить фильтры"",
                            handler: function() {
                                store.clearFilter();
                                store.load();
                                localStorage.setItem(""RequisiteOrderFGOSFilters"", ""{}"");

                            }
                        }
                    ],
                    columns: [
                        { xtype: 'rownumberer', width: 50 },
                        {
                   ");
                WriteLiteral(@"         header: 'Ид',
                            dataIndex: 'Id',
                            width: 100,
                            renderer: Urfu.renders.htmlEncode
                        },
                        {
                            header: 'ОКСО направления',
                            dataIndex: 'directionOkso',
                            width: 150,
                            renderer: Urfu.renders.htmlEncodeWithToolTip

                        },
                        {
                            header: 'ОКСО направления',
                            dataIndex: 'directionName',
                            width: 400,
                            renderer: Urfu.renders.htmlEncodeWithToolTip

                        },
                        {
                            header: 'Дата',
                            dataIndex: 'date',
                            width: 130,
                            renderer: Urfu.renders.htmlEncodeWithToolTip

             ");
                WriteLiteral(@"           },
                        {
                            header: '№ Приказа',
                            dataIndex: 'order',
                            width: 150,
                            renderer: Urfu.renders.htmlEncodeWithToolTip

                        },
                        {
                            xtype: 'actioncolumn',
                            resizable: false,
                            sortable: false,
                            width: 60,
                            items: [
                                {
                                    icon: '");
#nullable restore
#line 182 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\RequisiteOrderFGOS\Index.cshtml"
                                      Write(Url.Content("/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    tooltip: 'Редактировать',
                                    iconCls: 'icon-padding',
                                    handler: function(grid, rowIndex, colIndex, item, e, record) {
                                        createRecordWindow(store, record).show();
                                    }
                                }, {
                                    icon: '");
#nullable restore
#line 189 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\RequisiteOrderFGOS\Index.cshtml"
                                      Write(Url.Content("/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    tooltip: 'Удалить',
                                    handler: function(grid, rowIndex, colIndex, item, e, record) {

                                        if (confirm('Вы действительно желаете удалить запись?')) {
                                            Ext.Ajax.request({
                                                method: 'GET',
                                                url: '");
#nullable restore
#line 196 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\RequisiteOrderFGOS\Index.cshtml"
                                                 Write(Url.Action("Delete"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                                success: function(response) {
                                                    store.load();
                                                },
                                                failure: function(d) {
                                                    if (d.error)
                                                        alert(d.error);
                                                    console.error(d);
                                                },
                                                params: { id: record.get('Id') }
                                            });
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                });
            d = null;
            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', i");
                WriteLiteral(@"tems);

            function createRecordWindow(store, record) {
                return Ext.create('Ext.window.Window',
                    {
                        title: record
                            ? 'Редактирование Реквизиты приказа'
                            : 'Добавление Реквизиты приказа',
                        resizable: false,
                        autoHeight: true,

                        bodyPadding: 6,
                        modal: true,
                        name: 'editForm',
                        viewModel: {
                            data: Ext.apply({}, record ? record.data : {}),
                            stores: {
                                directions: {
                                    autoLoad: true,
                                    proxy: {
                                        type: 'ajax',
                                        url: '");
#nullable restore
#line 240 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\RequisiteOrderFGOS\Index.cshtml"
                                         Write(Url.Action("UserDirections", "EduResult"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                        reader: { type: 'json' }
                                    }
                                },
                            }
                        },
                        items: {
                            xtype: 'form',
                            id: 'form',
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            defaults: {
                                xtype: 'textfield',
                                labelWidth:
                                    190,
                                width:
                                    600
                            },
                            items: [
                                {
                                    fieldLabel: 'Идентификатор',
                                    name: 'id',
                                    bind: '{id}',
");
                WriteLiteral(@"                                    readOnly: true,
                                    hidden: true,
                                },
                                {
                                    xtype: 'combobox',
                                    name: 'directionId',
                                    fieldLabel: 'Направление',
                                    bind: {
                                        store: '{directions}',
                                        value: '{directionId}'
                                    },
                                    allowBlank: false,
                                    editable: true,
                                    queryMode: 'local',
                                    displayField: 'oksoAndTitle',
                                    valueField: 'id'
                                },
                                {
                                    xtype: 'datefield',
                                    fieldLa");
                WriteLiteral(@"bel: 'Дата',
                                    format: 'd.m.Y',
                                    value: record?record.data.date:'',
                                    name: 'date',
                                    bind: '{date}',
                                    allowBlank: false,
                                    editable: true,
                                },
                                {
                                    name: 'order',
                                    bind: '{order}',
                                    fieldLabel: '№ Приказа'
                                }
                            ]
                        },

                        buttons: [
                            {
                                text: ""OK"",
                                formBind: true,
                                handler: function() {
                                    var window = this.up('window');
                                    var form = windo");
                WriteLiteral(@"w.down('form');
                                    var data = form.getValues();
                                    if (record)
                                        data.id = record.get('id');
                                    if (record || form.isValid()) {
                                        Ext.Ajax.request({
                                            url: record ? '");
#nullable restore
#line 312 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\RequisiteOrderFGOS\Index.cshtml"
                                                      Write(Url.Action("Edit"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' : \'");
#nullable restore
#line 312 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\RequisiteOrderFGOS\Index.cshtml"
                                                                              Write(Url.Action("Create"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                            success: function(response) {
                                                var d = Ext.JSON.decode(response.responseText);
                                                if (!d.success) {
                                                    if (d.errors) {
                                                        var basicForm = form.getForm();
                                                        for (var key in d.errors) {
                                                            if (d.errors.hasOwnProperty(key)) {
                                                                var field = basicForm.findField(key);
                                                                if (field)
                                                                    field.markInvalid(d.errors[key]);
                                                            }
                                                        }
                                     ");
                WriteLiteral(@"               }
                                                } else {
                                                    window.close();
                                                    store.load();
                                                }
                                            },
                                            failure: function(d) {
                                                if (d.error)
                                                    alert(d.error);
                                                console.error(d);
                                            },
                                            jsonData: data
                                        });
                                    }
                                }
                            }, {
                                text: ""Отмена"",
                                handler: function() { this.up('window').close(); }
                            }
                      ");
                WriteLiteral("  ]\r\n                    });\r\n            }\r\n        });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
