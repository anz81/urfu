#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cd382f2d733bf27e0c8b222c961ffabd7e5ef298"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Variant_BasicContentEdit), @"mvc.1.0.view", @"/Views/Variant/BasicContentEdit.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
using Urfu.Its.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
using Urfu.Its.Web.DataContext;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cd382f2d733bf27e0c8b222c961ffabd7e5ef298", @"/Views/Variant/BasicContentEdit.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Variant_BasicContentEdit : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Urfu.Its.Web.Models.EditVariantVM>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 5 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
  

    Layout = "~/Views/Shared/_ExtLayout.cshtml";


#line default
#line hidden
#nullable disable
            WriteLiteral("<div id=\"variantProps\" style=\"display:none\">\r\n    <table class=\"table table-bordered\">\r\n        <thead>\r\n            <tr>\r\n                <th>\r\n                    ");
#nullable restore
#line 15 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
               Write(Html.DisplayNameFor(model => model.EduProgram));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </th>\r\n                <th>\r\n                    ");
#nullable restore
#line 18 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
               Write(Html.DisplayNameFor(model => model.qualification));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </th>\r\n                <th>\r\n                    ");
#nullable restore
#line 21 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
               Write(Html.DisplayNameFor(model => model.familirizationType));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </th>\r\n                <th>\r\n                    ");
#nullable restore
#line 24 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
               Write(Html.DisplayNameFor(model => model.familirizationCondition));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>\r\n                    ");
#nullable restore
#line 31 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
               Write(Html.DisplayFor(model => model.EduProgram));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
#nullable restore
#line 34 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
               Write(Html.DisplayFor(model => model.qualification));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
#nullable restore
#line 37 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
               Write(Html.DisplayFor(model => model.familirizationType));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
#nullable restore
#line 40 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
               Write(Html.DisplayFor(model => model.familirizationCondition));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script type=\"text/javascript\">\r\n        \r\n        var btnStatePrefix = \"btn-state-\";\r\n        var variantState = ");
#nullable restore
#line 52 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                       Write((int) Model.State);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var approved = ");
#nullable restore
#line 53 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                   Write((int) VariantState.Approved);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        function gettoken() {\r\n            var token = \'");
#nullable restore
#line 55 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                    Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
            token = $(token).val();
            return token;
        }

        function changeState(state) {

            if (state == variantState) return;
            Ext.Ajax.request({
                method: 'POST',
                url: '");
#nullable restore
#line 65 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                 Write(Url.Action("ChangeState","Variant",new {variantId = Model.VariantId}));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                params: {
                    state: state,
                    __RequestVerificationToken: gettoken()
                },
                success: function (response) {
                    var data = Ext.decode(response.responseText);
                    if (data.result) {
                        //window.location.reload();
                        $('#' + btnStatePrefix + variantState).removeClass('btn-primary');
                        $('#' + btnStatePrefix + state).addClass('btn-primary');
                        variantState = state;
                    }
                    else {
                        Ext.MessageBox.alert('Ошибка',
                            data.message,
                            function () {
                                //action to complete when user clicks ok.
                            });
                    }
                },
                error: function (response) {
                    Ext.MessageBox.alert('Ошибка',
       ");
                WriteLiteral(@"                 ""Не удалось сменить состояние документа, недостаточно прав"",
                        function () {
                            //action to complete when user clicks ok.
                        });
                }
            });
        };

        Ext.onReady(function () {
            Ext.Ajax.timeout = 60000
            Ext.tip.QuickTipManager.init();
            var html = $('#variantProps').html();

            var plainPanel = Ext.create('Ext.Panel',
            {
                padding: '5px',
                border: false,
                html: html
            });

            var formPanel = Ext.create('Ext.form.Panel',
            {
                title: 'Параметры ");
#nullable restore
#line 110 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                              Write(Model.IsBase ? "версии ОП" : "траектории");

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                collapsible: true,
                padding: '5px',
                //border: true,
                frame: true,
                defaults: {
                    width: 500,
                    cls: 'field-margin'
                },
                items: [
                    {
                        xtype: 'hidden',
                        name: '__RequestVerificationToken',
                        value: gettoken()
                    },
                    {
                        xtype: 'hidden',
                        name: 'VariantId',
                        value: '");
#nullable restore
#line 128 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                           Write(Model.VariantId);

#line default
#line hidden
#nullable disable
                WriteLiteral("\'\r\n                    },\r\n                    {\r\n                        xtype: \'textfield\',\r\n                        fieldLabel: \'");
#nullable restore
#line 132 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                Write(Html.DisplayNameFor(m=>m.Name));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        name: \'Name\',\r\n                        cls: \'field-margin\',\r\n                        value: \'");
#nullable restore
#line 135 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                           Write(Model.Name);

#line default
#line hidden
#nullable disable
                WriteLiteral("\'\r\n                    }, {\r\n                        xtype: \'numberfield\',\r\n                        fieldLabel: \'");
#nullable restore
#line 138 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                Write(Html.DisplayNameFor(m => m.StudentsLimit));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        name: \'StudentsLimit\',\r\n                        cls: \'field-margin\',\r\n                        hideTrigger: true,\r\n                        minValue: 0,\r\n                        value: \'");
#nullable restore
#line 143 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                           Write(Model.StudentsLimit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\'\r\n                    }, {\r\n                        xtype: \'numberfield\',\r\n                        fieldLabel: \'");
#nullable restore
#line 146 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                Write(Html.DisplayNameFor(m => m.Year));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        name: \'Year\',\r\n                        hideTrigger: true,\r\n                        cls: \'field-margin\',\r\n                        minValue: 2014,\r\n                        value: \'");
#nullable restore
#line 151 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                           Write(Model.Year);

#line default
#line hidden
#nullable disable
                WriteLiteral("\'\r\n                    }, {\r\n                        xtype: \'datefield\',\r\n                        fieldLabel: \'");
#nullable restore
#line 154 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                Write(Html.DisplayNameFor(m => m.SelectionDeadline));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        name: \'SelectionDeadline\',\r\n                        cls: \'field-margin\',\r\n                        value: \'");
#nullable restore
#line 157 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                           Write(String.Format("{0:dd.MM.yy}",Model.SelectionDeadline));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"'
                    }
                ],
                buttons: [
                    {
                        text: 'Сохранить',
                        handler: function () {
                            formPanel.getForm()
                                .submit({
                                    url: '");
#nullable restore
#line 166 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                     Write(Url.Action("BasicContentEdit"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    success: function (form, action) {
                                        Ext.MessageBox.alert('Параметры сохранены. ');
                                    },
                                    failure: function (form, action) {
                                        Ext.MessageBox.alert('Параметры не сохранены. ', action.result.message);
                                    }
                                });
                        }
                    }
                ]
            });
            //var fields = [
            //    ""Id"", ""GroupName"", ""GroupType"", ""SemestersTestUnits"", ""TestUnits"", ""WithGroupSelection"",
            //    ""WithoutGroupSelection""
            //];
            var groupsStore = Ext.create(""Ext.data.Store"",
            {

                //fields: fields,

                autoLoad: true,
                //idProperty: 'id',
                proxy: {
                    type: 'ajax',
                    url: '");
#nullable restore
#line 191 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                     Write(Url.Action("GetGroupsForVariant",new {variantId = Model.VariantId}));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                    },
                    timeout: 60000
                },
                //autosync: true
            });


            function totalSemesters(semIndex) {
                var sum = 0;
                groupsStore.each(function (record) {
                    if (record.data.GeneralGroup)
                        sum += record.data.SemestersTestUnits[semIndex];
                });
                return sum;
            }

            var groupsGridPanel = Ext.create('Ext.grid.Panel',
            {
                title: ""Группы УП"",
                collapsible: true,
                region: 'center',
                store: groupsStore,
                height: 350,
                frame: true,
                padding: '5px',
                loadMask: true,
                columnLines: true,
         ");
                WriteLiteral(@"       features: [{
                    ftype: 'summary',
                    dock: 'bottom'
                }],
                plugins: [
                    Ext.create('Ext.grid.plugin.CellEditing', {
                        clicksToEdit: 1,
                        listeners: {
                            'beforeedit': function (e, editor) {
                                return variantState != approved;
                            }
                        }
                    })],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        dataIndex: 'Id',
                        hidden: true
                    },
                    {
                        header: 'Группа',
                        dataIndex: 'GroupName',
                        width: 400,
                        cellWrap: true,
                        summaryType: function (records) {
                            return ""Итого"";
        ");
                WriteLiteral(@"                },
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Зачётные единицы в группе (план)',
                        dataIndex: 'TestUnits',
                        width: 150,
                        renderer: Ext.util.Format.htmlEncode,
                        summaryType: function (records) {
                            var sum = 0;
                            groupsStore.each(function (record) {
                                if (record.data.GeneralGroup)
                                    sum += record.data.TestUnits;
                            });
                            return sum;
                        },
                        editor: {
                            xtype: 'numberfield',
                            hideTrigger: true,
                            allowBlank: false,
                            minValue: 0
                        }
                    },
    ");
                WriteLiteral(@"                {
                        header: 'Зачётные единицы в группе (факт)',
                        width: 150,
                        renderer: Ext.util.Format.htmlEncode,
                        renderer: function (value, meta, record) {
                            var sum = 0;
                            for (var i = 0; i <= 7; i++) {
                                sum = sum + record.data.SemestersTestUnits[i];
                            }
                            return sum;
                        },
                        summaryType: function (records) {
                            var sum = 0;
                            for(var i = 0; i <= 7; i++)
                            {
                                sum = sum + totalSemesters(i);
                            }
                            return sum;
                        }
                    },
                    {
                        header: 'Семестр 1',
                        //dataIndex: 'Sem");
                WriteLiteral(@"estersTestUnits',
                        width: 110,
                        renderer: function (value, meta, record) {
                            return record.data.SemestersTestUnits[0];
                        },
                        summaryType: function (records) {
                            return totalSemesters(0);
                        }
                    },
                    {
                        header: 'Семестр 2',
                        //dataIndex: 'SemestersTestUnits',
                        width: 110,
                        renderer: function (value, meta, record) {
                            return record.data.SemestersTestUnits[1];
                        },
                        summaryType: function (records) {
                            return totalSemesters(1);
                        }
                    },
                    {
                        header: 'Семестр 3',
                        //dataIndex: 'SemestersTestUnits',
         ");
                WriteLiteral(@"               width: 110,
                        renderer: function (value, meta, record) {
                            return record.data.SemestersTestUnits[2];
                        },
                        summaryType: function (records) {
                            return totalSemesters(2);
                        }
                    },
                    {
                        header: 'Семестр 4',
                        dataIndex: 'SemestersTestUnits',
                        width: 110,
                        renderer: function (value, meta, record) {
                            return record.data.SemestersTestUnits[3];
                        },
                        summaryType: function (records) {
                            return totalSemesters(3);
                        }
                    },
                    {
                        header: 'Семестр 5',
                        //dataIndex: 'SemestersTestUnits',
                        width: 110,
  ");
                WriteLiteral(@"                      renderer: function (value, meta, record) {
                            return record.data.SemestersTestUnits[4];
                        },
                        summaryType: function (records) {
                            return totalSemesters(4);
                        }
                    },
                    {
                        header: 'Семестр 6',
                        //dataIndex: 'SemestersTestUnits',
                        width: 110,
                        renderer: function (value, meta, record) {
                            return record.data.SemestersTestUnits[5];
                        },
                        summaryType: function (records) {
                            return totalSemesters(5);
                        }
                    },
                    {
                        header: 'Семестр 7',
                        //dataIndex: 'SemestersTestUnits',
                        width: 110,
                        render");
                WriteLiteral(@"er: function (value, meta, record) {
                            return record.data.SemestersTestUnits[6];
                        },
                        summaryType: function (records) {
                            return totalSemesters(6);
                        }
                    },
                    {
                        header: 'Семестр 8',
                        //dataIndex: 'SemestersTestUnits',
                        width: 110,
                        renderer: function (value, meta, record) {
                            return record.data.SemestersTestUnits[7];
                        },
                        summaryType: function (records) {
                            return totalSemesters(7);
                        }
                    }

                ]

            });
            groupsGridPanel.on('edit',
                function (editor, eValue) {
                    var record = eValue.record;
                    Ext.Ajax.request({
           ");
                WriteLiteral("             url: \'");
#nullable restore
#line 388 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                         Write(Url.Action("SetVariantGroupTestUnits"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                        params: {
                            groupId: record.data.Id,
                            testUnits: eValue.value,
                            __RequestVerificationToken: gettoken()
                        },
                        success: function (response) {
                            var data = Ext.decode(response.responseText);

                            if (data.message && data.message.length > 0) {
                                Ext.MessageBox.alert('Ошибка',
                                    data.message,
                                    function () {
                                        //action to complete when user clicks ok.
                                    });
                                record.reject();
                            }
                            record.commit();
                            //gridPanel.getView().refresh();
                        },
                        error: function (response) {
           ");
                WriteLiteral(@"                 record.reject();
                        }
                    });

                    // commit the changes right after editing finished
                    //e.grid.store.save();

                });


            var modulesStore = Ext.create(""Ext.data.Store"",
            {

                //fields: fields,

                autoLoad: true,
                //idProperty: 'id',
                proxy: {
                    type: 'ajax',
                    url: '");
#nullable restore
#line 428 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                     Write(Url.Action("GetVariantContentRows",new {variantId = Model.VariantId}));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                    },
                    timeout: 120000


                },
                //autosync: true
            });
            var variantSelectionGroups = ");
#nullable restore
#line 440 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                    Write(Html.Raw(Json.Serialize(@ViewBag.VariantSelectionGroups)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n            var programVariantSelectionGroups = ");
#nullable restore
#line 441 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                           Write(Html.Raw(Json.Serialize(@ViewBag.ProgramVariantSelectionGroups)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n\r\n            var moduleTypes = ");
#nullable restore
#line 443 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                         Write(Html.Raw(Json.Serialize(@ViewBag.ModuleTypes)));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n            var groupTypes = {};//\'");
#nullable restore
#line 444 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                               Write(Html.Raw(Json.Serialize(EnumHelper<VariantGroupType>.GetDisplayValuesDict())));

#line default
#line hidden
#nullable disable
                WriteLiteral("\';\r\n");
#nullable restore
#line 445 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
              
                foreach (var keyValuePair in EnumHelper<VariantGroupType>.GetDisplayValuesDict())
                {
                    

#line default
#line hidden
#nullable disable
                WriteLiteral("groupTypes[\"");
#nullable restore
#line 448 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                  Write((int)keyValuePair.Key);

#line default
#line hidden
#nullable disable
                WriteLiteral("\"] = \'");
#nullable restore
#line 448 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                               Write(keyValuePair.Value);

#line default
#line hidden
#nullable disable
                WriteLiteral("\';");
#nullable restore
#line 448 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                                                                
                }
            

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
            var comboModuleTypes = new Ext.form.ComboBox({
                store: Ext.create('Ext.data.Store', {
                    fields:
                    [
                        { type: 'string', name: 'Id' },
                        { type: 'string', name: 'Name' }
                    ],
                    data: moduleTypes
                }),
                valueField: ""Id"",
                displayField: ""Name"",
                editable: false
            });
            var comboSelectionGroups = new Ext.form.ComboBox({
                store: Ext.create('Ext.data.Store',
                {
                    fields:
                    [
                        { type: 'string', name: 'Id' },
                        { type: 'string', name: 'Name' }
                    ],
                    data: variantSelectionGroups
                }),
                valueField: ""Id"",
                displayField: ""Name"",
                editable: false,
                listeners:");
                WriteLiteral(@"{}
            });

            var comboBoxRenderer = function(combo,fieldName) {
                return function(value,meta,record) {
                    var idx = combo.store.find(combo.valueField, value);
                    var rec = combo.store.getAt(idx);
                    //if (record && record.data.Base) return ""В основной"";
                    if (fieldName === 'ModuleTypeId')
                        return (rec === null ? '' : rec.get(combo.displayField) );
                    return Urfu.renders.htmlEncodeWithToolTip((rec === null ? '' : rec.get(combo.displayField) ),meta);
                };
            }


            var modulesGridPanel = Ext.create('Ext.grid.Panel',
            {
                title: ""Модули"",
                collapsible: true,
                region: 'center',
                store: modulesStore,
                height: 700,
                frame: true,
                padding: '5px',
                loadMask: true,
                columnLines: t");
                WriteLiteral(@"rue,
                features: [
                    {
                        ftype: 'summary',
                        dock: 'bottom'
                    }
                ],
                viewConfig: {
                    //getRowClass: function(record) {
                    //    return record.get('Base')
                    //        ? 'row-disabled'
                    //        : '';
                    //}

                },
                plugins: [
                    Ext.create('Ext.grid.plugin.CellEditing', {
                        clicksToEdit: 2,
                        listeners: {
                            'beforeedit': function (e, editor) {
                                if (variantState == approved) return false;
                                if (editor.record.get(""Base"")) return false;

                                if (editor.field == ""Selected"" || editor.field == ""Selectable"") {
                                    editor.record.set(editor.field, !edito");
                WriteLiteral(@"r.record.get(editor.field));
                                    updateModule(editor.field,editor.record);
                                    return false;
                                }


                                if (editor.field == ""SelectionGroupId"") {
                                    if (editor.record.data.Base)
                                        comboSelectionGroups.getStore()
                                            .loadData(programVariantSelectionGroups);
                                    else comboSelectionGroups.getStore().loadData( variantSelectionGroups );

                                }
                            },
                            'edit': function (e,editor) {
                                if (editor.originalValue) if (editor.originalValue.toString() == editor.value) {
                                    editor.record.reject(); return;
                                }
                                updateModule(editor.field, editor.re");
                WriteLiteral(@"cord);

                                //this.isEditAllowed = false;
                            }
                        }
                    })
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        dataIndex: 'VariantId',
                        hidden: true
                    },
                    {
                        dataIndex: 'VariantContentId',
                        hidden: true
                    },
                    {
                        //xtype: 'textcolumn',
                        header: '");
#nullable restore
#line 564 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                             Write(Model.IsBase?"Включить модуль в основную траекторию":"Включить модуль в траекторию");

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                        dataIndex: 'Selected',
                        width: 150,
                        editor: {
                            xtype: 'textfield',
                        },
                        renderer: function(value, meta, record) {
                            return Urfu.renders.htmlEncodeWithToolTip(record.get(""Base"") ? ""В основной"" : value ? ""Да"" : ""Нет"",meta);
                        }
                    },
                    {
                        header: 'Название модуля',
                        dataIndex: 'ModuleName',
                        width: 300,
                        renderer: function (value,meta,record) {
                            meta.tdAttr = 'data-qtip=""' + Ext.String.htmlEncode(value) + '""';
                            return '<a href=""");
#nullable restore
#line 580 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                        Write(Url.Action("Plans","Variant",new {variantId=Model.VariantId}));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"&moduleId=' +
                                record.get('ModuleId') + '"">' + value + '</a>';
                        }
                    },
                    {
                        header: 'Зачётные единицы',
                        dataIndex: 'TestUnits',
                        width: 110,
                        renderer: Urfu.renders.htmlEncodeWithToolTip,
                    },
                    {
                        header: 'Группа модуля',
                        dataIndex: 'GroupType',
                        width: 300,
                        renderer: function(value,metaData) {
                            return Urfu.renders.htmlEncodeWithToolTip(groupTypes[value],metaData);

                        }
                    },
                    {

                        header: 'Тип модуля',
                        dataIndex: 'ModuleTypeId',
                        width: 300,
                        //renderer: Ext.util.Format.htmlEncode,
                    ");
                WriteLiteral(@"    editor: comboModuleTypes,
                        renderer: comboBoxRenderer(comboModuleTypes,'ModuleTypeId')
                    },
                    {
                        header: ""Признак 'По выбору'"",
                        dataIndex: 'Selectable',
                        width: 150,
                        editor: {
                            xtype: 'textfield',
                        },
                        renderer: function(value, meta, record) {
                            return Urfu.renders.htmlEncodeWithToolTip(value ? ""Да"" : ""Нет"",meta);
                        }
                    },
                    {
                        header: ""Лимит"",
                        dataIndex: 'Limits',
                        width: 100,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: ""Семестры"",
                        dataIndex: 'Terms',
                        width: 100");
                WriteLiteral(@",
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: ""Группа выбора"",
                        dataIndex: 'SelectionGroupId',
                        width: 200,
                        //renderer: Ext.util.Format.htmlEncode
                        editor: comboSelectionGroups,
                        renderer: comboBoxRenderer(comboSelectionGroups)
                    },
                    {
                        header: ""Учебные планы"",
                        dataIndex: 'PlanInfo',
                        width: 150,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },

                ]
            });
            //TODO: Надо доделать
            function updateModule(propName,record) {
                modulesGridPanel.setLoading('Сохранение');
                var data = {
                    moduleId: record.data.ModuleId,
                    va");
                WriteLiteral("riantId: \'");
#nullable restore
#line 653 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                           Write(Model.VariantId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    groupType: record.get('RealGroupType'),
                    subgroupType: record.get('SubgroupType'),
                    moduleTypeId: record.get('ModuleTypeId'),
                    __RequestVerificationToken: gettoken()
                };
                data[propName] = record.get(propName);
                
                Ext.Ajax.request({
                    url: '");
#nullable restore
#line 662 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                     Write(Url.Action("SetVariantModuleParams"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    params: data,
                    success: function (response) {
                        var data = Ext.decode(response.responseText);

                        if (data.message && data.message.length > 0) {
                            Ext.MessageBox.alert('Ошибка',
                                data.message,
                                function () {
                                    //action to complete when user clicks ok.
                                });
                            record.reject();
                        }
                        else{
                            record.commit();
                            if (propName == ""Selected"") groupsStore.reload();
                        }
                        modulesGridPanel.setLoading(false);
                        //gridPanel.getView().refresh();
                    },
                    failure: function(response) {
                        record.reject();
                        mo");
                WriteLiteral(@"dulesGridPanel.setLoading(false);
                    },
                    error: function (response) {
                        record.reject();
                        modulesGridPanel.setLoading(false);
                    }
                });
            }

            var items = [plainPanel,
                formPanel, groupsGridPanel,modulesGridPanel
            ];
            var tbars = [
                {
                    xtype: 'box',
                    autoEl: {
                        tag: 'a',
                        href: '");
#nullable restore
#line 701 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                          Write(Url.Action("Index","EduProgramLimits",new {variantId = Model.VariantId}));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        html: \'Лимиты\'\r\n                    }\r\n                },\r\n                {\r\n                    xtype: \'box\',\r\n                    autoEl: {\r\n                        tag: \'a\',\r\n                        href: \'");
#nullable restore
#line 709 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                          Write(Url.Action("Index","VariantSelectionGroup",new {variantId = Model.VariantId}));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                        html: 'Управление группами выбора'
                    }
                },
                {
                    xtype: 'box',
                    autoEl: {
                        tag: 'a',
                        href: '");
#nullable restore
#line 717 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                          Write(Url.Action("Index","VariantContents",new {variantId = Model.VariantId}));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        html: \'Редактирование модулей\'\r\n                    }\r\n                },\r\n                {\r\n                    xtype: \'box\',\r\n                    autoEl: {\r\n                        tag: \'a\',\r\n                        href: \'");
#nullable restore
#line 725 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                          Write(Url.Action("Download",new {variantId = Model.VariantId}));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        html: \'Открыть в Excel\'\r\n                    }\r\n                },\r\n                \'-\',\r\n                {\r\n                    xtype: \'box\',\r\n                    //disabled: \'");
#nullable restore
#line 732 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                             Write(Model.State == VariantState.Development);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \"True\", // \r\n                    autoEl: {\r\n                        html:\'<button id = \"\' + btnStatePrefix + \'");
#nullable restore
#line 734 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                              Write((int) VariantState.Development);

#line default
#line hidden
#nullable disable
                WriteLiteral("\"  onclick=\"return changeState(");
#nullable restore
#line 734 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                                                                                              Write((int) VariantState.Development);

#line default
#line hidden
#nullable disable
                WriteLiteral(")\" class=\"btn");
#nullable restore
#line 734 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                                                                                                                                            Write(Model.State == VariantState.Development ? " btn-primary" : "");

#line default
#line hidden
#nullable disable
                WriteLiteral("\" \" >Формируется</button>\'\r\n                    },\r\n");
                WriteLiteral("                },\r\n                {\r\n                    xtype: \'box\',\r\n                    //disabled: \'");
#nullable restore
#line 742 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                             Write(Model.State == VariantState.Review);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \"True\",\r\n                    autoEl: {\r\n                        html:\'<button id = \"\' + btnStatePrefix + \'");
#nullable restore
#line 744 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                              Write((int) VariantState.Review);

#line default
#line hidden
#nullable disable
                WriteLiteral(" \" onclick=\"return changeState(");
#nullable restore
#line 744 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                                                                                         Write((int) VariantState.Review);

#line default
#line hidden
#nullable disable
                WriteLiteral(")\" class=\"btn");
#nullable restore
#line 744 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                                                                                                                                  Write(Model.State == VariantState.Review ? " btn-primary" : "");

#line default
#line hidden
#nullable disable
                WriteLiteral("\" \">На согласовании</button>\'\r\n                    },\r\n");
                WriteLiteral("                },\r\n                {\r\n                    xtype: \'box\',\r\n                    //disabled: \'");
#nullable restore
#line 752 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                             Write(Model.State == VariantState.Approved);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \"True\",\r\n                    autoEl: {\r\n                        html:\'<button id = \"\' + btnStatePrefix + \'");
#nullable restore
#line 754 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                              Write((int) VariantState.Approved);

#line default
#line hidden
#nullable disable
                WriteLiteral("\"  onclick=\"return changeState(");
#nullable restore
#line 754 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                                                                                           Write((int) VariantState.Approved);

#line default
#line hidden
#nullable disable
                WriteLiteral(")\" class=\"btn");
#nullable restore
#line 754 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Variant\BasicContentEdit.cshtml"
                                                                                                                                                                      Write(Model.State == VariantState.Approved ? " btn-primary" : "");

#line default
#line hidden
#nullable disable
                WriteLiteral("\" \">Утверждена</button>\'\r\n                    },\r\n");
                WriteLiteral(@"                }


            ];
            var settings = {
                tbar: tbars,
                //autoscroll: true
                overflowY: 'scroll'
            }
            Urfu.createViewport('anchor', items, settings);
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Urfu.Its.Web.Models.EditVariantVM> Html { get; private set; }
    }
}
#pragma warning restore 1591
