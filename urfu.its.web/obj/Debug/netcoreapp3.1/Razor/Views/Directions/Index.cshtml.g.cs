#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Directions\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "32a3d658f38b607b57a276de3ab8ae0094e7ba02"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Directions_Index), @"mvc.1.0.view", @"/Views/Directions/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"32a3d658f38b607b57a276de3ab8ae0094e7ba02", @"/Views/Directions/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Directions_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Directions\Index.cshtml"
  
    ViewBag.Title = "Направления";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        Ext.onReady(function () {
            var directions = Ext.create(""Ext.data.Store"",
                {
                    fields: [""id"", ""okso"", ""title""],
                    autoLoad: true,
                    pageSize: false,
                    proxy: {
                        type: 'ajax',
                        url: '/Directions/Index',
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });


            var tpl = '<a href=""/Directions/Edit?id={id}"">Изменить</a> | <a href=""/Directions/Details?id={id}"">Просмотреть</a>\
                | <a href=""/Directions/Delete?id={id}"">Удалить</a> | <a href=""/Sync/SyncDirection?directionId={id}"">Синхронизация</a>';

            function funSearch() {
                directions.clearFilter();
                dire");
                WriteLiteral(@"ctions.filterBy(function (record) {
                    var searchTxt = Ext.getCmp(""txtSearch"").getValue().toUpperCase();
                    return record.get(""okso"").toUpperCase().indexOf(searchTxt) > -1 || record.get(""title"").toUpperCase().indexOf(searchTxt) > -1 || record.get(""ministerialCode"").toUpperCase().indexOf(searchTxt) > -1 ||
                        record.get(""ugnTitle"").toUpperCase().indexOf(searchTxt) > -1 || record.get(""standard"").toUpperCase().indexOf(searchTxt) > -1 || record.get(""qualifications"").toUpperCase().indexOf(searchTxt) > -1
                });
            }

            var gridPanel = Ext.create('Ext.grid.Panel',
                {
                    region: 'center',
                    store: directions,
                    loadMask: true,
                    tbar: [
                        {
                            xtype: 'box',
                            autoEl: { tag: 'a', href: '/Directions/Create', html: 'Создать направление' }
                       ");
                WriteLiteral(@" },
                        '-',
                        {
                            xtype: ""label"",
                            text: ""Поиск""
                        },
                        {
                            id: 'txtSearch',
                            xtype: 'textfield',
                            width: 200,
                            listeners: {
                                'specialkey': function (cmp, event) {
                                    if (event.getKey() == event.ENTER) {
                                        funSearch();
                                    }
                                }
                            }
                        },
                        {
                            id: ""btnSearch"",
                            text: ""Найти"",
                            handler: funSearch
                        },
                        {
                            text: ""Очистить фильтр"",
                            handler");
                WriteLiteral(@": function () {
                                Ext.getCmp(""txtSearch"").setValue("""");
                                directions.clearFilter();
                            }
                        }
                    ],
                    columns: [
                        { xtype: 'rownumberer', width: 50 },
                        {
                            header: 'ОКСО',
                            dataIndex: 'okso',
                            width: 100,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Название направления',
                            dataIndex: 'title',
                            width: 500,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Код',
                            dataIndex: 'ministerialCode',
                            width: 100,
   ");
                WriteLiteral(@"                         renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'УГН',
                            dataIndex: 'ugnTitle',
                            width: 500,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Стандарт',
                            dataIndex: 'standard',
                            width: 100,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Квалификация',
                            dataIndex: 'qualifications',
                            width: 250,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: ""Ссылки"",
                            xtype: 'templatecolumn',
           ");
                WriteLiteral(@"                 tpl: tpl,
                            width: 400
                        }
                    ]
                });

            var items = [
                gridPanel
            ];
            window.directions = directions;

            Urfu.createViewport('border', items);
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
