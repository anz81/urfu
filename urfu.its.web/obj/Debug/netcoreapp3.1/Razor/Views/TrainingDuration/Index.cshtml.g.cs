#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f5af12d83a3517b1591e32ec0f94eee34295a5fb"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TrainingDuration_Index), @"mvc.1.0.view", @"/Views/TrainingDuration/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f5af12d83a3517b1591e32ec0f94eee34295a5fb", @"/Views/TrainingDuration/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_TrainingDuration_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
  
    ViewBag.Title = "Справочник Сроки обучения";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    .no-padding .x-grid-cell-inner {
        padding: 0
    }

    .x-form-item-default.x-item-disabled {
        filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
        opacity: 1;
    }

    .x-item-disabled,
    .x-item-disabled * {
        cursor: default;
        pointer-events: none;
        color: rgb(90,90,97)
    }
</style>

");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        Ext.onReady(function () {
            Ext.tip.QuickTipManager.init();
            var filterName = ""TrainingDurationsFilters"";

            var numbersTest = /^([0-9]+)([.,]?)([0-9]*)$/;
            Ext.apply(Ext.form.field.VTypes, {
                numbers: function (val, field) {
                    return numbersTest.test(val);
                },
                numbersText: 'Срок обучения должен быть числом'
            });

            function isEmptyString(str) {
                return str == null || str.trim() == '';
            }

            function parseJson(json) {
                var data = JSON.parse(json.replace(/&quot;/g, '""'));
                return data;
            }

            var dataDivisions = parseJson('");
#nullable restore
#line 48 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                      Write(ViewBag.Divisions);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n            var dataFamilirizationTypes = parseJson(\'");
#nullable restore
#line 49 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                                Write(ViewBag.FamilirizationTypes);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"');

            var divisionStore = Ext.create(""Ext.data.Store"",
                {
                    data: dataDivisions
                });
            var directionStore = Ext.create(""Ext.data.Store"", {});
            var standardStore = Ext.create(""Ext.data.Store"", {});

            var store = Ext.create(""Ext.data.BufferedStore"",
                {
                    autoLoad: true,
                    remoteSort: true,
                    remoteFilter: true,
                    pageSize: 300,
                    proxy: {
                        type: 'ajax',
                        url: window.location.pathname,
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });

            var prevSettings = {};

            var filterDivisionValue;
            var filterDirectionValue;
         ");
                WriteLiteral(@"   var filterStandardValue;

            try {
                var prevSettingString = JSON.parse(localStorage.getItem(filterName) || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
                store.setFilters(prevSettingString);
                store.load();
                if (!isEmptyString(prevSettings[""divisionUuid""])) {
                    var currentDivisionData = divisionStore.data.items.filter(d => d.data.Id == prevSettings[""divisionUuid""])[0].data;
                    directionStore.setData(currentDivisionData.Directions);
                    filterDivisionValue = prevSettings[""divisionUuid""];
                }
                if (prevSettings[""directionUid""].length != 0) {
                    var currentDirectionData = directionStore.data.items.filter(d => prevSettings == d.data.Ids || d.data.Ids.includes(prevSettings[""directionUid""]");
                WriteLiteral(@"[0]))[0].data;
                    filterStandardValue = prevSettings[""directionUid""];
                    filterDirectionValue = currentDirectionData.Ids;
                    standardStore.setData(currentDirectionData.standards);
                }
            } catch (err) {

            }

            var filtersWnd = null;

            var setFilters = function () {
                var filterDirectionUid = [];
                if (isEmptyString(filtersWnd.getComponent(""standard"").getValue())) {
                    filterDirectionUid = filtersWnd.getComponent(""directionUid"").getValue();
                }
                else {
                    filterDirectionUid.push(filtersWnd.getComponent(""standard"").getValue());
                }
                var settings = [
                    { property: 'divisionUuid', value: filtersWnd.getComponent(""divisionUuid"").getValue() },
                    { property: 'directionUid', value: filterDirectionUid }
                ];

               ");
                WriteLiteral(@" localStorage.setItem(filterName, JSON.stringify(settings));
                store.setFilters(settings);
                store.load();

            };

            filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Фильтры"",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: true,
                    x: 100,
                    y: 100,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 650,
                        labelWidth: 120
                    },
                    items: [
                        {
                            fieldLabel: ""Институт/ Департамент"",
                            itemId: ""divisionUuid"",
                            value: filterDivisionValue,
                            xtype: ""combobox"",
                            store: divisionStore,
                       ");
                WriteLiteral(@"     valueField: 'Id',
                            displayField: 'Name',
                            queryMode: 'local',
                            anyMatch: true,
                            width: 550,
                            listeners: {
                                change: function (t, newValue, oldValue, eOpts) {
                                    filtersWnd.items.items.find(p => p.itemId == ""directionUid"").setValue('');
                                    filtersWnd.items.items.find(p => p.itemId == ""standard"").setValue('');

                                    var currentDivisionData = divisionStore.data.items.filter(d => d.data.Id == newValue)[0].data;
                                    directionStore.setData(currentDivisionData.Directions);

                                }
                            }
                        },
                        {
                            fieldLabel: ""Направление"",
                            itemId: ""directionUid"",
          ");
                WriteLiteral(@"                  value: filterDirectionValue,
                            xtype: ""combobox"",
                            store: directionStore,
                            valueField: 'Ids',
                            displayField: 'OksoAndTitle',
                            queryMode: 'local',
                            anyMatch: true,
                            width: 550,
                            listeners: {
                                change: function (t, newValue, oldValue, eOpts) {
                                    if (newValue != null && newValue.length != 0) {
                                        filtersWnd.items.items.find(p => p.itemId == ""standard"").setValue('');

                                        var currentDirectionData = directionStore.data.items.filter(d => d.data.Ids == newValue || d.data.Ids.includes(newValue))[0].data;
                                        standardStore.setData(currentDirectionData.standards);
                                    }
   ");
                WriteLiteral(@"                             }
                            }
                        },
                        {
                            xtype: 'combobox',
                            fieldLabel: 'Стандарт ВПО',
                            itemId: ""standard"",
                            store: standardStore,
                            value: filterStandardValue,
                            queryMode: 'local',
                            displayField: 'standard',
                            valueField: 'directionUid',
                            anyMatch: true,
                            width: 300
                        },
                    ],
                    buttons: [
                        {
                            text: ""OK"",
                            handler: function () {
                                setFilters();
                                filtersWnd.hide();
                            }
                        },
                        {
         ");
                WriteLiteral(@"                   text: ""Отмена"",
                            handler: function () { filtersWnd.hide(); }
                        }
                    ]
                });

            function createAddWindow(id, record) {
                return Ext.create('Ext.window.Window',
                    {
                        title: ""Срок обучения"",
                        closeAction: 'hide',
                        overflowY: 'auto',
                        resizable: true,
                        x: 100,
                        y: 100,
                        autoHeight: true,
                        width: 650,
                        modal: true,
                        bodyPadding: 6,
                        rowHeight: 100,
                        defaults: {
                            labelWidth: 130
                        },
                        viewModel: {
                            data: Ext.apply({}, record ? record.data : {}),
                            stores: {
");
                WriteLiteral(@"                                divisions: {
                                    data: dataDivisions
                                },
                                directions: {},
                                standards: {},
                                qualifications: {},
                                familirizationTypes: {
                                    data: dataFamilirizationTypes
                                }
                            }
                        },
                        items: {
                            xtype: 'form',
                            defaults: {
                                labelWidth: 130
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    fieldLabel: 'Институт/ Департамент',
                                    name: 'DivisionUuid',
                                    bind: {
           ");
                WriteLiteral(@"                             store: '{divisions}',
                                        value: '{divisionUuid}'
                                    },
                                    allowBlank: false,
                                    editable: true,
                                    queryMode: 'local',
                                    displayField: 'Name',
                                    valueField: 'Id',
                                    anyMatch: true,
                                    width: 600,
                                    listeners: {
                                        change: function () {
                                            var form = this.up('window').down('form');

                                            var divisionsStore = this.lookupViewModel().getStore('divisions');
                                            var directionsStore = this.lookupViewModel().getStore('directions');
                                            var standard");
                WriteLiteral(@"sStore = this.lookupViewModel().getStore('standards');
                                            var qualificationsStore = this.lookupViewModel().getStore('qualifications');

                                            form.items.items.find(p => p.name == ""DirectionUid"").setValue('');
                                            form.items.items.find(p => p.name == ""Standard"").setValue('');
                                            form.items.items.find(p => p.name == ""Qualification"").setValue('');

                                            var division = form.items.items.find(p => p.name == ""DivisionUuid"").getValue();
                                            var currentDivisionData = divisionsStore.data.items.filter(d => d.data.Id == division)[0].data;
                                            directionsStore.setData(currentDivisionData.Directions);
                                            standardsStore.setData({});
                                            qualificationsStore.setD");
                WriteLiteral(@"ata({});
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    fieldLabel: 'Направление подготовки',
                                    name: 'DirectionUid',
                                    bind: {
                                        store: '{directions}',
                                        value: '{directionUid}'
                                    },
                                    allowBlank: false,
                                    editable: true,
                                    queryMode: 'local',
                                    displayField: 'OksoAndTitle',
                                    valueField: 'OksoAndTitle',
                                    anyMatch: true,
                                    width: 600,
                                    listeners: {
       ");
                WriteLiteral(@"                                 change: function (t, newValue, oldValue, eOpts) {
                                            var form = this.up('window').down('form');
                                            var direction = form.items.items.find(p => p.name == ""DirectionUid"").getValue();
                                            if (!isEmptyString(direction)) {

                                                var directionsStore = this.lookupViewModel().getStore('directions');
                                                var standardsStore = this.lookupViewModel().getStore('standards');
                                                var qualificationsStore = this.lookupViewModel().getStore('qualifications');

                                                form.items.items.find(p => p.name == ""Standard"").setValue('');
                                                form.items.items.find(p => p.name == ""Qualification"").setValue('');

                                                var c");
                WriteLiteral(@"urrentDirectionData = directionsStore.data.items.filter(d => d.data.OksoAndTitle == direction)[0].data;
                                                //var currentDirectionData = directionsStore.data.items.filter(d => d.data.Ids == direction || d.data.Ids.includes(direction))[0].data;

                                                qualificationsStore.setData(currentDirectionData.qualifications);
                                                standardsStore.setData(currentDirectionData.standards);

                                            }
                                        }
                                    }
                                },
                                {
                                    xtype: 'combobox',
                                    fieldLabel: 'Стандарт ВПО',
                                    name: 'Standard',
                                    bind: {
                                        store: '{standards}',
                          ");
                WriteLiteral(@"              value: '{Standard}'
                                    },
                                    allowBlank: false,
                                    editable: true,
                                    queryMode: 'local',
                                    displayField: 'standard',
                                    valueField: 'directionUid',
                                    anyMatch: true,
                                    width: 360
                                },
                                {
                                    xtype: 'combobox',
                                    fieldLabel: 'Уровень обучения',
                                    name: 'Qualification',
                                    bind: {
                                        store: '{qualifications}',
                                        value: '{qualification}'
                                    },
                                    allowBlank: false,
                       ");
                WriteLiteral(@"             editable: true,
                                    queryMode: 'local',
                                    displayField: 'qualification',
                                    valueField: 'qualification',
                                    anyMatch: true,
                                    width: 360
                                },
                                {
                                    xtype: 'combobox',
                                    fieldLabel: 'Форма обучения',
                                    name: 'FamilirizationType',
                                    bind: {
                                        store: '{familirizationTypes}',
                                        value: '{familirizationType}'
                                    },
                                    allowBlank: false,
                                    editable: true,
                                    queryMode: 'local',
                                    displayField");
                WriteLiteral(@": 'Name',
                                    valueField: 'Name',
                                    anyMatch: true,
                                    width: 360
                                },
                                {
                                    xtype: 'textfield',
                                    name: 'Duration',
                                    fieldLabel: 'Срок обучения',
                                    bind: '{duration}',
                                    allowBlank: false,
                                    editable: true,
                                    vtype: 'numbers',
                                    width: 360
                                },
                                {
                                    xtype: 'textfield',
                                    name: 'DurationSPO',
                                    fieldLabel: 'Срок обучения на базе СПО соответствующего профиля',
                                    bind: '{dura");
                WriteLiteral(@"tionSPO}',
                                    allowBlank: true,
                                    editable: true,
                                    vtype: 'numbers',
                                    width: 360
                                },
                                {
                                    xtype: 'textfield',
                                    name: 'DurationSPOUnsuitableProfile',
                                    fieldLabel: 'Срок обучения на базе СПО не соответствующего профиля',
                                    bind: '{durationSPOUnsuitableProfile}',
                                    allowBlank: true,
                                    editable: true,
                                    vtype: 'numbers',
                                    width: 360
                                },
                                {
                                    xtype: 'textfield',
                                    name: 'DurationVPO',
                  ");
                WriteLiteral(@"                  fieldLabel: 'Срок обучения на базе ВПО соответствующего профиля',
                                    bind: '{durationVPO}',
                                    allowBlank: true,
                                    editable: true,
                                    vtype: 'numbers',
                                    width: 360
                                },
                                {
                                    xtype: 'textfield',
                                    name: 'DurationVPOUnsuitableProfile',
                                    fieldLabel: 'Срок обучения на базе ВПО не соответствующего профиля',
                                    bind: '{durationVPOUnsuitableProfile}',
                                    allowBlank: true,
                                    editable: true,
                                    vtype: 'numbers',
                                    width: 360
                                }
                            ],
    ");
                WriteLiteral("                        buttons: [\r\n                            {\r\n                                text: \"Сохранить\",\r\n                                hidden: \'");
#nullable restore
#line 425 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                    Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                                handler: function () {
                                    var window = this.up('window');
                                    var form = window.down('form');

                                    var isValid = true;
                                    form.items.items.forEach(function (element, index, array) {
                                        if (!element.isValid()) isValid = false;
                                    });
                                    if (!isValid) {
                                        return;
                                    }
                                    var duration = form.items.items.find(p => p.name == ""Duration"").getValue();
                                    duration = duration.replace('.', ',');

                                    var durationSPO = form.items.items.find(p => p.name == ""DurationSPO"").getValue();
                                    durationSPO = durationSPO.replace('.', ',');

 ");
                WriteLiteral(@"                                   var durationSPOUnsuitableProfile = form.items.items.find(p => p.name == ""DurationSPOUnsuitableProfile"").getValue();
                                    durationSPOUnsuitableProfile = durationSPOUnsuitableProfile.replace('.', ',');

                                    var durationVPO = form.items.items.find(p => p.name == ""DurationVPO"").getValue();
                                    durationVPO = durationVPO.replace('.', ',');

                                    var durationVPOUnsuitableProfile = form.items.items.find(p => p.name == ""DurationVPOUnsuitableProfile"").getValue();
                                    durationVPOUnsuitableProfile = durationVPOUnsuitableProfile.replace('.', ',');

                                    Ext.Ajax.request({
                                        url: '");
#nullable restore
#line 453 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                         Write(Url.Action("CreateDuration"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                        params: {
                                            division: form.items.items.find(p => p.name == ""DivisionUuid"").getValue(),
                                            qualification: form.items.items.find(p => p.name == ""Qualification"").getValue(),
                                            direction: form.items.items.find(p => p.name == ""Standard"").getValue(),
                                            familirizationType: form.items.items.find(p => p.name == ""FamilirizationType"").getValue(),
                                            duration: duration,
                                            dSPO: durationSPO,
                                            dSPOUP: durationSPOUnsuitableProfile,
                                            dVPO: durationVPO,
                                            dVPOUP: durationVPOUnsuitableProfile
                                        },
                                        success: function (response)");
                WriteLiteral(@" {
                                            if (response.responseText != """") {
                                                var data = Ext.decode(response.responseText);
                                                if (data.success) {
                                                    Ext.MessageBox.show({
                                                        title: 'Уведомление',
                                                        msg: data.message,
                                                        buttons: Ext.MessageBox.OK
                                                    });
                                                    window.close();
                                                    store.reload();
                                                }
                                                else {
                                                    Ext.MessageBox.show({
                                                        title: 'Ошибка',
           ");
                WriteLiteral(@"                                             msg: data.message,
                                                        buttons: Ext.MessageBox.OK
                                                    });
                                                }
                                            }
                                        },
                                        failure: function (response) {
                                            Ext.MessageBox.show({
                                                title: 'Информационное сообщение',
                                                msg: 'Ошибка',
                                                buttons: Ext.MessageBox.OK
                                            });
                                        }
                                    });
                                }
                            },
                            {
                                text: ""Отмена"",
                                h");
                WriteLiteral("idden: \'");
#nullable restore
#line 498 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                    Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                                handler: function () {
                                    var window = this.up('window');
                                    window.close();
                                }
                            }
                        ]
                        }
                    })
            };


            function createEditWindow(id, record) {
                var data = record ? record.data : {};
                var directionCodeAndValue = data.directionCode + ' - ' + data.directionTitle;
                return Ext.create('Ext.window.Window',
                    {
                        title: ""Срок обучения"",
                        closeAction: 'hide',
                        overflowY: 'auto',
                        resizable: true,
                        x: 100,
                        y: 100,
                        autoHeight: true,
                        width: 650,
                        modal: true,
                    ");
                WriteLiteral(@"    bodyPadding: 6,
                        rowHeight: 100,
                        defaults: {
                            labelWidth: 130
                        },
                        viewModel: {
                            data: Ext.apply({}, record ? record.data : {})
                        },
                        items: {
                            xtype: 'form',
                            defaults: {
                                labelWidth: 130
                            },
                            items: [
                                {
                                    xtype: 'textfield',
                                    fieldLabel: 'Институт/ Департамент',
                                    bind: {
                                        value: '{divisionTitle}'
                                    },
                                    editable: false,
                                    disabled: true,
                                    width: 600,");
                WriteLiteral(@"
                                },
                                {
                                    xtype: 'textfield',
                                    fieldLabel: 'Направление подготовки',
                                    value: directionCodeAndValue,
                                    editable: false,
                                    disabled: true,
                                    width: 600,
                                },
                                {
                                    xtype: 'textfield',
                                    fieldLabel: 'Стандарт ВПО',
                                    bind: {
                                        value: '{standard}'
                                    },
                                    editable: false,
                                    disabled: true,
                                    width: 360,
                                },
                                {
                               ");
                WriteLiteral(@"     xtype: 'textfield',
                                    fieldLabel: 'Уровень обучения',
                                    bind: {
                                        value: '{qualification}'
                                    },
                                    editable: false,
                                    disabled: true,
                                    width: 360,
                                },
                                {
                                    xtype: 'textfield',
                                    fieldLabel: 'Форма обучения',
                                    bind: {
                                        value: '{familirizationType}'
                                    },
                                    editable: false,
                                    disabled: true,
                                    width: 360,
                                },
                                {
                                    xtype: '");
                WriteLiteral(@"textfield',
                                    name: 'Duration',
                                    fieldLabel: 'Срок обучения',
                                    bind: '{duration}',
                                    allowBlank: false,
                                    editable: true,
                                    vtype: 'numbers',
                                    width: 360
                                },
                                {
                                    xtype: 'textfield',
                                    name: 'DurationSPO',
                                    fieldLabel: 'Срок обучения на базе СПО соответствующего профиля',
                                    bind: '{durationSPO}',
                                    allowBlank: true,
                                    editable: true,
                                    vtype: 'numbers',
                                    width: 360
                                },
                         ");
                WriteLiteral(@"       {
                                    xtype: 'textfield',
                                    name: 'DurationSPOUnsuitableProfile',
                                    fieldLabel: 'Срок обучения на базе СПО не соответствующего профиля',
                                    bind: '{durationSPOUnsuitableProfile}',
                                    allowBlank: true,
                                    editable: true,
                                    vtype: 'numbers',
                                    width: 360
                                },
                                {
                                    xtype: 'textfield',
                                    name: 'DurationVPO',
                                    fieldLabel: 'Срок обучения на базе ВПО соответствующего профиля',
                                    bind: '{durationVPO}',
                                    allowBlank: true,
                                    editable: true,
                               ");
                WriteLiteral(@"     vtype: 'numbers',
                                    width: 360
                                },
                                {
                                    xtype: 'textfield',
                                    name: 'DurationVPOUnsuitableProfile',
                                    fieldLabel: 'Срок обучения на базе ВПО не соответствующего профиля',
                                    bind: '{durationVPOUnsuitableProfile}',
                                    allowBlank: true,
                                    editable: true,
                                    vtype: 'numbers',
                                    width: 360
                                },
                            ],
                            buttons: [
                                {
                                    text: ""Сохранить"",
                                    hidden: '");
#nullable restore
#line 640 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                                    handler: function () {
                                        var window = this.up('window');
                                        var form = window.down('form');

                                        var isValid = true;
                                        form.items.items.forEach(function (element, index, array) {
                                            if (!element.isValid()) isValid = false;
                                        });
                                        if (!isValid) {
                                            return;
                                        }
                                        var duration = form.items.items.find(p => p.name == ""Duration"").getValue();
                                        duration = duration.replace('.', ',');

                                        var durationSPO = form.items.items.find(p => p.name == ""DurationSPO"").getValue();
                                 ");
                WriteLiteral(@"       durationSPO = durationSPO.replace('.', ',');

                                        var durationSPOUnsuitableProfile = form.items.items.find(p => p.name == ""DurationSPOUnsuitableProfile"").getValue();
                                        durationSPOUnsuitableProfile = durationSPOUnsuitableProfile.replace('.', ',');

                                        var durationVPO = form.items.items.find(p => p.name == ""DurationVPO"").getValue();
                                        durationVPO = durationVPO.replace('.', ',');

                                        var durationVPOUnsuitableProfile = form.items.items.find(p => p.name == ""DurationVPOUnsuitableProfile"").getValue();
                                        durationVPOUnsuitableProfile = durationVPOUnsuitableProfile.replace('.', ',');

                                        Ext.Ajax.request({
                                            url: '");
#nullable restore
#line 668 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                             Write(Url.Action("UpdateDuration"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                            params: {
                                                id: id,
                                                duration: duration,
                                                dSPO: durationSPO,
                                                dSPOUP: durationSPOUnsuitableProfile,
                                                dVPO: durationVPO,
                                                dVPOUP: durationVPOUnsuitableProfile
                                            },
                                            success: function (response) {
                                                if (response.responseText != """") {
                                                    var data = Ext.decode(response.responseText);
                                                    if (data.success) {
                                                        Ext.MessageBox.show({
                                                            title: 'Уве");
                WriteLiteral(@"домление',
                                                            msg: data.message,
                                                            buttons: Ext.MessageBox.OK
                                                        });
                                                        window.close();
                                                        store.reload();
                                                    }
                                                    else {
                                                        Ext.MessageBox.show({
                                                            title: 'Ошибка',
                                                            msg: data.message,
                                                            buttons: Ext.MessageBox.OK
                                                        });
                                                    }
                                                }
                              ");
                WriteLiteral(@"              },
                                            failure: function (response) {
                                                Ext.MessageBox.show({
                                                    title: 'Информационное сообщение',
                                                    msg: 'Ошибка',
                                                    buttons: Ext.MessageBox.OK
                                                });
                                            }
                                        });
                                    }
                                },
                                {
                                    text: ""Отмена"",
                                    hidden: '");
#nullable restore
#line 710 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                                    handler: function () {
                                        var window = this.up('window');
                                        window.close();
                                    }
                                }
                            ]
                        }
                    })
            }

            var gridPanel = Ext.create('Ext.grid.Panel',
                {
                    region: 'center',
                    store: store,
                    loadMask: true,
                    columnLines: true,
                    tbar: [
                        {
                            xtype: 'button',
                            text: 'Фильтры...',
                            handler: function() { filtersWnd.show(); }
                        },
                        {
                            xtype: 'button',
                            text: ""Отменить фильтры"",
                            handler: fu");
                WriteLiteral(@"nction() {
                                store.clearFilter();
                                store.load();
                                localStorage.setItem(filterName, JSON.stringify([]));
                            }
                        }, '-',
                        {
                            xtype: 'button',
                            text: 'Добавить',
                            hidden: '");
#nullable restore
#line 745 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                            handler: function () { createAddWindow('-1', {}).show(); }
                        }
                    ],
                    columns: [
                        { xtype: 'rownumberer', width: 50 },
                        {
                            header: 'Институт/Департамент',
                            dataIndex: 'divisionTitle',
                            width: 300,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Уровень подготовки',
                            dataIndex: 'qualification',
                            width: 200,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Код направления',
                            dataIndex: 'directionCode',
                            width: 150,
                     ");
                WriteLiteral(@"       renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Направление подготовки',
                            dataIndex: 'directionTitle',
                            width: 200,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Стандарт ВПО',
                            dataIndex: 'standard',
                            width: 150,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Форма обучения',
                            dataIndex: 'familirizationType',
                            width: 150,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Срок обучения',
         ");
                WriteLiteral(@"                   dataIndex: 'duration',
                            width: 150,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Срок обучения на базе СПО соответствующего профиля',
                            dataIndex: 'durationSPO',
                            width: 200,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Срок обучения на базе СПО не соответствующего профиля',
                            dataIndex: 'durationSPOUnsuitableProfile',
                            width: 200,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Срок обучения на базе ВПО соответствующего профиля',
                            dataIndex: 'durationVPO',
             ");
                WriteLiteral(@"               width: 200,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Срок обучения на базе ВПО не соответствующего профиля',
                            dataIndex: 'durationVPOUnsuitableProfile',
                            width: 200,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },

                        {
                            xtype: 'actioncolumn',
                            resizable: false,
                            sortable: false,
                            hidden: '");
#nullable restore
#line 822 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \'False\',\r\n                            width: 70,\r\n                            items: [\r\n                                {\r\n                                    icon: \'");
#nullable restore
#line 826 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                      Write(Url.Content("/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    iconCls: 'icon-padding',
                                    tooltip: 'Редактировать',
                                    handler: function (grid, rowIndex, colIndex, item, e, record) {
                                        var rec = grid.getStore().getAt(rowIndex);
                                        createEditWindow(rec.get('id'), rec).show();
                                    }
                                }, {
                                    icon: '");
#nullable restore
#line 834 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                      Write(Url.Content("/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    iconCls: 'icon-padding',
                                    tooltip: 'Удалить',

                                    handler: function (grid, rowIndex, colIndex, item, e, record) {

                                        Ext.MessageBox.show({
                                            title: 'Уведомление',
                                            msg: ""Удалить запись?"",
                                            buttons: Ext.MessageBox.YESNO,
                                            fn: function (btn) {
                                                if (btn === 'yes') {
                                                    Ext.Ajax.request({
                                                        method: 'GET',
                                                        url: '");
#nullable restore
#line 848 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\TrainingDuration\Index.cshtml"
                                                         Write(Url.Action("RemoveDuration"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                                        success: function(response) {
                                                            Ext.MessageBox.show({
                                                                title: 'Информационное сообщение',
                                                                msg: 'Запись удалена успешно',
                                                                buttons: Ext.MessageBox.OK
                                                            });
                                                            store.reload();
                                                        },
                                                        failure: function(d) {
                                                            Ext.MessageBox.show({
                                                                title: 'Ошибка',
                                                                msg: 'Неизвестная ошибка',
                       ");
                WriteLiteral(@"                                         buttons: Ext.MessageBox.OK
                                                            });
                                                        },
                                                        params: { id: record.get('id') }
                                                    });
                                                }
                                            }
                                        });
                                    }
                                }
                            ]
                        }
                    ]
                });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);

        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
