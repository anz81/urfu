#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f74ebb631b37a71266d307ca4560291ccf193d31"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Admission2_MinorStudents), @"mvc.1.0.view", @"/Views/Admission2/MinorStudents.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
using Urfu.Its.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
using Urfu.Its.Web.DataContext;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f74ebb631b37a71266d307ca4560291ccf193d31", @"/Views/Admission2/MinorStudents.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Admission2_MinorStudents : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 4 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
  
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script type=\"text/javascript\">\r\n\r\n        function downloadReport() {\r\n            var fileUrl = \'");
#nullable restore
#line 13 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
                      Write(Url.Action("DownloadMinorStudentsReport",new {id = ViewBag.MinorPeriodId }));

#line default
#line hidden
#nullable disable
                WriteLiteral("\'\r\n                .concat(\'?filter=\' + encodeURIComponent(localStorage.getItem(\"MinorStudentsFilters\") || \"[]\"));\r\n            window.location.href = fileUrl;\r\n            return false;\r\n        }\r\n        var statuses = ");
#nullable restore
#line 18 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
                  Write(Html.Raw(Json.Serialize(EnumHelper<AdmissionStatus>.GetValues(AdmissionStatus.Admitted).Select(m=>new {Value = m, Text = EnumHelper<AdmissionStatus>.GetDisplayValue(m)}).ToList())));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
        var statesStore = Ext.create('Ext.data.Store', {
            fields: ['Value', 'Text'],
            data : statuses
        });

        Ext.onReady(function () {
            Ext.tip.QuickTipManager.init();

            var store = Ext.create(""Ext.data.BufferedStore"",
            {
                fields: [""Id"", ""GroupName"", ""Surname"", ""Name"", ""PatronymicName"", ""Rating"", ""IsTarget"", ""IsInternational"", ""Compensation"", ""Priority"", ""Status"", ""PersonalNumber"", ""StudentStatus"", ""AnotherAdmission"", ""VariantId"",""Published""],
                autoLoad: true,
                pageSize: 300,
                remoteSort: true,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: window.location.pathname,
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                    }
                }
            });

  ");
                WriteLiteral(@"          var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""MinorStudentsFilters"") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }

            var filtersWnd = null;

            var setFilters = function () {
                var settings = [
                                { property: 'GroupName', value: filtersWnd.getComponent(""GroupNameField"").getValue() },
                                { property: 'Surname', value: filtersWnd.getComponent(""SurnameField"").getValue() },
                                { property: 'Name', value: filtersWnd.getComponent(""NameField"").getValue() },
                                { property: 'StudentStatus', value: filtersWnd.getComponent(""StudentStatusField"").getValue() },
                              ");
                WriteLiteral(@"  { property: 'Status', value: filtersWnd.getComponent(""StatusField"").getValue() },
                                { property: 'PersonalNumber', value: filtersWnd.getComponent(""PersonalNumber"").getValue() },
                                { property: 'PatronymicName', value: filtersWnd.getComponent(""PatronymicNameField"").getValue() }
                ];
                store.setFilters(settings);
                localStorage.setItem(""MinorStudentsFilters"", JSON.stringify(settings));
            };

            filtersWnd = Ext.create('Ext.window.Window', {
                title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLabel: ""Название группы"", itemId: ""GroupNameField"", value: prevSettings[""GroupName""]  },
          ");
                WriteLiteral(@"          { fieldLabel: ""Фамилия"", itemId: ""SurnameField"", value: prevSettings[""SurName""]  },
                    { fieldLabel: ""Имя"", itemId: ""NameField"", value: prevSettings[""Name""] },
                    { fieldLabel: ""Статус"", itemId: ""StudentStatusField"" , value: prevSettings[""StudentStatus""]},
                    { fieldLabel: ""Номер"", itemId: ""PersonalNumber"", value: prevSettings[""PersonalNumber""] },
                    { fieldLabel: ""Отчество"", itemId: ""PatronymicNameField"", value: prevSettings[""PatronymicName""] },
                    {
                        fieldLabel: ""Состояние"", itemId: ""StatusField"" , value: prevSettings[""Status""],
                        xtype: ""combobox"", store: statesStore, valueField: 'Value', displayField: 'Text', queryMode: 'local'

                    }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function () {
                            //store.filter([
         ");
                WriteLiteral(@"                   //    { property: 'GroupName', value: filtersWnd.getComponent(""GroupNameField"").getValue() },
                            //    { property: 'Surname', value: filtersWnd.getComponent(""SurnameField"").getValue() },
                            //    { property: 'Name', value: filtersWnd.getComponent(""NameField"").getValue() },
                            //    { property: 'StudentStatus', value: filtersWnd.getComponent(""StudentStatus"").getValue() },
                            //    { property: 'PersonalNumber', value: filtersWnd.getComponent(""PersonalNumber"").getValue() },
                            //    { property: 'PatronymicName', value: filtersWnd.getComponent(""PatronymicNameField"").getValue() }
                            //]);
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function () { filt");
                WriteLiteral(@"ersWnd.hide(); }
                    }
                ]
            });

            setFilters();

            var selRecord = [];
            var gridPanel = null;

            function setAdmissionStatus(rec, status) {
                var request = function (){
                    Ext.Ajax.request({
                        url: ""/Admission2/SetMinorAdmissionStatus"",
                        params: { studentIds: rec.map(function (l) { return l.get(""Id""); }), minorPeriodId: ");
#nullable restore
#line 127 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
                                                                                                       Write(ViewBag.MinorPeriodId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@", status: status },
                        success: function (response) {
                            var data = Ext.decode(response.responseText);
                            if (data.reload)
                                location.reload();



                            for(var i in rec) {
                                rec[i].set(""Status"", status);
                                rec[i].set(""Published"", false);
                                // rec.Save();
                            }
                            statusChanged(rec);
                            //store.commitChanges();
                            gridPanel.getView().refresh();
                        }
                    });
                }
                if (rec[0].data.Status === 1 && (status === 0 || status === 2)) {
                    Ext.MessageBox.show(
                    {
                        title: 'Сообщение об удалении',
                        msg: 'Внимание! Студент будет удален из всех подг");
                WriteLiteral(@"рупп майнора',
                        buttons: Ext.MessageBox.OKCANCEL,
                        fn: function(btn) {
                            if (btn === 'ok') {
                                request();
                            }
                        }
                    });
                } else {
                    request();
                }
            }



            var indeterminateButton = Ext.create('Ext.Button', {
                xtype: 'button',
                disabled: true,
                text: 'Нет решения',
                handler: function () { setAdmissionStatus(selRecord, 0); }
            });

            var admittedButton = Ext.create('Ext.Button', {
                xtype: 'button',
                disabled: true,
                text: 'Зачислен',
                handler: function () { setAdmissionStatus(selRecord, 1); }
            });

            var deniedButton = Ext.create('Ext.Button', {
                xtype: 'button',
             ");
                WriteLiteral(@"   disabled: true,
                text: 'Не зачислен',
                handler: function () { setAdmissionStatus(selRecord, 2); }
            });

            var sendButton = Ext.create('Ext.Button', {
                xtype: 'button',
                disabled: true,
                text: 'Отправить в ЛК',
                handler: function () {
                    setTimeout(function() {
                            selRecord.forEach(function(el, index, array) {
                                el.set(""Published"", true);
                            });
                        },0);
                    Ext.Ajax.request({
                        url: ""/Admission2/PublishMinorAdmission"",
                        params: { studentId: selRecord.map(function (l) { return l.get(""Id""); }), minorPeriodId: ");
#nullable restore
#line 198 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
                                                                                                            Write(ViewBag.MinorPeriodId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@" },
                        success: function (response) {
                            Ext.toast({ html: ""Сообщение отправлено"", align: 't' });
                            gridPanel.getView().refresh();
                        }
                    });

                }
            });


            function statusChanged(rec) {
                if (rec == null)
                    return;
                for (var i in rec) {
                    var anotherAdmission = rec[i].get(""AnotherAdmission"");
                    var status = rec[i].get(""Status"");
                    if (!anotherAdmission) {
                        indeterminateButton.setDisabled(status == 0 || !");
#nullable restore
#line 216 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
                                                                   Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(");\r\n                        admittedButton.setDisabled(status == 1 || !");
#nullable restore
#line 217 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
                                                              Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(");\r\n                        deniedButton.setDisabled(status == 2 || !");
#nullable restore
#line 218 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
                                                            Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(");\r\n                        sendButton.setDisabled(!");
#nullable restore
#line 219 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission2\MinorStudents.cshtml"
                                           Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@");
                    } else {
                        indeterminateButton.disable();
                        admittedButton.disable();
                        deniedButton.disable();
                        sendButton.disable();
                    }
                }
            }

            gridPanel = Ext.create('Ext.grid.Panel',
            {
                multiSelect: true,
                region: 'center',
                store: store,
                loadMask: true,
                columnLines: true,
                listeners: {
                    selectionchange: function (el, records) {
                        selRecord = records.slice();
                        statusChanged(selRecord);
                    }
                },
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function () { filtersWnd.show(); }
                    },
                   ");
                WriteLiteral(@" {
                        xtype: 'button',
                        text: ""Отменить фильтры"",
                        handler: function() {
                            localStorage.setItem(""MinorStudentsFilters"", []);
                            store.clearFilter();
                        }
                    },
                    {
                        xtype: 'button',
                        text: ""Скрыть\\показать студентов c приоритетом"",
                        handler: function() {
                            window.showPriority = !window.showPriority;
                            if(window.showPriority)
                                store.filter('IsPriority',true);
                            else
                                store.clearFilter();
                        }
                    },
                    '-',
                    indeterminateButton,
                    admittedButton,
                    deniedButton,
                    '-',
                ");
                WriteLiteral(@"    sendButton,
                    '-',
                    {
                        xtype: 'button',
                        text: ""Экспорт в Excel"",
                        handler: downloadReport
                    }
                ],
                viewConfig: {
                    getRowClass: function(record) {
                        return !record.get('Published')
                            ? 'highlight'
                            : '';
                    },
                    markDirty:false
                },
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Название группы',
                        dataIndex: 'GroupName',
                        width: 160,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Фамилия',
                        dataIndex: 'Surname',
                        wid");
                WriteLiteral(@"th: 200,
                        renderer: function (value, metaData, record) {
                            return '<a href=""/PersonalInfo/Student?studentId='+record.data.Id+'"">'+value+'</a>';
                        }
                    },
                    {
                        header: 'Имя',
                        dataIndex: 'Name',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Отчество',
                        dataIndex: 'PatronymicName',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Статус',
                        dataIndex: 'StudentStatus',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Личный ");
                WriteLiteral(@"номер студента',
                        dataIndex: 'PersonalNumber',
                        width: 120,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Рейтинг',
                        dataIndex: 'Rating',
                        width: 90
                    },
                    {
                        header: 'Целевой',
                        dataIndex: 'IsTarget',
                        width: 100,
                        align: 'center',
                        renderer: function (val) { return val ? 'Да' : ""Нет"" }
                    },
                    {
                        header: 'Иностранный студент',
                        dataIndex: 'IsInternational',
                        width: 200,
                        align: 'center',
                        renderer: function (val) { return val ? 'Да' : ""Нет"" }
                    },
                    {
                   ");
                WriteLiteral(@"     header: 'Вид возмещения затрат',
                        align: 'center',
                        dataIndex: 'Compensation',
                        width: 210,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Приоритет в ЛК',
                        dataIndex: 'Priority',
                        align: 'center',
                        width: 150
                    },
                    {
                        header: 'Состояние',
                        width: 400,
                        dataIndex: 'Status',
                        xtype: 'templatecolumn',
                        tpl: new Ext.XTemplate(
                            '<tpl for=""."" if=""!!AnotherAdmission"">',
                            ""Зачислен в {AnotherAdmission:htmlEncode}"",
                            '<tpl else>',
                            '{[this.getAdmissionStatus(values.Status)]}',
                            ""</tpl>");
                WriteLiteral(@""",
                            {
                                getAdmissionStatus: function (status) { return { 0: ""Нет решения"", 1: ""Зачислен"", 2: ""Не зачислен"" }[status]; }
                            }
                        )
                    }
                ]
            });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
    </script>
");
            }
            );
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
