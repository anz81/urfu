#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKAdmission\Report.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c0fef925eb073795ca71da0b01a653f5bc15fd0d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_SectionFKAdmission_Report), @"mvc.1.0.view", @"/Views/SectionFKAdmission/Report.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c0fef925eb073795ca71da0b01a653f5bc15fd0d", @"/Views/SectionFKAdmission/Report.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_SectionFKAdmission_Report : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Urfu.Its.Web.Controllers.MinorReportVM>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKAdmission\Report.cshtml"
  
    ViewBag.Title = "Отчет по секциям ФК По зачисленным студентам";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">

        Ext.onReady(function () {
            Ext.Ajax.setTimeout(1200000);
            Ext.tip.QuickTipManager.init();

            Ext.define('ComboBoxModel',
            {
                extend: 'Ext.data.Model',
                fields:
                [
                    { type: 'string', name: 'Id' },
                    { type: 'string', name: 'Name' }
                ]
            });

            function parseJson(json) {
                var data = JSON.parse(json.replace(/&quot;/g, '""'));
                return data;
            }
            
            var dataSemesters = parseJson('");
#nullable restore
#line 29 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKAdmission\Report.cshtml"
                                      Write(ViewBag.Semesters);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n            var SemestersStore = Ext.create(\"Ext.data.Store\",\r\n                {\r\n                    data: dataSemesters\r\n                });\r\n\r\n            var dataYears = parseJson(\'");
#nullable restore
#line 35 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKAdmission\Report.cshtml"
                                  Write(ViewBag.Years);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"');
            var yearsStore = Ext.create(""Ext.data.Store"",
                {
                    data: dataYears,

                });
            
            var store = Ext.create(""Ext.data.Store"",
            {
                fields: [
                    ""CompetitionGroupName"", ""moduleName"", ""GroupName"", ""Surname"", ""Name"", ""PatronymicName"", ""Rating"", ""IsTarget"", ""IsInternational"",
                    ""Compensation"", ""MinStudentsCount"", ""MaxStudentsCount"", ""specialities"", ""StudentStatus""
                ],
                groupField: 'CompetitionGroupName',
                autoLoad: false,
                //pageSize: 300,
                remoteSort: true,
                remoteFilter: true,

                proxy: {
                    type: 'ajax',
                    url: window.location.pathname ,
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                 ");
                WriteLiteral("   },\r\n                    timeout: 1200000\r\n                }\r\n            });\r\n            var defaultYear = ");
#nullable restore
#line 65 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKAdmission\Report.cshtml"
                          Write(DateTime.Now.Month < 7? DateTime.Now.Year -1 : DateTime.Now.Year);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n            var prevSettings = {Year:defaultYear,semesterId:");
#nullable restore
#line 66 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKAdmission\Report.cshtml"
                                                        Write(DateTime.Now.Month < 7?2:1);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"};

            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""SectionFKReportFilters"") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }


            var semesterCmbx = Ext.create('Ext.form.ComboBox',
           {
               xtype: 'combobox',
               //header: ""Семестр"",
               fieldLabel: 'Семестр',
               store: SemestersStore,
               value: prevSettings[""semesterId""] || """);
#nullable restore
#line 85 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKAdmission\Report.cshtml"
                                                 Write(DateTime.Now.Month < 7?2:1);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
               valueField: 'Id',
               displayField: 'Name',
               queryMode: 'remote',
               editable: false,
               disableKeyFilter: false,
               width: 300
           });
            var yearCmbx = Ext.create('Ext.form.ComboBox',
          {
              xtype: 'combobox',
              //header: ""Год"",
              fieldLabel: 'Год',
              store: yearsStore,
              value: prevSettings[""Year""] || defaultYear,
              valueField: 'Id',
              displayField: 'Name',
              queryMode: 'remote',
              editable: false,
              disableKeyFilter: false,
              width: 200
          });
            var filtersWnd = null;
            function loadStore() {
                store.proxy.setUrl(window.location.pathname +
                    '?filter=' +
                    encodeURIComponent(localStorage.getItem(""SectionFKReportFilters"")));
                store.load();
            }
    ");
                WriteLiteral(@"        var setFilters = function() {
                var settings = [
                    { property: 'CompetitionGroupName', value: filtersWnd.getComponent(""CompetitionGroupNameField"").getValue() },
                    { property: 'GroupName', value: filtersWnd.getComponent(""GroupNameField"").getValue() },
                    { property: 'moduleName', value: filtersWnd.getComponent(""moduleNameField"").getValue() },
                    { property: 'Surname', value: filtersWnd.getComponent(""SurnameField"").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent(""NameField"").getValue() },
                    { property: 'PatronymicName', value: filtersWnd.getComponent(""PatronymicNameField"").getValue() },
                    { property: 'IsTarget', value: filtersWnd.getComponent(""IsTargetField"").getValue().IsTargetField },
                    { property: 'semesterId', value: semesterCmbx.getValue() || 0, verb: 'Equals' },
                    { property: 'Year', value: yearCmb");
                WriteLiteral(@"x.getRawValue() || defaultYear, verb: 'Equals' },
                    {
                        property: 'IsInternational',
                        value: filtersWnd.getComponent(""IsInternationalField"").getValue().IsInternationalField
                    }
                ];
                //store.setFilters(settings);
                localStorage.setItem(""SectionFKReportFilters"", JSON.stringify(settings));
                loadStore();
             
            };
            
            var grouping = Ext.create('Ext.grid.feature.Grouping',
            {
                ftype: 'grouping',
                collapsible: true,
                startCollapsed: true,
                hideGroupedHeader: true,
                groupHeaderTpl: '{name} / Лимит нижний {[values.rows[0].data.MinStudentsCount]} / Лимит верхний {[values.rows[0].data.MaxStudentsCount]} / Зачислено: {rows.length} / Год: {[values.rows[0].data.Year]} / Семестр: {[values.rows[0].data.Semester]} '
            });

          ");
                WriteLiteral(@"  filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Фильтры"",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: true,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 500
                    },
                    items: [
                        { fieldLabel: ""Секция"", itemId: ""moduleNameField"", value: prevSettings[""moduleName""] },
                        { fieldLabel: ""Конкурсная группа"", itemId: ""CompetitionGroupNameField"", value: prevSettings[""CompetitionGroupName""] },
                        { fieldLabel: ""Название группы"", itemId: ""GroupNameField"", value: prevSettings[""GroupName""] },
                        { fieldLabel: ""Фамилия"", itemId: ""SurnameField"", value: prevSettings[""Surname""] },
                        { fieldLabel: ""Имя"", itemId: ""NameField"", value: prevSettings[""Name""] },
          ");
                WriteLiteral(@"              { fieldLabel: ""Отчество"", itemId: ""PatronymicNameField"", value: prevSettings[""PatronymicName""] },
                        { fieldLabel: ""Номер"", itemId: ""PersonalNumber"", value: prevSettings[""PersonalNumber""] },
                        yearCmbx,
                        semesterCmbx,
                      {
                        xtype: 'radiogroup',
                        fieldLabel: 'Целевой',
                        itemId: ""IsTargetField"",
                        value: prevSettings[""IsTarget""],
                        items: [
                            {
                                boxLabel: 'Все',
                                name: 'IsTargetField',
                                inputValue: ''

                            }, {
                                boxLabel: 'Да',
                                name: 'IsTargetField',
                                inputValue: 'true'
                            }, {
                                boxLabel: 'Нет',");
                WriteLiteral(@"
                                name: 'IsTargetField',
                                inputValue: 'false'
                            }
                        ]
                    },
                    {
                        xtype: 'radiogroup',
                        fieldLabel: 'Иностранный',
                        itemId: ""IsInternationalField"",
                        value: prevSettings[""IsInternational""],
                        items: [
                            {
                                boxLabel: 'Все',
                                name: 'IsInternationalField',
                                inputValue: ''

                            }, {
                                boxLabel: 'Да',
                                name: 'IsInternationalField',
                                inputValue: 'true'
                            }, {
                                boxLabel: 'Нет',
                                name: 'IsInternationalField',
                ");
                WriteLiteral(@"                inputValue: 'false'
                            }
                        ]
                    }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

            //loadStore();
            setFilters();
            //semesterCmbx.on('select', setFilters);
            //yearCmbx.on('select', setFilters);
            var gridPanel = null;

            var downloadReport = Ext.create('Ext.Button',
            {
                xtype: 'button',
                text: 'Отчёт по секциям в Excel',
                handler: function() {
                    va");
                WriteLiteral("r fileUrl = \'");
#nullable restore
#line 237 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKAdmission\Report.cshtml"
                              Write(Url.Action("DownloadReport"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' +
                        ""?filter="" +
                        encodeURIComponent(localStorage.getItem(""SectionFKReportFilters"") || ""[]"");
                    window.location.href = fileUrl;
                }
            });

            var downloadDivisionReport = Ext.create('Ext.Button',
            {
                xtype: 'button',
                text: 'Отчёт по подразделениям в Excel',
                handler: function() {
                    var fileUrl = '");
#nullable restore
#line 249 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\SectionFKAdmission\Report.cshtml"
                              Write(Url.Action("DownloadDivisionReport"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' +
                        ""?filter="" +
                        encodeURIComponent(localStorage.getItem(""SectionFKReportFilters"") || ""[]"");
                    window.location.href = fileUrl;
                }
            });



            gridPanel = Ext.create('Ext.grid.Panel',
            {
                multiSelect: true,
                region: 'center',
                store: store,
                loadMask: true,
                columnLines: true,
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                    },
                    //semesterCmbx,
                    //yearCmbx,
                   /* {
                        xtype: 'button',
                        text: ""Применить"",
                        handler: function () {
                            setFilters();
                        }
                   ");
                WriteLiteral(@" }*/,
                    {
                        xtype: 'button',
                        text: ""Отменить фильтры"",
                        handler: function() {
                            localStorage.setItem(""SectionFKReportFilters"", JSON.stringify([
                                { property: 'semesterId', value: semesterCmbx.getValue(), verb: 'Equals' },
                                { property: 'Year', value: yearCmbx.getRawValue(), verb: 'Equals' },
                            ]));
                            //store.clearFilter();
                            store.proxy.setUrl(window.location.pathname + '?filter='+encodeURIComponent(localStorage.getItem(""SectionFKReportFilters"")));
                            store.load();
                            //store.setFilters();

                        }
                    }, '-',
                    {
                        xtype: 'button',
                        text: ""Развернуть\\Свернуть группировку"",
                        h");
                WriteLiteral(@"andler: function() {
                            window.groupsCollapsed = !window.groupsCollapsed;
                            if (window.groupsCollapsed)
                                grouping.expandAll();
                            else
                                grouping.collapseAll();
                        }
                    },
                    '-',
                    downloadReport,
                    downloadDivisionReport
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Секция',
                        dataIndex: 'moduleName',
                        width: 160,
                        renderer: Ext.util.Format.htmlEncode
                    },
                       {
                           header: 'Приоритет',
                           dataIndex: 'priority',
                           width: 130,
                           renderer: Ext.util.Forma");
                WriteLiteral(@"t.htmlEncode
                       },
                    {
                        header: 'Название группы',
                        dataIndex: 'GroupName',
                        width: 160,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Фамилия',
                        dataIndex: 'Surname',
                        width: 200,
                        renderer: function(value, metaData, record) {
                            return '<a href=""/PersonalInfo/Student?studentId=' + record.data.Id + '"">' + value + '</a>';
                        }
                    },
                    {
                        header: 'Имя',
                        dataIndex: 'Name',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Отчество',
                        dataIndex: 'Patronymic");
                WriteLiteral(@"Name',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Статус студента',
                        dataIndex: 'StudentStatus',
                        align: 'center',
                        width: 125
                    },
                    {
                        header: 'Пол',
                        dataIndex: 'male',
                        width: 90
                    },                    
                    {
                        header: 'Рейтинг',
                        dataIndex: 'Rating',
                        width: 90
                    },
                    {
                        header: 'Целевой',
                        dataIndex: 'IsTarget',
                        width: 100,
                        align: 'center',
                        renderer: function(val) { return val ? 'Да' : ""Нет"" }
                    },
        ");
                WriteLiteral(@"            {
                        header: 'Иностранный студент',
                        dataIndex: 'IsInternational',
                        width: 200,
                        align: 'center',
                        renderer: function(val) { return val ? 'Да' : ""Нет"" }
                    },
                    {
                        header: 'Спортсмен',
                        dataIndex: 'IsTarget',
                        width: 100,
                        align: 'center',
                        renderer: function (val) { return val ? 'Да' : ""Нет"" }
                    },
                    {
                        header: 'Вид возмещения затрат',
                        align: 'center',
                        dataIndex: 'Compensation',
                        width: 210,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Лимит нижний',
                        align: 'center',
       ");
                WriteLiteral(@"                 dataIndex: 'MinStudentsCount',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Лимит верхний',
                        align: 'center',
                        dataIndex: 'MaxStudentsCount',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    }
                ],
                features: [grouping]
            });
            d = null;
            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Urfu.Its.Web.Controllers.MinorReportVM>> Html { get; private set; }
    }
}
#pragma warning restore 1591
