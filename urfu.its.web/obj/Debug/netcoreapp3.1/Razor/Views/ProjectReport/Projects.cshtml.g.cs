#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectReport\Projects.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fafd642387e9fc965b5c4c68d216339615b1c2be"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ProjectReport_Projects), @"mvc.1.0.view", @"/Views/ProjectReport/Projects.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fafd642387e9fc965b5c4c68d216339615b1c2be", @"/Views/ProjectReport/Projects.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_ProjectReport_Projects : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectReport\Projects.cshtml"
  
    ViewBag.Title = "Отчет по проектам";

    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<script type=\"text/javascript\">\r\n    \r\n    Ext.onReady(function () {\r\n\r\n        Ext.tip.QuickTipManager.init();\r\n\r\n        var filterName = \"ProjectReportProjectsFilters\"\r\n\r\n        var dataYears = Urfu.parseJson(\'");
#nullable restore
#line 15 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectReport\Projects.cshtml"
                                   Write(ViewBag.Years);

#line default
#line hidden
#nullable disable
            WriteLiteral("\');\r\n        var yearsStore = Ext.create(\"Ext.data.Store\",\r\n            {\r\n                data: dataYears\r\n            });\r\n        var dataSemesters = Urfu.parseJson(\'");
#nullable restore
#line 20 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectReport\Projects.cshtml"
                                       Write(ViewBag.Semesters);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"');
        var semestersStore = Ext.create(""Ext.data.Store"",
            {
                data: dataSemesters
            });

        var store = Ext.create(""Ext.data.Store"",
        {
            autoLoad: false,
            remoteSort: false,
            remoteFilter: true,
            proxy: {
                type: 'ajax',
                url: '");
#nullable restore
#line 33 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectReport\Projects.cshtml"
                 Write(Url.Action("Projects"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                reader: {
                    type: 'json',
                    rootProperty: 'data'
                }
            }
        });

        var prevSettings = {};
        try {
            var prevSettingString = JSON.parse(localStorage.getItem(filterName) || ""[]"");

            for (var i = 0; i < prevSettingString.length; i++) {
                prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
            }

            if (prevSettings[""Years""] == null || prevSettings[""Years""] == ""[]"") {
                prevSettings[""Years""] = [];
                prevSettings[""Years""].push(parseInt('");
#nullable restore
#line 51 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectReport\Projects.cshtml"
                                                Write(ViewBag.CurrentYear);

#line default
#line hidden
#nullable disable
            WriteLiteral("\', 10));\r\n            }\r\n\r\n            if (prevSettings[\"Semesters\"] == null || prevSettings[\"Semesters\"] == \"[]\") {\r\n                prevSettings[\"Semesters\"] = [];\r\n                prevSettings[\"Semesters\"].push(parseInt(\'");
#nullable restore
#line 56 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectReport\Projects.cshtml"
                                                    Write(ViewBag.CurrentSemester);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', 10));
            }

        } catch (err) {

        }
        
        var setFilters = function (year, semester, direction, title) {
            var settings = [
                { property: 'Years', value: year },
                { property: 'Semesters', value: semester },
                { property: 'Direction', value: direction == undefined ? filtersWnd.getComponent(""Direction"").getValue() : direction },
                { property: 'Title', value: title == undefined ? filtersWnd.getComponent(""Project"").getValue() : title }
            ];
            store.setFilters(settings);
            localStorage.setItem(filterName, JSON.stringify(settings));
        };

        filtersWnd = Ext.create('Ext.window.Window', {
            title: ""Фильтры"",
            closeAction: 'hide',
            resizable: false,
            autoHeight: true,
            bodyPadding: 6,
            defaults: {
                xtype: 'textfield',
                width: 500
            },
            ");
            WriteLiteral(@"items: [
                { fieldLabel: ""Направление"", itemId: ""Direction"", value: prevSettings[""Direction""] },
                { fieldLabel: ""Проект"", itemId: ""Project"", value: prevSettings[""Title""] }
            ],
            buttons: [
                {
                    text: ""OK"",
                    handler: function () {
                        setFilters(Ext.getCmp(yearCmbxId).getValue(), Ext.getCmp(semesterCmbxId).getValue());
                        filtersWnd.hide();
                    }
                },
                {
                    text: ""Отмена"",
                    handler: function () { filtersWnd.hide(); }
                }
            ]
        });
        setFilters(prevSettings[""Years""], prevSettings[""Semesters""]);

        function downloadReport() {
            var fileUrl = '");
#nullable restore
#line 105 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectReport\Projects.cshtml"
                      Write(Url.Action("DownloadProjectsReport", "ProjectReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'
                .concat('?filter=' + encodeURIComponent(localStorage.getItem(filterName) || ""[]""));
            window.location.href = fileUrl;
            return false;
        }

        function changeYearSemester(year, semester) {
            if (year.length > 0 && semester.length > 0) {
                setFilters(year, semester);
            }
        }

        var semesterCmbxId = 'ProjectReportSemesterId';
        var yearCmbxId = 'ProjectReportYearId';
        
        var gridPanel = Ext.create('Ext.grid.Panel',
        {
            region: 'center',
            store: store,
            loadMask: true,
            columnLines: true,
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'tagfield',
                            fieldLabel: 'Учебный год',
                            id: yearCmbxId,
                      ");
            WriteLiteral(@"      value: prevSettings[""Years""],
                            store: yearsStore,
                            valueField: 'Year',
                            displayField: 'Year',
                            queryMode: 'local',
                            forceSelection: false,
                            allowBlank: false,
                            listeners: {
                                change: function (t, newValue, oldValue) {
                                    var semester = Ext.getCmp(semesterCmbxId).getValue();
                                    changeYearSemester(newValue, semester);
                                }
                            }
                        },
                        {
                            xtype: 'tagfield',
                            fieldLabel: 'Семестр',
                            id: semesterCmbxId,
                            margin: '0 5 0 5',
                            labelWidth: 65,
                            value: prevSe");
            WriteLiteral(@"ttings[""Semesters""],
                            store: semestersStore,
                            valueField: 'Id',
                            displayField: 'Name',
                            queryMode: 'local',
                            forceSelection: false,
                            allowBlank: false,
                            listeners: {
                                change: function (t, newValue, oldValue) {
                                    var year = Ext.getCmp(yearCmbxId).getValue();
                                    changeYearSemester(year, newValue);
                                }
                            }
                        }
                    ]
                },

                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            text: 'Фильтры',
                            handler: function () {");
            WriteLiteral(@" filtersWnd.show(); }
                        },
                        {
                            xtype: 'button',
                            text: ""Отменить фильтры"",
                            handler: function () {
                                setFilters(Ext.getCmp(yearCmbxId).getValue(), Ext.getCmp(semesterCmbxId).getValue(), """", """");
                            }
                        }, '-',
                        {
                            xtype: 'button',
                            text: ""Отчет в Excel"",
                            handler: downloadReport
                        }

                    ]
                },
            ],
            columns: [
                { xtype: 'rownumberer', width: 50 },
                {
                    header: 'Уровень',
                    dataIndex: 'Level',
                    width: 110,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    ");
            WriteLiteral(@"header: 'Наименование',
                    dataIndex: 'Title',
                    width: 300,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'РОПы',
                    dataIndex: 'Rops',
                    width: 200,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Кураторы',
                    dataIndex: 'Curators',
                    width: 200,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Предприятие',
                    dataIndex: 'Company',
                    width: 300,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Лимит',
                    dataIndex: 'Limit',
                    width: 100,
                    renderer: Urfu.renders.ht");
            WriteLiteral(@"mlEncodeWithToolTip
                },
                {
                    header: 'Кол-во заявлений',
                    dataIndex: 'Selection',
                    width: 120,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Зачислено всего',
                    dataIndex: 'Admission',
                    width: 120,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Свободно мест',
                    dataIndex: 'Vacancy',
                    width: 120,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Проектная группа',
                    dataIndex: 'CompetitionGroup',
                    width: 300,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                }
            ]

        });
       
        var item");
            WriteLiteral("s = [\r\n            gridPanel\r\n        ];\r\n\r\n        Urfu.createViewport(\'border\', items);\r\n\r\n    });\r\n</script>\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
