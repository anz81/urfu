#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "270ec34344b5844a47fcc6321ff8d8c38a9d71e6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_MUPCompetitionGroups_Properties), @"mvc.1.0.view", @"/Views/MUPCompetitionGroups/Properties.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"270ec34344b5844a47fcc6321ff8d8c38a9d71e6", @"/Views/MUPCompetitionGroups/Properties.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_MUPCompetitionGroups_Properties : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Urfu.Its.Web.DataContext.MUPCompetitionGroup>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
  
    ViewBag.Title = Model.ToString();

    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<script type=\"text/javascript\">\r\n    var trainingPlaceCounter = 0;\r\n    var teachersCounter = 0;\r\n    \r\n    Ext.onReady(function () {\r\n\r\n        Ext.tip.QuickTipManager.init();\r\n        function gettoken() {\r\n            var token = \'");
#nullable restore
#line 16 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
                    Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
            token = $(token).val();
            return token;
        }
        var filterName = ""MUPPropertiesFilters""
        function parseJson(json) {
            var data = JSON.parse(json.replace(/&quot;/g, '""'));
            return data;
        }

        var store = Ext.create(""Ext.data.Store"",
        {
            idProperty: 'Id',
            autoLoad: true,
            remoteSort: true,
            remoteFilter: true,
            proxy: {
                type: 'ajax',
                url: '");
#nullable restore
#line 34 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
                 Write(Url.Action("Properties",new {competitionGroupId = Model.Id}));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                reader: {
                    type: 'json',
                    rootProperty: 'data'
                }
            }
        });

        var prevSettings = {};
        try {
            var prevSettingString = JSON.parse(localStorage.getItem(filterName) || ""[]"");

            for (var i = 0; i < prevSettingString.length; i++) {
                prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
            }
        } catch (err) {

        }

        var filtersWnd = null;
        var setFilters = function () {
            var settings = [
                { property: 'title', value: filtersWnd.getComponent(""NameField"").getValue() }
            ];
            store.setFilters(settings);
            localStorage.setItem(filterName, JSON.stringify(settings));
        };

        filtersWnd = Ext.create('Ext.window.Window', {
            title: ""Фильтры"",
            closeAction: 'hide',
            resizable: false,
            auto");
            WriteLiteral(@"Height: true,
            bodyPadding: 6,
            defaults: {
                xtype: 'textfield',
                width: 500
            },
            items: [
                { fieldLabel: ""Название"", itemId: ""NameField"", value: prevSettings[""Name""] }
            ],
            buttons: [
                {
                    text: ""OK"",
                    handler: function () {
                        setFilters();
                        filtersWnd.hide();
                    }
                },
                {
                    text: ""Отмена"",
                    handler: function () { filtersWnd.hide(); }
                }
            ]
        });
        setFilters();

        teachersPanel = {}; trainingPlacePanel = {};
        var teacherStore = Ext.create(""Ext.data.BufferedStore"",
        {
            idProperty: 'Id',
            autoLoad: false,
            pageSize: 300,
            remoteSort: true,
            remoteFilter: true,
            proxy: {");
            WriteLiteral("\r\n                type: \'ajax\',\r\n                url: \'");
#nullable restore
#line 101 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
                 Write(Url.Action("PropertyTeachers"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: 'total'
                }
            },
            listeners: {
                'load': function () {

                    if (teachersCounter >= 1 && teachersPanel.isMasked()) teachersPanel.unmask();
                    else {
                        teachersCounter++;
                    }

                }
            }
        });
        var selectedTeacherStore = Ext.create(""Ext.data.Store"",
        {
            idProperty: 'Id',
            autoLoad: false,
            pageSize: 300,
            remoteSort: true,
            remoteFilter: true,
            proxy: {
                type: 'ajax',
                url: '");
#nullable restore
#line 128 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
                 Write(Url.Action("PropertyTeachers"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: 'total'
                }
            },
            filters: { selected: true },
            listeners: {
                'load': function () {

                    if (teachersCounter >= 1 && teachersPanel.isMasked()) teachersPanel.unmask();
                    else {
                        teachersCounter++;
                    }

                }
            }
        });
     
        var gridPanel = Ext.create('Ext.grid.Panel',
        {
            region: 'center',
            store: store,
            loadMask: true,
            columnLines: true,
            tbar: [
                {
                    xtype: 'button',
                    text: 'Фильтры...',
                    handler: function () { filtersWnd.show(); }
                },
                {
                    xtype: 'button',
                    text: ""Отмен");
            WriteLiteral(@"ить фильтры"",
                    handler: function () {
                        store.clearFilter();
                        localStorage.setItem(filterName, ""[]"");
                    }
                }
            ],
            plugins: [
                    Ext.create('Ext.grid.plugin.CellEditing', {
                        clicksToEdit: 1,
                        listeners: {
                            'beforeedit': function (e, editor) {

                            }
                        }
                    })],
            columns: [
                { xtype: 'rownumberer', width: 50 },
                {
                    header: 'Наименование',
                    dataIndex: 'title',
                    width: 300,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Преподаватели',
                    dataIndex: 'teachers',
                    width: 300,
                    renderer: U");
            WriteLiteral(@"rfu.renders.htmlEncodeWithToolTip
                }, {
                    xtype: 'numbercolumn',
                    text: 'Коэффициент',
                    format: '0.00',
                    dataIndex: 'coefficient',
                    width: 150
                },
                {
                    xtype: 'actioncolumn',
                    hidden: true,
                    region: 'center',
                    width: 50,
                    defaults: {
                        metadata: {
                            attr: 'style=""padding-left:10px;width:auto;""'
                        }
                    },
                    items: [
                    {
                        icon: '");
#nullable restore
#line 210 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
                          Write(Url.Content("~/Content/Images/teacher_blue.png"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\',\r\n                        iconCls: \'icon-padding\',\r\n                        tooltip: \'Назначение преподавателя\',\r\n                        handler: function (grid, rowIndex, colIndex) {\r\n                            if (\'");
#nullable restore
#line 214 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
                            Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
            WriteLiteral("\' == \'True\') {\r\n                                var rec = grid.getStore().getAt(rowIndex);\r\n                                teachersPanel.getComponent(\'Id\').setValue(rec.get(\'Id\'));\r\n                                teacherStore.proxy.setUrl(\'");
#nullable restore
#line 217 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
                                                      Write(Url.Action("PropertyTeachers"));

#line default
#line hidden
#nullable disable
            WriteLiteral("?propertyId=\' + rec.get(\'Id\'));\r\n                                teacherStore.load();\r\n\r\n                                selectedTeacherStore.proxy.setUrl(\'");
#nullable restore
#line 220 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
                                                              Write(Url.Action("PropertyTeachers"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"?propertyId=' + rec.get('Id'));
                                selectedTeacherStore.filter({ property: 'selected', value: true });
                                selectedTeacherStore.load();
                                teachersCounter = 0;
                                teachersPanel.show();
                                teachersPanel.mask('Загрузка');
                            }
                            else {
                                Ext.MessageBox.alert('Ошибка', ""У вас нет прав вносить изменения"");
                            }
                        }
                    }
                    ]
                }
            ]

        });
       
        var keyUpEvent = function (textField) {
            var store = this.up('tablepanel').store;
       
            store.filter({
                property: textField.datapropName,
                value: this.value,
            });
            store.reload();
            
        };

        teachersPanel =");
            WriteLiteral(@" Ext.create('Ext.window.Window',
            {
                title: ""Преподаватели"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: false,
                bodyPadding: 6,
                height: 600,
                defaults: {
                    xtype: 'textfield',
                    width: 600,

                },
                items: [
                      {
                          xtype: 'hidden',
                          itemId: 'Id',
                      },
                    {
                        xtype: 'grid',
                        id: 'teachersGrid',
                        store: teacherStore,
                        loadMask: true,
                        columnLines: true,
                        height: 300,
                        listeners: {
                        },
                        columns: [
                            { xtype: 'checkcolumn', text: '', dataIndex: 'selected', width: 50, ");
            WriteLiteral(@"sortable: false },                            
                            { xtype: 'rownumberer', width: 60 },
                            {
                                header: 'Фамилия',
                                dataIndex: 'LastName',
                                width: 150,
                                renderer: Urfu.renders.htmlEncodeWithToolTip,
                                items: {
                                    xtype: 'textfield',
                                    flex: 1,
                                    datapropName: 'LastName',
                                    margin: 2,
                                    enableKeyEvents: true,
                                    listeners: {
                                        keyup: keyUpEvent,
                                        buffer: 500
                                    }
                                }
                            },
                            {
                               ");
            WriteLiteral(@" header: 'Имя',
                                dataIndex: 'FirstName',
                                width: 150,
                                renderer: Urfu.renders.htmlEncodeWithToolTip,
                                items: {
                                    xtype: 'textfield',
                                    flex: 1,
                                    datapropName: 'FirstName',
                                    margin: 2,
                                    enableKeyEvents: true,
                                    listeners: {
                                        keyup: keyUpEvent,
                                        buffer: 500
                                    }
                                }

                            },
                            {
                                header: 'Отчество',
                                dataIndex: 'Patronymic',
                                width: 150,
                                renderer: Urfu.rend");
            WriteLiteral(@"ers.htmlEncodeWithToolTip,
                                items: {
                                    xtype: 'textfield',
                                    flex: 1,
                                    datapropName: 'Patronymic',
                                    margin: 2,
                                    enableKeyEvents: true,
                                    listeners: {
                                        keyup: keyUpEvent,
                                        buffer: 500
                                    }
                                }
                            }
                        ]

                    },
                    {
                        xtype: 'grid',
                        id: 'selectedTeachersGrid',
                        store: selectedTeacherStore,
                        title: 'Выбранные преподаватели',
                        loadMask: true,
                        columnLines: true,
                        dataBuffered: true,");
            WriteLiteral(@"
                        height: 200,
                        listeners: {
                        },
                        columns: [
                            { xtype: 'checkcolumn', text: '', dataIndex: 'selected', width: 50, sortable: false },
                            { xtype: 'rownumberer', width: 60 },
                            {
                                header: 'Фамилия',
                                dataIndex: 'LastName',
                                width: 150,
                                renderer: Urfu.renders.htmlEncodeWithToolTip
                            },
                            {
                                header: 'Имя',
                                dataIndex: 'FirstName',
                                width: 150,
                                renderer: Urfu.renders.htmlEncodeWithToolTip

                            },
                            {
                                header: 'Отчество',
                             ");
            WriteLiteral(@"   dataIndex: 'Patronymic',
                                width: 150,
                                renderer: Urfu.renders.htmlEncodeWithToolTip
                            }
                        ]

                    }
                ],
                buttons: [
                    {
                        text: ""Сохранить"",
                        handler: function () {
                            teachersPanel.mask('Сохранение..');
                            var teachers = new Array();
                            selectedTeachersGrid.store.data.items.forEach(function (item, i, arr) {

                                teachers[i] = {
                                    id: item.data.userId,
                                    selected: item.data.selected
                                };
                            });
                            Ext.Ajax.request({
                                method: 'POST',
                                dataType: 'json',
          ");
            WriteLiteral("                      url: \'");
#nullable restore
#line 387 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\MUPCompetitionGroups\Properties.cshtml"
                                 Write(Url.Action("UpdateMUPPropertyTeachers"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"?propertyId=' + teachersPanel.getComponent(""Id"").getValue(),
                                params: { teacherRows: JSON.stringify(teachers) },
                                traditional: true,
                                success: function (response) {
                                    teachersPanel.unmask();
                                    teachersPanel.hide();
                                    store.reload();
                                },
                                failure: function (response) {
                                    teachersPanel.unmask();
                                    teachersPanel.hide();
                                }
                            });
                           
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function () { teachersPanel.hide(); }
                    }],
                listeners: {
                    'shown': f");
            WriteLiteral(@"unction () {

                    }
                }
            });
        
        teachersGrid = Ext.getCmp('teachersGrid');
        selectedTeachersGrid = Ext.getCmp('selectedTeachersGrid');
        var selectableCellClick = function (grid, td, columnIndex, record, tr, rowIndex, e, eOpts,selectedGrid) {
            //remember to change - it must be column number (first has 0)
            if (columnIndex == 0) {

                if (record.data.selected) {
                    $(td).children('div').children('div').addClass('x-grid-checkcolumn-checked');
                    var clone = record.clone();
                    clone.commit();
                    if (grid.store.$className !== 'Ext.data.BufferedStore') {
                        record.commit();
                    }
                    
                    selectedGrid.store.add(clone); // добавляем в выбранных
                    //record.commit();

                }
                else {
                    if (grid.sto");
            WriteLiteral(@"re.$className !== 'Ext.data.BufferedStore') record.reject();

                }
            }
        };
        var selectedCellClick = function (grid, td, columnIndex, record, tr, rowIndex, e, eOpts) {
            //remember to change - it must be column number (first has 0)
            if (columnIndex == 0) {
                if (record.data.selected) {
                    $(td).children('div').children('div').addClass('x-grid-checkcolumn-checked');
                }
                else {
                    $(td).children('div').children('div').removeClass('x-grid-checkcolumn-checked');
                }
            }
        };

        teachersGrid.on('cellclick', function (grid, td, columnIndex, record, tr, rowIndex, e, eOpts) {
            selectableCellClick(grid, td, columnIndex, record, tr, rowIndex, e, eOpts, selectedTeachersGrid);
        });
        
        selectedTeachersGrid.on('cellclick', selectedCellClick);

        var items = [
            gridPanel
        ];
");
            WriteLiteral("\r\n        Urfu.createViewport(\'border\', items);\r\n\r\n    });\r\n</script>\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Urfu.Its.Web.DataContext.MUPCompetitionGroup> Html { get; private set; }
    }
}
#pragma warning restore 1591
