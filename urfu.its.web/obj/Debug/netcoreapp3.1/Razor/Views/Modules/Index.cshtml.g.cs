#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d4099eeb5546be9fa4f9ff233d53039432d2ff10"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Modules_Index), @"mvc.1.0.view", @"/Views/Modules/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml"
using Urfu.Its.Web.Model.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d4099eeb5546be9fa4f9ff233d53039432d2ff10", @"/Views/Modules/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Modules_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml"
  
    ViewBag.Title = "Модули";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

    var canManageWorkingPrograms = User.IsInRole(ItsRoles.WorkingProgramManager);
    var canViewWorkingPrograms = User.IsInRole(ItsRoles.WorkingProgramView);
    var showWorkingPrograms = canViewWorkingPrograms || canManageWorkingPrograms;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script");
                BeginWriteAttribute("src", " src=\"", 430, "\"", 492, 1);
#nullable restore
#line 14 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml"
WriteAttributeValue("", 436, Url.Content("~/Scripts/VersionedDocs/versionedDocs.js"), 436, 56, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(@"></script>

    <script type=""text/javascript"">
        Ext.onReady(function () {
            Ext.tip.QuickTipManager.init();
            var store = Ext.create(""Ext.data.BufferedStore"",
                {
                    fields: [
                        ""id"", ""title"", ""shortTitle"", ""coordinator"", ""type"", ""competence"", ""testUnits"", ""priority"", ""state"",
                        ""approvedDate"", ""comment"", ""file"", ""specialities""
                    ],
                    autoLoad: true,
                    pageSize: 300,
                    remoteSort: true,
                    remoteFilter: true,
                    proxy: {
                        type: 'ajax',
                        url: '/Modules/Index',
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });

            Ext.define('comboMode");
                WriteLiteral(@"l',
                {
                    extend: 'Ext.data.Model',
                    fields:
                    [
                        ""Id"", ""Name""
                    ]
                });


            var specialitiesStore = Ext.create('Ext.data.Store',
                {
                    model: 'comboModel',
                    data: []
                    //proxy:
                    //{
                    //    type: 'ajax',
                    //    url: '/Minors/Semesters',
                    //    reader: { type: 'json', root: 'data' }
                    //},

                });

            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""ModulesFilters"") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {
            }
");
                WriteLiteral(@"            var filtersWnd = null;

            //Название модуля, Координатор, Тип
            var setFilters = function () {
                var settings = [
                    { property: 'title', value: filtersWnd.getComponent(""title"").getValue() },
                    { property: 'coordinator', value: filtersWnd.getComponent(""coordinator"").getValue() },
                    { property: 'specialities', value: filtersWnd.getComponent(""specialities"").getValue() },
                    { property: 'type', value: filtersWnd.getComponent(""type"").getValue() }
                ];
                store.setFilters(settings);
                localStorage.setItem(""ModulesFilters"", JSON.stringify(settings));
            };

            filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Фильтры"",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: false,
                    bodyPadding: 6,
            ");
                WriteLiteral(@"        defaults: {
                        xtype: 'textfield',
                        width: 500
                    },
                    items: [
                        { fieldLabel: ""Название модуля"", itemId: ""title"", value: prevSettings[""title""] },
                        { fieldLabel: ""Координатор"", itemId: ""coordinator"", value: prevSettings[""coordinator""] },
                        { fieldLabel: ""Направления"", itemId: ""specialities"", value: prevSettings[""specialities""] },
                        { fieldLabel: ""Тип"", itemId: ""type"", value: prevSettings[""type""] }
                        //{
                        //    fieldLabel: ""Семестр"",
                        //    itemId: ""semester"",
                        //    value: prevSettings[""semester""],
                        //    xtype: ""combobox"",
                        //    store: store,
                        //    valueField: 'Id',
                        //    displayField: 'Name',
                        //    queryMode: '");
                WriteLiteral(@"remote'
                        //}
                    ],
                    buttons: [
                        {
                            text: ""OK"",
                            handler: function () {
                                setFilters();
                                filtersWnd.hide();
                            }
                        },
                        {
                            text: ""Отмена"",
                            handler: function () { filtersWnd.hide(); }
                        }
                    ]
                });

            setFilters();

            var tpl =
                '<a href=""{file}"">Файл</a> | <a href=""/Modules/Edit?id={id}"">Изменить</a> | <a href=""/Modules/Details?id={id}"">Просмотреть</a>\
                | <a href=""/Modules/Delete?id={id}"">Удалить</a> | <a href=""/Modules/DisciplinesByModule?moduleId={id}"">Дисциплины</a>';

            var gridPanel = Ext.create('Ext.grid.Panel',
                {
                    r");
                WriteLiteral(@"egion: 'center',
                    store: store,
                    tbar: [
                        {
                            xtype: 'button',
                            text: 'Фильтры...',
                            handler: function () { filtersWnd.show(); }
                        },
                        {
                            xtype: 'button',
                            text: ""Отменить фильтры"",
                            handler: function () {
                                store.clearFilter();
                                localStorage.setItem(""ModulesFilters"", JSON.stringify([]));
                            }
                        }
                    ],
                    loadMask: true,
                    columnLines: true,
                    plugins: [
                        {
                            ptype: ""rowexpander"",
                            rowBodyTpl: new Ext.XTemplate(
                                '<p><b>Компетенции: </b>{compet");
                WriteLiteral(@"ence}</p>',
                                '<p><b>Зачётные единицы: </b>{testUnits}</p>',
                                '<p><b>Приоритет: </b>{priority}</p>',
                                '<p><b>Состояние: </b>{state}</p>',
                                '<p><b>Дата утверждения: </b>{approvedDate}</p>',
                                '<p><b>Комментарий: </b>{comment}</p>',
                                '<p><b>Номер: </b>{number}</p>',
                                '<p><b>Аннотация: </b>{annotation}</p>',
                            )
                        }
                    ],
                    columns: [
                        { xtype: 'rownumberer', width: 50 },
                        {
                            header: 'Направления',
                            align: 'left',
                            dataIndex: 'specialities',
                            sortable: false,
                            width: 150,
                            renderer: Urfu.renders.h");
                WriteLiteral(@"tmlEncodeWithToolTip
                        },
                        {
                            header: 'Название модуля',
                            dataIndex: 'title',
                            width: 400,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Короткое название модуля',
                            dataIndex: 'shortTitle',
                            width: 400,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Координатор',
                            align: 'left',
                            dataIndex: 'coordinator',
                            width: 400,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Тип',
                  ");
                WriteLiteral("          align: \'center\',\r\n                            dataIndex: \'type\',\r\n                            width: 150,\r\n                            renderer: Ext.util.Format.htmlEncode\r\n                        },\r\n");
#nullable restore
#line 206 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml"
                 if (canViewWorkingPrograms)
                {
                    

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
                        {
                            xtype: 'actioncolumn',
                            header: 'Рабочая программа',
                            region: 'center',
                            width: 200,
                            defaults: {
                                metadata: {
                                    attr: 'style=""padding-left:10px;width:auto;""'
                                }
                            },
                            items: [{
                                icon: '");
#nullable restore
#line 220 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml"
                                  Write(Url.Content("~/Content/Images/document-go.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                iconCls: 'icon-padding',
                                text: 'Изменить',
                                tooltip: 'Изменить',
                                // TODO что-то не работает. Нужно скрыть иконку, если РП для типа документа не формируется, пока алерт в обработчике
                                /*getClass: function (grid, metadata, r, rowIndex, colIndex, store) {
                                    var rec = grid.getStore().getAt(rowIndex);
                                    if (!rec.get('documentKind')) {
                                        return ""x-hide-display"";
                                    }
                                    return ""x-grid-center-icon"";;
                                },*/
                                handler: function(grid, rowIndex, colIndex) {
                                    var rec = grid.getStore().getAt(rowIndex);
                                    if (!rec.get('documentKind'))
                   ");
                WriteLiteral(@"                     alert('Для данного типа модуля РП не формируется');
                                    var formPanel = Ext.create('VersionedDocs.Selector', {
                                        documentKind: rec.get('documentKind'),
                                        linkedEntityId: rec.get('id'),
                                        canView: ");
#nullable restore
#line 239 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml"
                                             Write(canViewWorkingPrograms ? "true" : "false");

#line default
#line hidden
#nullable disable
                WriteLiteral(",\r\n                                        canEdit: ");
#nullable restore
#line 240 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml"
                                             Write(canManageWorkingPrograms ? "true" : "false");

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n                                    });\r\n                                    formPanel.show();\r\n                                }\r\n                            }]\r\n                        },");
#nullable restore
#line 245 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\Index.cshtml"
                                 
                }

#line default
#line hidden
#nullable disable
                WriteLiteral(@"                    {
                        xtype: 'templatecolumn',
                        sortable: false,
                        tpl: tpl,
                        width: 420
                    }
                ]
            });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
