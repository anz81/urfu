#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7b80ef3ccc6a225e0471a2101ce44bf96d13743e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Modules_DisciplinesByModule), @"mvc.1.0.view", @"/Views/Modules/DisciplinesByModule.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
using Urfu.Its.Web.Model.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7b80ef3ccc6a225e0471a2101ce44bf96d13743e", @"/Views/Modules/DisciplinesByModule.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Modules_DisciplinesByModule : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Urfu.Its.Web.DataContext.Module>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
  
    ViewBag.Title = "Дисциплины модуля " + Model.title;
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

    var canManageWorkingPrograms = User.IsInRole(ItsRoles.WorkingProgramManager);
    var canViewWorkingPrograms = User.IsInRole(ItsRoles.WorkingProgramView);
    var showWorkingPrograms = canViewWorkingPrograms || canManageWorkingPrograms;

#line default
#line hidden
#nullable disable
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script");
                BeginWriteAttribute("src", " src=\"", 494, "\"", 556, 1);
#nullable restore
#line 14 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
WriteAttributeValue("", 500, Url.Content("~/Scripts/VersionedDocs/versionedDocs.js"), 500, 56, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral("></script>\r\n\r\n    <script type=\"text/javascript\">\r\n        var moduleId = \'");
#nullable restore
#line 17 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
                   Write(Model.uuid);

#line default
#line hidden
#nullable disable
                WriteLiteral("\';\r\n        var canEditWorkingPrograms = ");
#nullable restore
#line 18 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
                                 Write(canManageWorkingPrograms ? "true" : "false");

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();
            disciplinesStore = Ext.create(""Ext.data.Store"",
                {
                    fields: [""id"", ""title"", ""section"", ""testUnits"", ""file"", ""WorkingProgramResponsiblePersons""],
                    autoLoad: true,
                    proxy: {
                        type: 'ajax',
                        url: '/Modules/DisciplinesByModule?moduleId=");
#nullable restore
#line 28 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
                                                               Write(Model.uuid);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                        reader: {
                            type: 'json'
                        }
                    }

                });

            Ext.define('comboModel',
                {
                    extend: 'Ext.data.Model',
                    fields: [""Id"", ""Name""]
                });

            var gridPanel = Ext.create('Ext.grid.Panel',
                {
                    region: 'center',
                    store: disciplinesStore,
                    loadMask: true,
                    columns: [
                        { xtype: 'rownumberer', width: 50 },
                        {
                            header: 'Название дисциплины',
                            dataIndex: 'title',
                            width: 500,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Тип',
                            dataIndex: 'section',
   ");
                WriteLiteral(@"                         width: 210,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Зачётные единицы',
                            align: 'center',
                            dataIndex: 'testUnits',
                            width: 180,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            xtype: 'templatecolumn',
                            tpl: ' <a href=""{file}"">Файл</a>',
                            width: 220
                        },
");
#nullable restore
#line 73 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
                         if (showWorkingPrograms)
                        {
                            

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
                                {
                                    xtype: 'actioncolumn',
                                    header: 'Рабочая программа',
                                    region: 'center',
                                    width: 200,
                                    defaults: {
                                        metadata: {
                                            attr: 'style=""padding-left:10px;width:auto;""'
                                        }
                                    },
                                    items: [
                                        {
                                            icon: '");
#nullable restore
#line 88 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
                                              Write(Url.Content("~/Content/Images/document-go.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                            iconCls: 'icon-padding',
                                            text: 'Изменить',
                                            tooltip: 'Изменить',
                                            handler: function(grid, rowIndex, colIndex) {
                                                var rec = grid.getStore().getAt(rowIndex);
                                                var formPanel = Ext.create('VersionedDocs.Selector',
                                                    {
                                                        documentKind: ");
#nullable restore
#line 96 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
                                                                  Write((int) DocumentKind.Discipline);

#line default
#line hidden
#nullable disable
                WriteLiteral(",\r\n                                                        linkedEntityId: rec.get(\'uid\'),\r\n                                                        canView: ");
#nullable restore
#line 98 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
                                                             Write(canViewWorkingPrograms ? "true" : "false");

#line default
#line hidden
#nullable disable
                WriteLiteral(@",
                                                        canEdit: canEditWorkingPrograms
                                                    });
                                                formPanel.show();
                                            }
                                        }, {
                                            icon: '");
#nullable restore
#line 104 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
                                              Write(Url.Content("~/Content/Images/teacher.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                            getClass: function(v, meta, rec) {          // Or return a class from a function
                                                if (!canEditWorkingPrograms)
                                                    return 'x-hidden';
                                                return 'icon-padding';
                                            },
                                            text: 'Назначить разработчиков РП',
                                            tooltip: 'Назначить разработчиков РП',
                                            handler: function(grid, rowIndex, colIndex) {
                                                var rec = grid.getStore().getAt(rowIndex);
                                                var formPanel = createWpResponsiblePersonsSelectorWindow(rec);
                                                formPanel.show();
                                            }
                                        }
       ");
                WriteLiteral("                             ]\r\n                                }\r\n                            ");
#nullable restore
#line 120 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Modules\DisciplinesByModule.cshtml"
                                   
                        }

#line default
#line hidden
#nullable disable
                WriteLiteral(@",
                        {
                            header: 'Пользователи',
                            dataIndex: 'users',
                            width: 500,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                    ]
                });

            Urfu.createViewport('border', [gridPanel]);
        });

        function createWpResponsiblePersonsSelectorWindow(disciplineRecord) {
            function debounce(func, delay) {
                var inDebounce;
                return function() {
                    var context = this;
                    var args = arguments;
                    clearTimeout(inDebounce);
                    inDebounce = setTimeout(function() { func.apply(context, args) }, delay);
                }
            }
            
            var debounceFilter = debounce(function(userStore, value) {
                userStore.clearFilter();
                userStore.filterBy(function(r) {");
                WriteLiteral(@"
                    var split = value.split(' ').filter(function(i) { return i; });
                    var r1 = new RegExp(Ext.String.escapeRegex(value), ""i"");
                    return (r.get('Fio') || '').match(r1) ||
                        split.every(function(s) {
                            var r2 = new RegExp(Ext.String.escapeRegex(s), ""i"");
                            return (r.get('LastName') || '').match(r2) ||
                                (r.get('FirstName') || '').match(r2) ||
                                (r.get('Patronymic') || '').match(r2);
                        });
                });
            }, 300);

            var window = new Ext.window.Window({
                closeAction: 'destroy',
                viewModel: {
                    stores: {
                        persons: {
                            autoLoad: true,
                            proxy: {
                                type: 'ajax',
                                url: '/WorkingProgra");
                WriteLiteral(@"ms/GetWorkingProgramResponsiblePersons',
                                extraParams: {
                                    disciplineId: disciplineRecord.get('uid'),
                                    moduleId: moduleId
                                }
                            },
                            listeners: {
                                load: function (_, records) {
                                    var users = records.filter(function(r) {
                                        return r.get('IsSelected');
                                    });
                                    var mainGrid = Ext.ComponentQuery.query('#mainGrid')[0];
                                    mainGrid.getSelectionModel().select(users);
                                }
                            }
                        },
                        selectedPersons: {}
                    }
                },
                title: 'Выбор пользователей',
                width: 600,
     ");
                WriteLiteral(@"           height: 600,
                layout: { type: 'border' },
                tbar: [
                    {
                        xtype: 'textfield',
                        fieldLabel: 'Поиск',
                        width: 400,
                        listeners: {
                            change: function(field, newValue) {
                                var store = this.up('window').down('#mainGrid').getStore();
                                debounceFilter(store, newValue);
                            }
                        }
                    }
                ],
                items: [
                    {
                        xtype: 'grid',
                        reference: 'mainGrid',
                        itemId: 'mainGrid',
                        region: 'center',
                        flex: 1,
                        loadMask: true,
                        bind: {
                            store: '{persons}'
                        },
      ");
                WriteLiteral(@"                  selModel: Ext.create('Ext.selection.CheckboxModel',
                            {
                                listeners: {
                                    selectionchange: function(grid, selection) {
                                        var vm = this.view.lookupViewModel();
                                        vm.get('selectedPersons').setData(selection);
                                    }
                                },
                                checkOnly: true,
                                allowDeselect: false
                            }),
                        columns: [
                            {
                                dataIndex: 'Fio',
                                text: 'ФИО',
                                flex: 1
                            }
                        ]
                    }, {
                        xtype: 'grid',
                        region: 'south',
                        title: 'Выбранные пол");
                WriteLiteral(@"ьзователи',
                        maxHeight: 244,
                        minHeight: 144,
                        bind: {
                            store: '{selectedPersons}'
                        },
                        columns: [
                            {
                                dataIndex: 'Fio',
                                text: 'ФИО',
                                flex: 1
                            }, {
                                xtype: 'actioncolumn',
                                width: 50,
                                items: [
                                    {
                                        icon: '/Content/Images/remove.png',
                                        tooltip: 'Удалить',
                                        handler: function(grid, rowIndex, colIndex, item, e, record) {
                                            if (confirm('Вы действительно желаете удалить запись из списка?')) {
                                    ");
                WriteLiteral(@"            this.up('window').down('#mainGrid').getSelectionModel()
                                                    .deselect(record);
                                            }
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                ],
                buttons: [
                    {
                        text: 'ОК',
                        handler: function () {
                            var window = this.up('window');
                            var selection = window.down('#mainGrid').getSelection();
                            Ext.Ajax.request({
                                url: '/WorkingPrograms/SetDisciplineWorkingProgramResponsiblePersons',
                                method: 'POST',
                                params: {
                                    disciplineId: disciplineRecord.get('uid'),
           ");
                WriteLiteral(@"                         moduleId: moduleId,
                                    userIds: selection.map(function (r) { return r.get('Id'); })
                                },
                                success: function () {
                                    disciplinesStore.reload();
                                    window.close();

                                },
                                failure: function(d) {
                                    console.error(d.responseText);
                                    alert(d.responseText);
                                }
                            });                                                       
                        }
                    }, {
                        text: 'Отмена',
                        handler: function() {
                            this.up('window').close();
                        }
                    }
                ]
            });
            return window;
        }
    ");
                WriteLiteral("</script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Urfu.Its.Web.DataContext.Module> Html { get; private set; }
    }
}
#pragma warning restore 1591
