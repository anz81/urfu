#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ad47a8155ea03fecd7479eb280f0482d4e8a189c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Competence_Index), @"mvc.1.0.view", @"/Views/Competence/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ad47a8155ea03fecd7479eb280f0482d4e8a189c", @"/Views/Competence/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Competence_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Urfu.Its.Web.Controllers.MinorReportVM>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
  
    ViewBag.Title = "Справочник Компетенции";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    .no-padding .x-grid-cell-inner {
        padding: 0
    }

    .x-form-item-default.x-item-disabled {
        filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
        opacity: 1;
    }

    .x-item-disabled,
    .x-item-disabled * {
        cursor: default;
        pointer-events: none;
        color: rgb(90,90,97)
    }
</style>

");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
<script type=""text/javascript"">

    Ext.onReady(function() {
        Ext.Ajax.setTimeout(120000);
        Ext.tip.QuickTipManager.init();

        Ext.define('ComboBoxModel',
        {
            extend: 'Ext.data.Model',
            fields:
            [
                { type: 'string', name: 'Id' },
                { type: 'string', name: 'Name' }
            ]
        });

        var localStorageName = ""CompentencesFilters"";
        
        function parseJson(json) {
            var data = JSON.parse(json.replace(/&quot;/g, '""'));
            return data;
        }

        var competencesWithoutProfile = parseJson('");
#nullable restore
#line 50 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                              Write(ViewBag.CompetencesWithoutProfile);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n\r\n        var dataAreaEducations = parseJson(\'");
#nullable restore
#line 52 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                       Write(ViewBag.AreaEducations);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n        var areaEducationStore = Ext.create(\"Ext.data.Store\",\r\n            {\r\n                data: dataAreaEducations\r\n            });\r\n\r\n        var dataCompetenceGroups = parseJson(\'");
#nullable restore
#line 58 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                         Write(ViewBag.CompetenceGroups);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n        var competenceGroupsStore = Ext.create(\"Ext.data.Store\",\r\n            {\r\n                data: dataCompetenceGroups\r\n            });\r\n\r\n        var dataStandards = parseJson(\'");
#nullable restore
#line 64 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                  Write(ViewBag.Standards);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n        var standardsStore = Ext.create(\"Ext.data.Store\",\r\n            {\r\n                data: dataStandards\r\n            });\r\n\r\n        var dataTypes = parseJson(\'");
#nullable restore
#line 70 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                              Write(ViewBag.Types);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n        var typesStore = Ext.create(\"Ext.data.Store\",\r\n            {\r\n                data: dataTypes\r\n            });\r\n\r\n        var dataQualifications = parseJson(\'");
#nullable restore
#line 76 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                       Write(ViewBag.Qualifications);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"');
        var qualificationStore = Ext.create(""Ext.data.Store"",
            {
                data: dataQualifications
            });

        var savedFilters = getSavedFiltersConfig();

        var store = Ext.create(""Ext.data.Store"",
        {
            idProperty: 'Id',
            fields: [
                ""Id"", ""Code"", ""Type"", ""TypeDesc"", ""Okso"", ""OksoAndTitle"", ""Content"", ""Standard"", ""Profile"", ""ProfileId"",""Division""
            ],
            autoLoad: false,
            //pageSize: 300,
            remoteSort: false,
            remoteFilter: true,

            proxy: {
                type: 'ajax',
                url: window.location.pathname,
                reader: {
                    type: 'json',
                    rootProperty: 'data',
                    totalProperty: 'total'
                },
                timeout: 120000
            }
            });

        var filtersWnd = null;

        function getSavedFiltersConfig() {
            var prev");
                WriteLiteral(@"Setting = [];
            var savedFilters = {};
            try {
                prevSetting = JSON.parse(localStorage.getItem(localStorageName)) || [];
            } catch (err) {

            };
            savedFilters['OksoAndTitle'] = prevSetting.find(x => x.property === 'OksoAndTitle') ? prevSetting.find(x => x.property === 'OksoAndTitle').value : '';
            savedFilters['Standard'] = prevSetting.find(x => x.property === 'Standard') ? prevSetting.find(x => x.property === 'Standard').value : '';
            savedFilters['Division'] = prevSetting.find(x => x.property === 'Division') ? prevSetting.find(x => x.property === 'Division').value : '';
            savedFilters['ProfileAndTitle'] = prevSetting.find(x => x.property === 'ProfileAndTitle') ? prevSetting.find(x => x.property === 'ProfileAndTitle').value : '';
            savedFilters['AreaEducation'] = prevSetting.find(x => x.property === 'AreaEducation') ? prevSetting.find(x => x.property === 'AreaEducation').value : '';
          ");
                WriteLiteral(@"  savedFilters['Type'] = prevSetting.find(x => x.property === 'Type') ? prevSetting.find(x => x.property === 'Type').value : '';

            return savedFilters;
        };

        function loadStore() {
            store.proxy.setUrl(window.location.pathname +
                '?filter=' +
                encodeURIComponent(localStorage.getItem(localStorageName)));
            store.load();
        }
        function setFilters() {
            var settings = [
                { property: 'OksoAndTitle', value: filtersWnd.getComponent(""Okso"").getValue() },
                { property: 'Standard', value: filtersWnd.getComponent(""Standart"").getValue() == '' ? null : filtersWnd.getComponent(""Standart"").getValue(), verb: 'Equals' },
                { property: 'Division', value: filtersWnd.getComponent(""divisionNameFilter"").getValue() == '' ? null : filtersWnd.getComponent(""divisionNameFilter"").getValue() },
                { property: 'ProfileAndTitle', value: filtersWnd.getComponent(""profileFilt");
                WriteLiteral(@"er"").getValue() },
                { property: 'AreaEducation', value: filtersWnd.getComponent(""AreaEducationFilter"").getValue() },
                { property: 'Type', value: filtersWnd.getComponent(""Type"").getValue(), verb: 'Equals' },
            ];
            localStorage.setItem(localStorageName, JSON.stringify(settings));
            loadStore();
        };

        filtersWnd = Ext.create('Ext.window.Window',
        {
            title: ""Фильтры"",
            closeAction: 'hide',
            resizable: false,
            autoHeight: true,
            bodyPadding: 6,
            defaults: {
                xtype: 'textfield',
                width: 500
            },
            items: [
                { fieldLabel: ""Направление"", labelWidth: 125, itemId: ""Okso"", value: savedFilters[""OksoAndTitle""] },
                {
                    fieldLabel: 'Образовательная программа',
                    labelWidth : 125,
                    itemId: 'profileFilter',
                ");
                WriteLiteral(@"    value: savedFilters['ProfileAndTitle']
                },
                {
                    fieldLabel: 'Название формирующего подразделения',
                    labelWidth: 125,
                    itemId: 'divisionNameFilter',
                    value: savedFilters['Division']
                },
                {
                    xtype: 'combobox',
                    itemId: 'Standart',
                    fieldLabel: ""Стандарт ВО"",
                    labelWidth: 125,
                    store: standardsStore,
                    value: savedFilters[""Standard""],
                    valueField: 'Standard',
                    displayField: 'Standard',
                    queryMode: 'local',
                    editable: true,
                    disableKeyFilter: false
                },
                {
                    xtype: 'combobox',
                    itemId: 'AreaEducationFilter',
                    fieldLabel: ""Область образования"",
                    l");
                WriteLiteral(@"abelWidth: 125,
                    store: areaEducationStore,
                    value: savedFilters[""AreaEducation""],
                    valueField: 'Name',
                    displayField: 'Name',
                    queryMode: 'local',
                    disableKeyFilter: false
                },
                {
                    xtype: 'combobox',
                    itemId: 'Type',
                    fieldLabel: 'Тип Компетенции',
                    store: typesStore,
                    allowBlank: false,
                    value: savedFilters[""Type""],
                    labelWidth: 125,
                    queryMode: 'local',
                    displayField: 'Name',
                    valueField: 'Name',
                    tpl: Ext.create('Ext.XTemplate',
                        '<tpl for=""."">',
                        '<div class=""x-boundlist-item"" style=""border-bottom:1px solid #f0f0f0;"">',
                        '<div><b>{Name}</b> {Description}</div>' +
     ");
                WriteLiteral(@"                   '</div>',
                        '</tpl>'
                    )
                }
            ],
            buttons: [
                {
                    text: ""OK"",
                    handler: function() {
                        setFilters();
                        filtersWnd.hide();
                    }
                },
                {
                    text: ""Отмена"",
                    handler: function() { filtersWnd.hide(); }
                }
            ]
        });

        setFilters();

        var id = 'CompetencesGrid';

        var gridPanel = Ext.create('Ext.grid.Panel',
        {
            multiSelect: true,
            region: 'center',
            store: store,
            loadMask: true,
            columnLines: true,
            id: id,
            tbar: [
                {
                    xtype: 'button',
                    text: 'Добавить',
                    hidden: '");
#nullable restore
#line 247 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                    handler: function () { createRecordWindow(store).show(); }
                }, '-',
                {
                    xtype: 'button',
                    text: 'Фильтры...',
                    handler: function() { filtersWnd.show(); }
                },
                {
                    xtype: 'button',
                    text: ""Отменить фильтры"",
                    handler: function() {
                        localStorage.setItem(localStorageName, ""[]"");
                        loadStore();
                    }
                }
            ],
            columns: [
                { xtype: 'rownumberer', width: 50 },
                {
                    header: 'Код',
                    dataIndex: 'Code',
                    width: 100,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Содержание',
                    dataIndex: 'Content',
           ");
                WriteLiteral(@"         width: 800,
                    renderer: Urfu.renders.htmlEncodeWithToolTip

                },
                {
                    header: 'Направление',
                    dataIndex: 'OksoAndTitle',
                    width: 200,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Образовательная программа',
                    dataIndex: 'ProfileAndTitle',
                    width: 200,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Формирующее подразделение',
                    dataIndex: 'Division',
                    width: 300,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Стандарт ВО',
                    dataIndex: 'Standard',
                    width: 130,
                    renderer: Urfu.renders.htmlEncodeWith");
                WriteLiteral(@"ToolTip
                },
                {
                    header: 'Область образования',
                    dataIndex: 'AreaEducation',
                    width: 200,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Группа компетенции',
                    dataIndex: 'CompetenceGroupName',
                    width: 200,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Квалификация',
                    dataIndex: 'QualificationName',
                    width: 200,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'РО',
                    dataIndex: 'EduResults',
                    width: 80,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    xtype: 'actioncolum");
                WriteLiteral("n\',\r\n                    resizable: false,\r\n                    sortable: false,\r\n                    width: 100,\r\n                    items: [\r\n                        {\r\n                            icon: \'");
#nullable restore
#line 334 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                              Write(Url.Content("/Content/Images/academicCap.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            tooltip: 'Результаты обучения',
                            iconCls: 'icon-padding-squareicon',
                            handler: function(grid, rowIndex, colIndex,item,e,record) {
                                var link = """);
#nullable restore
#line 338 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                       Write(Url.Action("EduResults"));

#line default
#line hidden
#nullable disable
                WriteLiteral("?id=\" + record.get(\'Id\');\r\n                                window.open(link, \'_blank\');\r\n                            }\r\n                        },\r\n                        {\r\n                            icon: \'");
#nullable restore
#line 343 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                              Write(Url.Content("/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                            tooltip: \'Редактировать\',\r\n                            iconCls: \'");
#nullable restore
#line 345 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                 Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'True' ? 'icon-padding' : '{ visibility: hidden }',
                            handler: function(grid, rowIndex, colIndex,item,e,record) {
                                createRecordWindow(store, record).show();
                            }
                        },{
                            icon: '");
#nullable restore
#line 350 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                              Write(Url.Content("/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                            tooltip: \'Удалить\',\r\n                            iconCls: \'");
#nullable restore
#line 352 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                 Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'True' ? 'icon-padding' : '{ visibility: hidden }',
                            handler: function(grid, rowIndex, colIndex, item, e, record) {

                                if (confirm('Вы действительно желаете удалить запись?')) {
                                    Ext.Ajax.request({
                                        method: 'GET',
                                        url: '");
#nullable restore
#line 358 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                         Write(Url.Action("Delete"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                        success: function (response) {
                                            try {
                                                store.remove(record);
                                                Ext.getCmp(id).getView().refresh();
                                            }
                                            catch{
                                                store.load();
                                            }
                                        },
                                        failure: function(d) {
                                            if (d.error)
                                                alert(d.error);
                                            console.error(d);
                                        },
                                        params: { id: record.get('Id') }
                                    });
                                }
                            }
             ");
                WriteLiteral(@"           }
                    ]
                }
            ],
        });
        d = null;
        var items = [
            gridPanel
        ];

        Urfu.createViewport('border', items);
        
        function required(value) {
            return (value != undefined && value.length > 0 && parseInt(value, 10) > 0) ? true : ""Поле не может быть пустым или равно 0"";
        }

        function createRecordWindow(store, record) {

            var readOnlyArea = record ? competencesWithoutProfile.includes(record.data.Type) && record.data.Standard === ""ФГОС ВО 3++"" : false;
            
            var numberHidden = record ? record.data.Code === 'ПК-М' : false;

            return Ext.create('Ext.window.Window',
            {
                title: record ? 'Редактирование компетенции' : 'Добавление компетенции',
                resizable: true,
               // autoHeight: true,
                minHeight: 470,
                maxHeight: 550,
                bodyPadding");
                WriteLiteral(@": 6,
                x: 100,
                y:100,
                modal: true,
                name: 'editForm',
                scrollable: true,
                width: 650,
                viewModel: {
                    data: Ext.apply({}, record ? record.data : {}),
                    stores: {

                        directions: {},
                        profiles: {},
                        types: {}

                    }
                },
                items: {
                    xtype: 'form',
                    id: 'form',
                    layout: {
                        type: 'vbox',
                        //align: 'stretch'
                    },
                    defaults: {
                        xtype: 'textfield',
                        labelWidth:
                            170,
                        width:
                            600
                    },
                    items: [
                        {
                    ");
                WriteLiteral(@"        fieldLabel: 'Идентификатор',
                            name: 'id',
                            bind: '{id}',
                            readOnly: true,
                            hidden: true,
                        },
                        {
                            xtype: 'combobox',
                            fieldLabel: 'Стандарт',
                            name: 'Standard',
                            width: 350,
                            bind: {
                                value: '{Standard}'
                            },
                            store: standardsStore,
                            editable: false,
                            queryMode: 'local',
                            readOnly: record,
                            disabled: record,
                            displayField: 'Standard',
                            valueField: 'Standard',
                            listeners: {
                                change: function (t, newV");
                WriteLiteral(@"alue, oldValue) {
                                    var form = this.up('window').down('form');

                                    try {
                                        var standardData = standardsStore.data.items.find(s => s.data.Standard == newValue).data;

                                        this.lookupViewModel().getStore('directions').setData(standardData.Directions);
                                        this.lookupViewModel().getStore('profiles').setData([]);
                                        this.lookupViewModel().getStore('types').setData(standardData.Types);

                                        form.items.items.find(p => p.name == ""DirectionId"").setValue('');
                                        form.items.items.find(p => p.name == ""ProfileId"").setValue('');
                                        form.items.items.find(p => p.name == ""Type"").setValue('');
                                    }
                                    catch{
                    ");
                WriteLiteral(@"                    this.lookupViewModel().getStore('directions').setData([]);
                                        this.lookupViewModel().getStore('profiles').setData([]);
                                        this.lookupViewModel().getStore('types').setData([]);
                                    }
                                    form.items.items.find(p => p.name == ""DirectionId"").setValue('');
                                    form.items.items.find(p => p.name == ""ProfileId"").setValue('');
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            name: 'DirectionId',
                            fieldLabel: 'Направление',
                            bind: {
                                store: '{directions}',
                                value: '{DirectionId}'
                            },
                            editable: true,
       ");
                WriteLiteral(@"                     readOnly: record,
                            disabled: record,
                            queryMode: 'local',
                            displayField: 'Name',
                            valueField: 'Id',
                            listeners: {
                                change: function (t, newValue, oldValue) {
                                    var form = this.up('window').down('form');

                                    try {
                                        var directionData = this.lookupViewModel().getStore('directions').data.items.find(d => d.data.Id == newValue).data;

                                        this.lookupViewModel().getStore('profiles').setData(directionData.Profiles);

                                        form.items.items.find(p => p.name == ""AreaEducationId"").setValue(directionData.AreaEducationId);
                                        form.items.items.find(p => p.name == ""AreaEducationId"").setDisabled(true);

            ");
                WriteLiteral(@"                        }
                                    catch{
                                        this.lookupViewModel().getStore('profiles').setData([]);
                                        form.items.items.find(p => p.name == ""AreaEducationId"").setValue();
                                    }
                                    form.items.items.find(p => p.name == ""ProfileId"").setValue('');

                                    form.items.items.find(p => p.name == ""CompetenceGroupId"").setValue();

                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            name: 'ProfileId',
                            fieldLabel: 'Образовательная программа',
                            bind: {
                                store: '{profiles}',
                                value: '{ProfileId}'
                            },
                            rea");
                WriteLiteral(@"dOnly: record,
                            disabled: record,
                            editable: true,
                            queryMode: 'local',
                            displayField: 'Name',
                            valueField: 'Id',
                            listeners: {
                                change: function (t, newValue) {
                                    var form = this.up('window').down('form');
                                    try {
                                        var profileData = this.lookupViewModel().getStore('profiles').data.items.find(d => d.data.Id == newValue).data;

                                        form.items.items.find(p => p.name == 'divisionContainer').items.items.find(p => p.name == 'division').setText(profileData.Division);
                                    }
                                    catch{
                                        form.items.items.find(p => p.name == 'divisionContainer').items.items.find(p => p.name");
                WriteLiteral(@" == 'division').setText('');
                                    }
                                }
                            }
                        },
                        {
                            xtype: 'container',
                            name: 'divisionContainer',
                            items: [
                                {
                                    xtype: 'label',
                                    text: 'Подразделение',
                                    margin: '0 5 0 0',
                                    style: 'font-weight: normal;'
                                },
                                {
                                    xtype: 'label',
                                    name: 'division',
                                    bind: { text: '{Division}' },
                                    style: 'font-weight: normal;'
                                }
                            ]
                        },
             ");
                WriteLiteral(@"           {
                            xtype: 'combobox',
                            name: 'Type',
                            fieldLabel: 'Тип Компетенции',
                            store: typesStore,
                            bind: {
                                store: '{types}',
                                value: '{Type}'
                            },
                            allowBlank: false,
                            readOnly: record,
                            editable: false,
                            disabled: record,
                            queryMode: 'local',
                            displayField: 'Name',
                            valueField: 'Name',
                            tpl: Ext.create('Ext.XTemplate',
                                '<tpl for=""."">',
                                '<div class=""x-boundlist-item"" style=""border-bottom:1px solid #f0f0f0;"">',
                                '<div><b>{Name}</b> {Description}</div>' +
         ");
                WriteLiteral(@"                       '</div>',
                                '</tpl>'
                            ),
                            listeners: {
                                change: function (t, newValue) {
                                    var form = this.up('window').down('form');

                                    var competenceType = this.getValue();
                                    var withoutProfile = competencesWithoutProfile.includes(competenceType);
                                    var standard = form.items.items.find(p => p.name == ""Standard"").getValue();
                                    if (withoutProfile)
                                    {
                                        form.items.items.find(p => p.name == ""ProfileId"").setValue();

                                        if (standard !== ""ФГОС ВО 3++"") {
                                            form.items.items.find(p => p.name == ""DirectionId"").setValue();
                                           ");
                WriteLiteral(@" form.items.items.find(p => p.name == ""AreaEducationId"").setDisabled(false);
                                        }
                                    }
                                    

                                    form.items.items.find(p => p.name == ""DirectionId"").setDisabled(withoutProfile && standard !== ""ФГОС ВО 3++"" || record);
                                    form.items.items.find(p => p.name == ""ProfileId"").setDisabled(withoutProfile || record);

                                    form.items.items.find(p => p.name == ""QualificationName"").setHidden(!withoutProfile || withoutProfile && standard === ""ФГОС ВО 3++"");
                                    form.items.items.find(p => p.name == ""QualificationName"").setValue();

                                    form.items.items.find(p => p.name == ""CompetenceGroupId"").setHidden(!withoutProfile);
                                    form.items.items.find(p => p.name == ""CompetenceGroupId"").setValue();

                          ");
                WriteLiteral(@"      }
                            }
                        },
                        {
                            xtype: 'combobox',
                            name: 'QualificationName',
                            fieldLabel: 'Квалификация',
                            readOnly: record,
                            bind: '{QualificationName}',
                            disabled: record,
                            editable: false,
                            queryMode: 'local',
                            displayField: 'Name',
                            valueField: 'Name',
                            store: qualificationStore,
                            width: 400,
                            hidden: true
                        },
                        {
                            xtype: 'numberfield',
                            fieldLabel: 'Номер компетенции',
                            name: 'Order',
                            bind: '{Order}',
                        ");
                WriteLiteral(@"    hideTrigger: true,
                            hidden: numberHidden,
                            cls: 'field-margin',
                            minValue: 1,
                            validator: required,
                            width: 300
                        },
                        {
                            xtype: 'textarea',
                            fieldLabel: 'Описание',
                            maxLength: 4000,
                            name: 'Content',
                            bind: '{Content}',
                            allowBlank: false,
                            editable: true,
                        },
                        {
                            xtype: 'combobox',
                            name: 'AreaEducationId',
                            fieldLabel: 'Область образования',
                            bind: '{AreaEducationId}',
                            store: areaEducationStore,
                            editable: true,
");
                WriteLiteral(@"                            readOnly: readOnlyArea,
                            queryMode: 'local',
                            displayField: 'Name',
                            valueField: 'Id'
                        },
                        {
                            xtype: 'combobox',
                            name: 'CompetenceGroupId',
                            hidden: true,
                            fieldLabel: 'Группа компетенций',
                            store: competenceGroupsStore,
                            bind: '{CompetenceGroupId}',
                            editable: true,
                            queryMode: 'local',
                            displayField: 'Name',
                            valueField: 'Id'
                        }
                    ]
                },

                buttons: [
                    {
                        text: ""OK"",
                        formBind: true,
                        handler: function() {
    ");
                WriteLiteral(@"                        var wnd = this.up('window');
                            var form = wnd.down('form');
                            var data = form.getValues();
                            if (record)
                                data.id = record.get('Id');
                            if (/*record || */form.isValid()) {
                                Ext.Ajax.request({
                                    url: record ? '");
#nullable restore
#line 697 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                              Write(Url.Action("Edit"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' : \'");
#nullable restore
#line 697 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\Index.cshtml"
                                                                      Write(Url.Action("Create"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                    success: function (response) {
                                        var d = Ext.JSON.decode(response.responseText);
                                        if (!d.success) {
                                            if (d.errors) {
                                                var basicForm = form.getForm();
                                                for (var key in d.errors) {
                                                    if (d.errors.hasOwnProperty(key)) {
                                                        var field = basicForm.findField(key);
                                                        if (field)
                                                            field.markInvalid(d.errors[key]);
                                                    }
                                                }
                                            }
                                            if (d.error) {
                         ");
                WriteLiteral(@"                       Ext.MessageBox.show({
                                                    title: 'Ошибка',
                                                    msg: d.error,
                                                    buttons: Ext.MessageBox.OK
                                                });
                                            }
                                        } else {
                                            wnd.close();
                                            
                                            try {
                                                var recordIndex = store.findBy(r => r.data.Id === d.data.Id); 
                                                if (recordIndex == -1) {
                                                    store.insert(0, d.data);
                                                    recordIndex = 0;
                                                }
                                                else
                 ");
                WriteLiteral(@"                                   store.getAt(recordIndex).data = d.data;

                                                var recordData = store.getAt(recordIndex);

                                                Ext.getCmp(id).getView().scrollRowIntoView(recordIndex)

                                                Ext.getCmp(id).getView().focusRow(recordData);
                                                Ext.getCmp(id).getSelectionModel().select(recordData);

                                                Ext.getCmp(id).getView().refresh();
                                            }
                                            catch{
                                                store.load();
                                            }
                                        }
                                    },
                                    failure: function(d) {
                                        if (d.error)
                                            alert(d.");
                WriteLiteral(@"error);
                                        console.error(d);
                                    },
                                    jsonData: data
                                });
                            }
                            else {
                                Ext.MessageBox.show({
                                    title: 'Ошибка',
                                    msg: 'Не все поля заполнены корректно',
                                    buttons: Ext.MessageBox.OK
                                });
                            }
                        }
                    }, {
                        text: ""Отмена"",
                        handler: function() { this.up('window').close(); }
                    }
                ]
            });
        }

        });
</script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Urfu.Its.Web.Controllers.MinorReportVM>> Html { get; private set; }
    }
}
#pragma warning restore 1591
