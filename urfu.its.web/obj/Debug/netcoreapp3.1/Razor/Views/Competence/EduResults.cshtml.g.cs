#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b23388fc29838ee8542a2b9523997bf033fe0aca"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Competence_EduResults), @"mvc.1.0.view", @"/Views/Competence/EduResults.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
using Urfu.Its.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
using Urfu.Its.Web.DataContext;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b23388fc29838ee8542a2b9523997bf033fe0aca", @"/Views/Competence/EduResults.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Competence_EduResults : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
  
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("<style>\r\n\r\n    .its-medium {\r\n        width: 24px;\r\n        height: 24px;\r\n        margin-left: 5px;\r\n    }\r\n\r\n    .x-text-readonly .x-form-field {\r\n        color: #626060\r\n    }\r\n</style>\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
    var localStorageName = ""EduResults2Filter"";
    Ext.onReady(function() {
        Ext.tip.QuickTipManager.init();
        
        function required(value) {
            return (value != undefined && value.length > 0 && value.trim() != '') ? true : ""Поле не может быть пустым"";
        }
        
        var dataTypes = Urfu.parseJson('");
#nullable restore
#line 30 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                                   Write(ViewBag.Types);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n        var typesStore = Ext.create(\"Ext.data.Store\",\r\n            {\r\n                data: dataTypes\r\n            });\r\n\r\n        var dataKinds = Urfu.parseJson(\'");
#nullable restore
#line 36 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                                   Write(ViewBag.Kinds);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"');
        var kindsStore = Ext.create(""Ext.data.Store"",
            {
                data: dataKinds
            });
       
        var store = Ext.create(""Ext.data.Store"",
            {
                autoLoad: false,
                remoteSort: false,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: window.location.href,
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    }
                }
            });

        var prevSettings = {};
        try {
            var prevSettingString = JSON.parse(localStorage.getItem(localStorageName) || ""[]"");

            for (var i = 0; i < prevSettingString.length; i++) {
                prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
            }
        } catch (err) {
        }
        var filtersWnd = null;

        var setFilters = function() {");
                WriteLiteral(@"
            var settings = [
                { property: 'EduResultKindId', value: filtersWnd.getComponent(""EduResultKindId"").getValue() },
                { property: 'Description', value: filtersWnd.getComponent(""Description"").getValue() }
            ];
            store.setFilters(settings);
            localStorage.setItem(localStorageName, JSON.stringify(settings));
        };
        
        filtersWnd = Ext.create('Ext.window.Window',
            {
                title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: false,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500,
                    labelWidth: 80
                },
                items: [
                    {
                        fieldLabel: 'Вид',
                        itemId: ""EduResultKindId"",
                        value: prevSettings['EduResultKindId'],
     ");
                WriteLiteral(@"                   xtype: 'combobox',
                        store: kindsStore,
                        valueField: 'Id',
                        displayField: 'Name',
                        queryMode: 'local',
                        width: 350
                    },
                    {
                        xtype: 'textarea',
                        fieldLabel: 'Описание',
                        maxLength: 4000,
                        itemId: 'Description',
                        value: prevSettings['Description'],
                        editable: true,
                        height: 100
                    }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                 ");
                WriteLiteral(@"       handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

        setFilters();
        
        var editWnd = function (record) {
            return Ext.create('Ext.window.Window',
                {
                    title: record ? `Редактирование РО ${record.data.Code}` : 'Добавление РО',
                    overflowY: 'auto',
                    resizable: false,
                    maxHeight: 500,
                    autoHeight: true,
                    width: 530,
                    modal: true,
                    bodyPadding: 6,
                    viewModel: {
                        data: Ext.apply({}, record ? record.data : {})
                    },
                    items: {
                        xtype: 'form',
                        id: 'eduResultForm',
                        layout: {
                            type: 'vbox'
                        },
                        defaults: {
                      ");
                WriteLiteral(@"      labelWidth: 80,
                            width: 500
                        },
                        items: [
                            {
                                name: 'Id',
                                bind: '{Id}',
                                xtype: 'hidden',
                            },
                            {
                                name: 'SerialNumber',
                                bind: '{SerialNumber}',
                                xtype: 'hidden',
                            },
                            {
                                name: 'Code',
                                bind: '{Code}',
                                xtype: 'hidden',
                            },
                            {
                                name: 'CompetenceId',
                                bind: '{CompetenceId}',
                                xtype: 'hidden',
                            },
                            {
    ");
                WriteLiteral(@"                            fieldLabel: 'Вид',
                                readOnly: record,
                                readOnlyCls: 'x-text-readonly',
                                name: 'EduResultKindId',
                                xtype: 'combobox',
                                store: kindsStore,
                                bind: '{EduResultKindId}',
                                valueField: 'Id',
                                displayField: 'Name',
                                queryMode: 'local',
                                anyMatch: true,
                                allowBlank: false,
                                width: 350
                            },
                            {
                                fieldLabel: 'Тип',
                                readOnly: record,
                                readOnlyCls: 'x-text-readonly',
                                name: 'EduResultTypeId',
                                xtype: 'combo");
                WriteLiteral(@"box',
                                store: typesStore,
                                bind: '{EduResultTypeId}',
                                valueField: 'Id',
                                displayField: 'Name',
                                queryMode: 'local',
                                anyMatch: true,
                                allowBlank: false,
                                width: 250
                            },
                            {
                                xtype: 'textarea',
                                fieldLabel: 'Описание',
                                maxLength: 4000,
                                bind: '{Description}',
                                name: 'Description',
                                allowBlank: false,
                                editable: true,
                                height: 100,
                                validator: required
                            }
                        ]
           ");
                WriteLiteral(@"         },
                    buttons: [
                        {
                            text: ""Сохранить"",
                            handler: function (btn) {
                                var wnd = this.up('window');
                                var form = wnd.down('form');
                                var data = form.getValues();
                                data.CompetenceId = '");
#nullable restore
#line 223 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                                                Write(ViewBag.CompetenceId);

#line default
#line hidden
#nullable disable
                WriteLiteral("\';\r\n                                if (form.isValid()) {\r\n                                    Ext.Ajax.request({\r\n                                        url: record ? \'");
#nullable restore
#line 226 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                                                  Write(Url.Action("EditEduResult"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' : \'");
#nullable restore
#line 226 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                                                                                   Write(Url.Action("CreateEduResult"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                        jsonData: data,
                                        success: function (response) {
                                            var responseData = Ext.decode(response.responseText);
                                            if (!responseData.success) {
                                                Ext.MessageBox.show({
                                                    title: 'Информационное сообщение',
                                                    msg: responseData.error,
                                                    buttons: Ext.MessageBox.OK
                                                });
                                            }
                                            else {

                                                wnd.close();

                                                try {
                                                    var recordIndex = store.findBy(r => r.data.Id === responseData.data.Id);
  ");
                WriteLiteral(@"                                                  if (recordIndex == -1) {
                                                        store.insert(0, responseData.data);
                                                        recordIndex = 0;
                                                    }
                                                    else
                                                        store.getAt(recordIndex).data = responseData.data;

                                                    var recordData = store.getAt(recordIndex);

                                                    Ext.getCmp(id).getView().scrollRowIntoView(recordIndex)

                                                    Ext.getCmp(id).getView().focusRow(recordData);
                                                    Ext.getCmp(id).getSelectionModel().select(recordData);

                                                    Ext.getCmp(id).getView().refresh();
                                                }");
                WriteLiteral(@"
                                                catch{
                                                    store.load();
                                                }
                                            }
                                        },
                                        failure: function (d) {
                                            Ext.MessageBox.alert('Ошибка', ""Неизвестная ошибка"");
                                        }
                                    });
                                }
                            }
                        }
                    ]
                });
        }

        var id = 'competenceEduResultGrid';

        var gridPanel = Ext.create('Ext.grid.Panel', {
            region: 'center',
            store: store,
            id: id,
            tbar: [
                {
                    xtype: 'button',
                    text: 'Фильтры...',
                    handler: function() { filtersWnd.show()");
                WriteLiteral(@"; }
                },
                {
                    xtype: 'button',
                    text: ""Отменить фильтры"",
                    handler: function() {
                        store.clearFilter();
                        localStorage.setItem(localStorageName, JSON.stringify([]));
                    }
                }, '-',
                {
                    xtype: 'button',
                    text: 'Добавить',
                    hidden: '");
#nullable restore
#line 298 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False',
                    handler: function () {
                        editWnd().show();
                    }
                }
            ],
            loadMask: true,
            columnLines: true,
            viewConfig: {
                markDirty: false
            },
            columns: [
                { xtype: 'rownumberer', width: 50 },
                {
                    header: 'Вид',
                    dataIndex: 'EduResultKindName',
                    renderer: Urfu.renders.htmlEncodeWithToolTip,
                    width: 150
                },
                {
                    header: 'Тип',
                    dataIndex: 'EduResultTypeName',
                    renderer: Urfu.renders.htmlEncodeWithToolTip,
                    width: 150
                },
                {
                    header: 'Код',
                    dataIndex: 'Code',
                    width: 120,
                    cellWrap: true,
                    renderer:");
                WriteLiteral(@" Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Описание',
                    dataIndex: 'Description',
                    renderer: Urfu.renders.htmlEncodeWithToolTip,
                    width: 300
                },
                {
                    xtype: 'actioncolumn',
                    region: 'center',
                    sortable: false,
                    hidden: '");
#nullable restore
#line 340 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                        Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \'False\',\r\n                    width: 80,\r\n                    items: [\r\n                        {\r\n                            icon: \'");
#nullable restore
#line 344 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                              Write(Url.Content("~/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            iconCls: 'icon-padding',
                            tooltip: 'Редактировать',
                            handler: function (grid, rowIndex, colIndex, item, e, record) {
                                var wnd = editWnd(record);
                                wnd.show();
                            }
                        },
                        {
                            icon: '");
#nullable restore
#line 353 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                              Write(Url.Content("~/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            iconCls: 'icon-padding',
                            tooltip: 'Удалить',
                            handler: function (grid, rowIndex, colIndex, item, e, record) {
                                Ext.MessageBox.show({
                                    title: 'Уведомление',
                                    msg: ""Удалить запись?"",
                                    buttons: Ext.MessageBox.YESNO,
                                    fn: function (btn) {
                                        if (btn === 'yes') {
                                            Ext.Ajax.request({
                                                method: 'GET',
                                                url: '");
#nullable restore
#line 365 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Competence\EduResults.cshtml"
                                                 Write(Url.Action("DeleteEduResult"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                                success: function(response) {
                                                    Ext.MessageBox.show({
                                                        title: 'Информационное сообщение',
                                                        msg: 'Запись удалена успешно',
                                                        buttons: Ext.MessageBox.OK
                                                    });
                                                    try {
                                                        store.remove(record);
                                                        Ext.getCmp(id).getView().refresh();
                                                    }
                                                    catch{
                                                        store.reload();
                                                    }
                                                },
                   ");
                WriteLiteral(@"                             failure: function(d) {
                                                    Ext.MessageBox.show({
                                                        title: 'Ошибка',
                                                        msg: 'Удаление невозможно',
                                                        buttons: Ext.MessageBox.OK
                                                    });
                                                },
                                                params: { id: record.get('Id') }
                                            });
                                        }
                                    }
                                });
                            }
                        }
                    ]
                }
            ]
        });

        var items = [
            gridPanel
        ];

        Urfu.createViewport('border', items);
    });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
