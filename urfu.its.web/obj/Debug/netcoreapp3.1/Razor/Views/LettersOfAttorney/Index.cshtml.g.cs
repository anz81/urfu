#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\LettersOfAttorney\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bd86c50f138c02dc8bd537ba10d120e41367b92a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_LettersOfAttorney_Index), @"mvc.1.0.view", @"/Views/LettersOfAttorney/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bd86c50f138c02dc8bd537ba10d120e41367b92a", @"/Views/LettersOfAttorney/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_LettersOfAttorney_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\LettersOfAttorney\Index.cshtml"
  
    ViewBag.Title = "Доверенность";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral(@"    <div class=""form-horizontal"">
        <script type=""text/javascript"">

            Ext.onReady(function () {
                Ext.tip.QuickTipManager.init();
                
                var store = Ext.create(""Ext.data.Store"",
                    {
                        idProperty: 'Id',
                        fields: [
                            ""Id"",""Number"", ""StartDate"",""EndDate""
                        ],
                        autoLoad: true,
                        proxy: {
                            type: 'ajax',
                            url: '");
#nullable restore
#line 24 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\LettersOfAttorney\Index.cshtml"
                             Write(Url.Action("GetLetterOfAttorney"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                            reader: {
                                type: 'json'
                            }
                        }
                    });

                function required(value) {
                    return (value != undefined && value.length > 0) ? true : ""Поле не может быть пустым"";
                }

                function checkEditRole(actions) {
                    if ('");
#nullable restore
#line 36 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\LettersOfAttorney\Index.cshtml"
                    Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' == 'True') {
                        actions();
                    }
                    else {
                        Ext.MessageBox.alert('Ошибка', ""У вас нет прав вносить изменения в справочник"");
                    }
                }

                var editWnd = Ext.create('Ext.window.Window',
                    {
                        title: ""Добавление доверенности"",
                        closeAction: 'hide',
                        resizable: false,
                        autoHeight: true,
                        bodyPadding: 6,
                        rowHeight: 100,
                        items: [{
                            xtype: 'hidden',
                            itemId: 'Id',
                        }, {
                            xtype: 'textfield',
                            fieldLabel: 'Номер доверенности*',
                            labelWidth: 140,
                            itemId: 'Number',
                            width: 500,
           ");
            WriteLiteral(@"                 maxLength: 20,
                            validator: required
                        }, {
                            xtype: 'datefield',
                            fieldLabel: 'Дата начала действия доверенности*',
                            labelWidth: 140,
                            itemId: 'StartDate',
                            format: 'd.m.Y',
                            width: 500,
                            validator: required,
                            startDay: 1,
                            invalidText: ""Дата должна быть указана в формате дд.мм.гггг ""
                            }, {
                                xtype: 'datefield',
                                fieldLabel: 'Дата окончания действия доверенности*',
                                labelWidth: 140,
                                itemId: 'EndDate',
                                format: 'd.m.Y',
                                width: 500,
                                validator: requi");
            WriteLiteral(@"red,
                                startDay: 1,
                                invalidText: ""Дата должна быть указана в формате дд.мм.гггг ""
                            }
                        ],

                        buttons: [{
                            text: ""Сохранить"",
                            handler: function () {
                                var isValid = true;
                                editWnd.items.items.forEach(function (element, index, array) {
                                    if (!element.isValid()) isValid = false;
                                });
                                if (!isValid) return false;

                                Ext.Ajax.request({
                                    url: '");
#nullable restore
#line 96 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\LettersOfAttorney\Index.cshtml"
                                     Write(Url.Action("EditLettersOfAttorney"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                    params: {
                                        id: editWnd.getComponent(""Id"").getValue() ? editWnd.getComponent(""Id"").getValue() : 0,                                 
                                        number: editWnd.getComponent(""Number"").getValue(),
                                        startdate: editWnd.getComponent(""StartDate"").getValue(),
                                        enddate: editWnd.getComponent(""EndDate"").getValue(),
                                    },
                                    success: function (response) {
                                        if (response.responseText != "" "") {
                                            var data = Ext.decode(response.responseText);
                                            if (data.success) {
                                                editWnd.hide();
                                                store.reload();
                                            }
          ");
            WriteLiteral(@"                                  else {
                                                Ext.MessageBox.alert('Ошибка', data.message);
                                            }
                                        }
                                    },
                                    failure: function (response) {
                                        Ext.MessageBox.alert('Ошибка', 'Неизвестная ошибка');
                                    }
                                });
                            }
                            },{
                                text: ""Отмена"",
                                handler: function () { editWnd.hide(); }
                            }]
                    });

                var gridPanel = Ext.create('Ext.grid.Panel',
                    {
                        region: 'center',
                        store: store,
                        loadMask: true,
                        columnLines: true,                      ");
            WriteLiteral(@" 
                        tbar: [{
                            xtype: 'button',
                            text: ""Добавить"",
                            handler: function () {
                                checkEditRole(function () {
                                    editWnd.items.items.forEach(function (element, index, array) {
                                        element.setValue("""");
                                        element.clearInvalid();
                                    });
                                    editWnd.show();
                                })
                            }
                        }],
                        columns: [{
                            xtype: 'rownumberer', width: 50
                        }, {
                                header: 'Номер доверенности',
                                align: 'right',
                                dataIndex: 'Number',
                                width: 300,
                        ");
            WriteLiteral(@"        cellWrap: true,
                               renderer: Urfu.renders.htmlEncodeWithToolTip
                        }, {
                            header: 'Дата начала действия доверенности',
                            align: 'right',
                            dataIndex: 'StartDate',
                            width: 300,
                            cellWrap: true,
                            startDay: 1,
                            }, {
                                header: 'Дата окончания действия доверенности',
                                align: 'right',
                                dataIndex: 'EndDate',
                                width: 300,
                                ранитьellWrap: true,
                                startDay: 1,
                            }, {                       
                            xtype: 'actioncolumn',
                            region: 'center',
                            sortable: false,
                          ");
            WriteLiteral("  width: 70,\r\n                            items: [\r\n                                {\r\n                                    icon: \'");
#nullable restore
#line 175 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\LettersOfAttorney\Index.cshtml"
                                      Write(Url.Content("~/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                    iconCls: 'icon-padding',
                                    text: 'Редактировать',
                                    tooltip: 'Редактировать',
                                    handler: function (grid, rowIndex, colIndex) {
                                        checkEditRole(function () {
                                            var rec = grid.getStore().getAt(rowIndex);
                                            editWnd.items.items.forEach(function (element, index, array) {
                                                //if (rec.data[element.itemId] != undefined)  ???
                                                element.setValue(rec.data[element.itemId]);
                                            });
                                            editWnd.show();
                                        });
                                    }
                                }, {
                                    icon: '");
#nullable restore
#line 190 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\LettersOfAttorney\Index.cshtml"
                                      Write(Url.Content("~/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                    iconCls: 'icon-padding',
                                    text: 'Удалить',
                                    tooltip: 'Удалить',
                                    handler: function (grid, rowIndex, colIndex) {
                                        checkEditRole(function () {
                                            var request = function () {
                                                var rec = grid.getStore().getAt(rowIndex);
                                                Ext.Ajax.request({
                                                    url: '");
#nullable restore
#line 199 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\LettersOfAttorney\Index.cshtml"
                                                     Write(Url.Action("RemoveLettersOfAttorney"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                                    params: {
                                                        id: rec.get(""Id"")
                                                    },
                                                    success: function (response) {
                                                        if (response.responseText != """") {
                                                            var data = Ext.decode(response.responseText);
                                                            if (data.success) {
                                                                store.reload();
                                                            }
                                                            else {
                                                                Ext.MessageBox.alert('Ошибка', data.message);
                                                            }
                                                        }
                 ");
            WriteLiteral(@"                                   },
                                                    failure: function (response) {
                                                        Ext.MessageBox.alert('Ошибка', 'Неизвестная ошибка');
                                                    }
                                                });
                                            };

                                            Ext.MessageBox.show({
                                                title: 'Удалить доверенность?',
                                                msg: ""Вы действительно хотите удалить информацию о доверенности?"",
                                                buttons: Ext.MessageBox.YESNO,
                                                fn: function (btn) {
                                                    if (btn === 'yes') {
                                                        request();
                                                    }
                     ");
            WriteLiteral(@"                           },
                                                icon: Ext.MessageBox.QUESTION
                                            });
                                        });
                                    }
                                }]

                        }
                        ]
                    });

                var items = [
                    gridPanel
                ];

                Urfu.createViewport('border', items);

                gridPanel.getStore().on('load', function (store, records, options) {
                    var focus = '");
#nullable restore
#line 246 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\LettersOfAttorney\Index.cshtml"
                            Write(ViewBag.Focus);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
                    if (focus && focus.length > 0) {

                        var focusRow = store.findExact('Id', parseInt(focus));
                        if (focusRow >= 0) {
                            var rowData = store.getAt(focusRow);
                            gridPanel.getView().focusRow(rowData);
                            gridPanel.getSelectionModel().select(rowData);
                        }
                    }
                    return false;
                });
                     
            });

        </script>
    </div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
