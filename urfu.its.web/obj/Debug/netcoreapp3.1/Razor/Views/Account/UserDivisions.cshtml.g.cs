#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9cbbb14ca42c71e9b116a26fee861e6b0983eee4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Account_UserDivisions), @"mvc.1.0.view", @"/Views/Account/UserDivisions.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9cbbb14ca42c71e9b116a26fee861e6b0983eee4", @"/Views/Account/UserDivisions.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Account_UserDivisions : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Urfu.Its.Web.Models.EditUserDivisionsViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
  
    ViewBag.Title = "Институты для пользователя " + Model.UserFIO;
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 9 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
            WriteLiteral("    <div class=\"form-horizontal\">\r\n        ");
#nullable restore
#line 12 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
   Write(Html.ValidationSummary(true));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"


        <script type=""text/javascript"">
            changed = false;
            baseCheckedIds = [];
            checkedIds = [];

            var treeStore = createTreeStore();
            var treePanel = createTreePanelElement();
            var saveButton = createSaveButtonElement();
            var addDivisionComboBox = createComboBoxElement();

            treeStore.addListener('load',
                onTreeStoreLoaded.bind(null, treePanel)
            );
            treePanel.setStore(treeStore)


            Ext.onReady(function () {
             var panel= Ext.create('Ext.Panel', {
                    width: '100%',
                    minHeight: 800,
                    layout: 'column',
                    margin: ""50 10 0 0"",                  
                    defaults: {
                        margin: ""0 10 0 0"",
                      
                    },
                    items: [
                        {
                            xtype: 'panel',
  ");
            WriteLiteral(@"                          columnWidth: .55,
                            items: [treePanel, saveButton]
                        }, {
                            xtype: 'panel',                          
                            title: 'Добавить подразделение',
                            margin: ""0 0 0 0"",
                            bodyPadding: ""10 0 0 0"",
                            columnWidth: .45,                            
                            layout: {
                                type: 'hbox'
                            },
                            items: [
                                addDivisionComboBox,
                                {
                                    xtype: 'button', text: 'Добавить',
                                    handler: function () {                                        
                                        if (Ext.getCmp('combobox1') != null) {                                            
                                       ");
            WriteLiteral(@"     var newNodes = Ext.getCmp('combobox1').getValueRecords();      
                                            if (newNodes.length == 0)
                                                return;                                                                                      
                                            for (i = 0; i < newNodes.length; i++)
                                              {
                                                    treePanel.getRootNode().appendChild({
                                                         text: newNodes[i].data.Name,
                                                         nodeId: newNodes[i].data.InstituteId,
                                                         leaf: true,
                                                         checked: true
                                                });                                        
                                                checkedIds.push(newNodes[i].data.InstituteId);     ");
            WriteLiteral(@"                                                                                       
                                            }
                                        }
                                    }
                                }                               
                            ]
                           
                        }],
                    renderTo: Ext.getBody()
                });
              
            });

            function save(success, failure) {
                Ext.Ajax.request({
                    method: 'POST',
                    url: '");
#nullable restore
#line 88 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
                     Write(Url.Action("UserDivisions"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\',\r\n                    params: {\r\n                        userName: \'");
#nullable restore
#line 90 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
                              Write(Model.UserName);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                        checkedIds: checkedIds
                    },
                    success: function (response) {
                        success(response)
                    },
                    failure: function (response) {
                        failure(response)
                    }
                });
                baseCheckedIds = checkedIds.slice(0);
            }

            function colExpTree() {
                var treeView = treePanel.getComponent('treeView');
                if (treeView == undefined) return;
                if (treePanelCollapsed) treeView.collapseAll(treeView);
                else treeView.expandAll(treeView);
            }

            function search() {
                var settings = [
                    {property: 'title', value: Ext.ComponentQuery.query('#Division')[0].getValue()},
                ];

                treePanel.mask();
                treeStore.setFilters(settings);
                treePanelCollapsed = false;");
            WriteLiteral(@"

                colExpTree();
            }

       
            function onTreeStoreLoaded(treePanel, treeStore) {
                if (treePanel.isMasked()) treePanel.unmask();
                colExpTree();
                treeStore.getRootNode().cascadeBy(function (node) {
                    if (node.data.checked && node.data.children == null && !baseCheckedIds.includes(node.data.nodeId))
                        baseCheckedIds.push(node.data.nodeId);
                    else if (!node.data.checked && baseCheckedIds.includes(node.data.nodeId)) {
                        var index = baseCheckedIds.indexOf(node.data.nodeId);
                        baseCheckedIds.splice(index);
                    }
                    checkedIds = baseCheckedIds.slice(0);
                })
            }

            function createTreeStore() {
                return Ext.create(""Ext.data.TreeStore"",
                    {
                        autoLoad: true,
                        remoteFilter: tr");
            WriteLiteral(@"ue,
                        root: {
                            text: 'Root',
                            id: 'rootId',
                            expanded: false
                        },
                        proxy: {
                            type: 'ajax',
                            url: '");
#nullable restore
#line 149 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
                             Write(Url.Action("UserDivisionsTree"));

#line default
#line hidden
#nullable disable
            WriteLiteral("?id=\' + \'");
#nullable restore
#line 149 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
                                                                      Write(Model.Id);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                            reader: {
                                type: 'json',
                                rootProperty: 'children'
                            }
                        }                     
                    });
            }


            function createTreePanelElement() {
                return Ext.create('Ext.tree.Panel', {
                    title: 'Подразделения для пользователя ' + '");
#nullable restore
#line 161 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
                                                           Write(Model.UserFIO);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                    rootVisible: false,                 
                    xtype: 'panel',                    
                    tbar: [
                        {
                            xtype: 'textfield',
                            fieldLabel: 'Подразделение',
                            itemId: 'Division',
                            labelWidth: 110

                        },
                        {
                            xtype: 'button',
                            icon: '/Content/Images/search.png',
                            handler: function () {

                                if (changed) {
                                    var saveDialog = Ext.create('Ext.window.Window',
                                        {
                                            title: ""Уведомление"",
                                            closeAction: 'hide',
                                            resizable: false,
                                            autoHeigh");
            WriteLiteral(@"t: true,
                                            bodyStyle: ""margin: 10px;"",
                                            bodyPadding: 6,
                                            defaults: {
                                                width: 400
                                            },
                                            items: [
                                                {
                                                    xtype: 'label',
                                                    text: 'Сохранить изменения?',
                                                    margin: '0 0 20 0'
                                                }
                                            ],
                                            buttons: [
                                                {
                                                    text: ""Сохранить"",
                                                    handler: function () {

                              ");
            WriteLiteral(@"                          changed = false;
                                                        saveDialog.hide();
                                                        save(function (response) {
                                                        }, function (response) {
                                                            Ext.MessageBox.show({title: 'Ошибка', msg: 'Произошла ошибка'})
                                                        });
                                                        search();
                                                    }
                                                },
                                                {
                                                    text: ""Не сохранять"",
                                                    handler: function () {
                                                        changed = false;
                                                        checkedIds = baseCheckedIds.slice(0);
       ");
            WriteLiteral(@"                                                 saveDialog.hide();
                                                        search();
                                                    }
                                                }
                                            ]
                                        }).show();
                                }
                                else {
                                    search();
                                }
                            }
                        }
                    ],

                    listeners: {
                        checkchange: function (node, checked) {
                            changed = true;
                            if (checked) {
                                node.cascadeBy(function (child) {
                                    if (child.data.children == null && !checkedIds.includes(child.data.nodeId))
                                        checkedIds.push(child.data.nodeId)");
            WriteLiteral(@";
                                });
                            }
                            else {
                                node.cascadeBy(function (child) {
                                    if (checkedIds.includes(child.data.nodeId)) {
                                        var index = checkedIds.indexOf(child.data.nodeId);
                                        checkedIds.splice(index, 1);
                                    }
                                })
                            }
                            checkchange_base(node, checked);
                        },

                        collapseAll: function (tree) {
                            this.updateTreeView(tree, function (root) {
                                root.cascadeBy(function (node) {
                                    if (!node.isRoot() || tree.rootVisible) {
                                        node.data.expanded = false;
                                    }
                         ");
            WriteLiteral(@"       });
                                return tree.rootVisible ? [root] : root.childNodes;
                            });
                        },

                        expandAll: function (tree) {
                            this.updateTreeView(tree, function (root) {
                                var nodes = [];
                                root.cascadeBy(function (node) {
                                    if (!node.isRoot() || tree.rootVisible) {
                                        node.data.expanded = true;
                                        nodes.push(node);
                                    }
                                });
                                return nodes;
                            })
                        }
                    }
                });
            }

            function createSaveButtonElement() {
                  return Ext.create('Ext.Button', {
                        text: 'Сохранить',
                        he");
            WriteLiteral("ight: 30,\r\n                        margin: \'20 0 5 5\',\r\n                        handler: function () {\r\n                            save(\r\n                                function (response) {\r\n                                    window.location = \'");
#nullable restore
#line 284 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
                                                  Write(Url.Action("Index", new { focus = Model.UserName}));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'
                                },
                                function (response) {
                                    Ext.MessageBox.show({title: 'Ошибка', msg: 'Произошла ошибка'})
                                })
                        }
                  });
            }

            function createComboBoxElement() {  
                var divisionStore = Ext.create('Ext.data.Store', {
                    autoLoad: true,
                    proxy: {
                            type: 'ajax',
                        url: '");
#nullable restore
#line 298 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
                         Write(Url.Action("GetDivisions"));

#line default
#line hidden
#nullable disable
            WriteLiteral("?userName=\' + \'");
#nullable restore
#line 298 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Account\UserDivisions.cshtml"
                                                                   Write(Model.UserName);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',                       
                            reader: {
                                type: 'json',
                                rootProperty: 'data'
                            }
                        },                 
            });

                return Ext.create('Ext.form.field.Tag', {                  
                    store: divisionStore,
                    width: ""55%"",
                    minWidth: 200,
                    margin: ""0 10 0 0"",
                    queryMode: 'local',
                    displayField: 'Name',
                    valueField: 'InstituteId',
                    anyMatch: true,
                    filterPickList: true,
                    id: 'combobox1',
                    listeners: {
                        'select': function (combo, record) {
                            combo.inputEl.dom.value = '';
                        }
                    }                                    
                });
            }
   ");
            WriteLiteral("     </script>\r\n\r\n    </div>\r\n");
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Urfu.Its.Web.Models.EditUserDivisionsViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
