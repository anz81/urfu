#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4205572f45f1db5e38a49c7f1a8eb9c162c66e63"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Admission_ModuleStudents), @"mvc.1.0.view", @"/Views/Admission/ModuleStudents.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
using Urfu.Its.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
using Urfu.Its.Web.DataContext;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4205572f45f1db5e38a49c7f1a8eb9c162c66e63", @"/Views/Admission/ModuleStudents.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Admission_ModuleStudents : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 4 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
  
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script type=\"text/javascript\">\r\n\r\n        var statuses =\r\n            ");
#nullable restore
#line 13 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
       Write(Html.Raw(Json.Encode(EnumHelper<AdmissionStatus>.GetValues(AdmissionStatus.Admitted).Select(m => new {Value = m, Text = EnumHelper<AdmissionStatus>.GetDisplayValue(m)}).ToList())));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
        var statesStore = Ext.create('Ext.data.Store',
        {
            fields: ['Value', 'Text'],
            data: statuses
        });

        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();

            var store = Ext.create(""Ext.data.BufferedStore"",
            {
                fields: [
                    ""Id"", ""GroupName"", ""Surname"", ""Name"", ""PatronymicName"", ""Rating"", ""IsTarget"", ""IsInternational"",
                    ""Compensation"", ""Priority"", ""Admitted"", ""OtherAdmissions"", ""Status"", ""PersonalNumber"",
                    ""StudentStatus"", ""AnotherAdmission"", ""VariantId"",""Published"",""VariantName""
                ],
                autoLoad: true,
                pageSize: 300,
                remoteSort: true,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: window.location.pathname + window.location.search,
                    reader: {
                        type: 'json',");
                WriteLiteral(@"
                        rootProperty: 'data',
                        totalProperty: 'total'
                    }
                }
            });
            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""ModuleStudentsFilters"") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }

            filtersWnd = null;
            var setFilters = function() {
                var settings = [
                    { property: 'GroupName', value: filtersWnd.getComponent(""GroupNameField"").getValue() },
                    { property: 'Surname', value: filtersWnd.getComponent(""SurnameField"").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent(""NameField"").getValue() },
                    { property: 'StudentStat");
                WriteLiteral(@"us', value: filtersWnd.getComponent(""StudentStatus"").getValue() },
                    { property: 'Status', value: filtersWnd.getComponent(""StatusField"").getValue() },
                    { property: 'PersonalNumber', value: filtersWnd.getComponent(""PersonalNumber"").getValue() },
                    { property: 'PatronymicName', value: filtersWnd.getComponent(""PatronymicNameField"").getValue() },
                    { property: 'VariantName', value: filtersWnd.getComponent(""VariantName"").getValue() },
                    { property: 'IsTarget', value: filtersWnd.getComponent(""IsTargetField"").getValue().IsTargetField },
                    { property: 'IsInternational', value: filtersWnd.getComponent(""IsInternationalField"").getValue().IsInternationalField }
                ];
                store.setFilters(settings);
                localStorage.setItem(""ModuleStudentsFilters"", JSON.stringify(settings));
            };

            filtersWnd = Ext.create('Ext.window.Window',
            {
    ");
                WriteLiteral(@"            title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLabel: ""Название группы"", itemId: ""GroupNameField"", value: prevSettings[""GroupName""] },
                    { fieldLabel: ""Фамилия"", itemId: ""SurnameField"", value: prevSettings[""Surname""] },
                    { fieldLabel: ""Имя"", itemId: ""NameField"", value: prevSettings[""Name""] },
                    { fieldLabel: ""Статус"", itemId: ""StudentStatus"", value: prevSettings[""StudentStatus""] },
                    { fieldLabel: ""Номер"", itemId: ""PersonalNumber"", value: prevSettings[""PersonalNumber""] },
                    { fieldLabel: ""Отчество"", itemId: ""PatronymicNameField"", value: prevSettings[""PatronymicName""] },
                    {
                        fie");
                WriteLiteral(@"ldLabel: ""Состояние"",
                        itemId: ""StatusField"",
                        value: prevSettings[""Status""],
                        xtype: ""combobox"",
                        store: statesStore,
                        valueField: 'Value',
                        displayField: 'Text',
                        queryMode: 'local'

                    },
                    { fieldLabel: ""Траектория"", itemId: ""VariantName"", value: prevSettings[""VariantName""] },
                    {
                        xtype: 'radiogroup',
                        fieldLabel: 'Целевой',
                        itemId: ""IsTargetField"",
                        value: prevSettings[""IsTarget""],
                        items: [
                        {
                            boxLabel: 'Все',
                            name: 'IsTargetField',
                            inputValue: ''

                        }, {
                            boxLabel: 'Да',
                            na");
                WriteLiteral(@"me: 'IsTargetField',
                            inputValue: 'true'
                        }, {
                            boxLabel: 'Нет',
                            name: 'IsTargetField',
                            inputValue: 'false'
                        }]
                    },
                    {
                        xtype: 'radiogroup',
                        fieldLabel: 'Иностранный',
                        itemId: ""IsInternationalField"",
                        value: prevSettings[""IsInternational""],
                        items: [
                        {
                            boxLabel: 'Все',
                            name: 'IsInternationalField',
                            inputValue: ''

                        }, {
                            boxLabel: 'Да',
                            name: 'IsInternationalField',
                            inputValue: 'true'
                        }, {
                            boxLabel: 'Нет',
            ");
                WriteLiteral(@"                name: 'IsInternationalField',
                            inputValue: 'false'
                        }]
                    }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function() {
                            //store.filter([
                            //    { property: 'GroupName', value: filtersWnd.getComponent(""GroupNameField"").getValue() },
                            //    { property: 'Surname', value: filtersWnd.getComponent(""SurnameField"").getValue() },
                            //    { property: 'Name', value: filtersWnd.getComponent(""NameField"").getValue() },
                            //    { property: 'StudentStatus', value: filtersWnd.getComponent(""StudentStatus"").getValue() },
                            //    { property: 'PersonalNumber', value: filtersWnd.getComponent(""PersonalNumber"").getValue() },
                            //    { property: 'PatronymicName', val");
                WriteLiteral(@"ue: filtersWnd.getComponent(""PatronymicNameField"").getValue() },
                            //    { property: 'IsTarget', value: filtersWnd.getComponent(""IsTargetField"").getValue() },
                            //    { property: 'IsInternational', value: filtersWnd.getComponent(""IsInternationalField"").getValue() }
                            //]);
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

            setFilters();
            var selRecord = [];
            var gridPanel = null;

            function setAdmissionStatus(rec, status) {

                Ext.Ajax.request({
                    url: ""/Admission/SetModuleAdmissionStatus"",
                    params: { studentId: rec.map(function(l) { return l.get(""");
                WriteLiteral("Id\"); }), moduleId: \'");
#nullable restore
#line 179 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
                                                                                             Write(ViewBag.moduleId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                        status: status
                    },
                    success: function(response) {
                        var data = Ext.decode(response.responseText);
                        if (data.reload)
                            location.reload();

                        if (data.errors && data.errors.length > 0) {
                            for (var i = 0; i < data.errors.length; i++) {
                                Ext.MessageBox.alert('Ошибка',
                                    data.errors[i],
                                    function() {
                                        //action to complete when user clicks ok.
                                    });
                            }
                        }

                        for (var i in rec) {
                            var index = -1;
                            if (data.notChangedIds)
                                index = data.notChangedIds.indexOf(rec[i].data.Id);
                ");
                WriteLiteral(@"            if (index > -1) {
                                data.notChangedIds.splice(index, 1);
                                //rec.splice(i, 1);
                                //i = i-1;
                                //continue;
                            } else {
                                rec[i].set(""Status"", status);
                                rec[i].set(""Published"", false);
                            }
                        }
                        statusChanged(rec);
                        gridPanel.getView().refresh();
                    }
                });
            }

            var indeterminateButton = Ext.create('Ext.Button',
            {
                xtype: 'button',
                disabled: true,
                text: 'Нет решения',
                handler: function() { setAdmissionStatus(selRecord, 0); }
            });

            var admittedButton = Ext.create('Ext.Button',
            {
                xtype: 'button',
         ");
                WriteLiteral(@"       disabled: true,
                text: 'Зачислен',
                handler: function() { setAdmissionStatus(selRecord, 1); }
            });

            var deniedButton = Ext.create('Ext.Button',
            {
                xtype: 'button',
                disabled: true,
                text: 'Не зачислен',
                handler: function() { setAdmissionStatus(selRecord, 2); }
            });

            var downloadReport = Ext.create('Ext.Button',
            {
                xtype: 'button',
                text: 'Открыть в Excel',
                handler: function() {
                    var fileUrl = '");
#nullable restore
#line 246 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
                              Write(Url.Action("DownloadModuleStudents", new {directionId = ViewBag.directionId}));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' +\r\n                        \'&moduleId=");
#nullable restore
#line 247 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
                              Write(ViewBag.moduleId);

#line default
#line hidden
#nullable disable
                WriteLiteral("&programId=");
#nullable restore
#line 247 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
                                                          Write(ViewBag.programId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"&filter=' +
                        encodeURIComponent(localStorage.getItem(""ModuleStudentsFilters"") || ""[]"");
                    window.location.href = fileUrl;
                }
            });

            var sendButton = Ext.create('Ext.Button',
            {
                xtype: 'button',
                disabled: true,
                text: 'Отправить в ЛК',
                handler: function() {
                    setTimeout(function() {
                        selRecord.forEach(function(el, index, array) {
                            el.set(""Published"", true);
                        });
                    },0);
                    Ext.Ajax.request({
                        url: ""/Admission/PublishModuleAdmission"",
                        params: {
                            studentId: selRecord.map(function(l) { return l.get(""Id""); }),
                            moduleId: '");
#nullable restore
#line 268 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
                                  Write(ViewBag.moduleId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"'
                        },
                        success: function(response) {
                            Ext.toast({ html: ""Сообщение отправлено"", align: 't' });
                            gridPanel.getView().refresh();
                        }
                    });

                }
            });

            function statusChanged(rec) {
                if (rec == null)
                    return;
                for (var i in rec) {
                    var anotherAdmission = rec[i].get(""AnotherAdmission"");
                    var status = rec[i].get(""Status"");
                    if (!anotherAdmission) {
                        indeterminateButton.setDisabled(status == 0);
                        admittedButton.setDisabled(status == 1);
                        deniedButton.setDisabled(status == 2);
                        sendButton.enable();
                    } else {
                        indeterminateButton.disable();
                        admittedButton.disabl");
                WriteLiteral(@"e();
                        deniedButton.disable();
                        sendButton.disable();
                    }
                }
            }

            gridPanel = Ext.create('Ext.grid.Panel',
            {
                multiSelect: true,
                region: 'center',
                store: store,
                loadMask: true,
                columnLines: true,
                markDirty: false,
                listeners: {
                    selectionchange: function(el, records) {
                        selRecord = records.slice();
                        statusChanged(selRecord);
                    }
                },
                tbar: [
                    {
                        xtype: 'box',
                        autoEl: { tag: 'a', href: '");
#nullable restore
#line 316 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\ModuleStudents.cshtml"
                                              Write(Url.Action("Modules"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', html: 'Возврат на список'}
                    },
                    '-',
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function () { filtersWnd.show(); }
                    },
                    {
                        xtype: 'button',
                        text: ""Отменить фильтры"",
                        handler: function() {
                            localStorage.setItem(""ModuleStudentsFilters"", []);
                            store.clearFilter();
                        }
                    },
                    '-',
                    indeterminateButton,
                    admittedButton,
                    deniedButton,
                    '-',
                    sendButton,
                    '-',
                    downloadReport
                ],
                viewConfig: {
                    getRowClass: function(record) {
                        return ");
                WriteLiteral(@"!record.get('Published')
                            ? 'highlight'
                            : '';
                    }
                },
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Название группы',
                        dataIndex: 'GroupName',
                        width: 160,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Фамилия',
                        dataIndex: 'Surname',
                        width: 200,
                        renderer: function (value, metaData, record) {
                            return '<a href=""/PersonalInfo/Student?studentId='+record.data.Id+'"">'+value+'</a>';
                        }
                    },
                    {
                        header: 'Имя',
                        dataIndex: 'Name',
                        width: 200,
            ");
                WriteLiteral(@"            renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Отчество',
                        dataIndex: 'PatronymicName',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Статус',
                        dataIndex: 'StudentStatus',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Личный номер студента',
                        dataIndex: 'PersonalNumber',
                        width: 120,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Рейтинг',
                        dataIndex: 'Rating',
                        width: 90
                    },
                    {
             ");
                WriteLiteral(@"           header: 'Целевой',
                        dataIndex: 'IsTarget',
                        width: 100,
                        align: 'center',
                        renderer: function (val) { return val ? 'Да' : ""Нет"" }
                    },
                    {
                        header: 'Иностранный студент',
                        dataIndex: 'IsInternational',
                        width: 200,
                        align: 'center',
                        renderer: function (val) { return val ? 'Да' : ""Нет"" }
                    },
                    {
                        header: 'Вид возмещения затрат',
                        align: 'center',
                        dataIndex: 'Compensation',
                        width: 210,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Приоритет в ЛК',
                        dataIndex: 'Priority',
                        alig");
                WriteLiteral(@"n: 'center',
                        width: 150
                    },
                    {
                        header: 'Зачисления в другие модули группы',
                        dataIndex: 'OtherAdmissions',
                        align: 'center',
                        width: 150,
                        sortable: false
                    },
                    {
                        header: 'Состояние',
                        width: 400,
                        //dataIndex: 'Status',
                        xtype: 'templatecolumn',

                        tpl: new Ext.XTemplate(
                            '<tpl for=""."" if=""!!AnotherAdmission"">',
                            ""Зачислен в {AnotherAdmission:htmlEncode}"",
                            '<tpl else>',
                            '{[this.getAdmissionStatus(values.Status)]}',
                            ""</tpl>"",
                            {
                                getAdmissionStatus: function (status) { ");
                WriteLiteral(@"return { 0: ""Нет решения"", 1: ""Зачислен"", 2: ""Не зачислен"" }[status]; }
                            }
                        )
                    },
                    {
                        header: 'Траектория',
                        align: 'center',
                        dataIndex: 'VariantName',
                        width: 210,
                        renderer: Urfu.renders.htmlEncode
                    }
                ]
            });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
    </script>
");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
