#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\Variants.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9e43bd40c00627e8045e72154e3b1b3820bb0f46"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Admission_Variants), @"mvc.1.0.view", @"/Views/Admission/Variants.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9e43bd40c00627e8045e72154e3b1b3820bb0f46", @"/Views/Admission/Variants.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Admission_Variants : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\Variants.cshtml"
  
    ViewBag.Title = "Зачисление на траектории";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        Ext.onReady(function () {
            Ext.tip.QuickTipManager.init();

            var store = Ext.create(""Ext.data.BufferedStore"",
                {
                    idProperty: 'Id',
                    fields: [""Id"", ""DirectionOkso"", ""Name"", ""CreateDate"", ""familirizationType"", ""familirizationCondition"", ""qualification"", ""Year"", ""StudentsLimit"", ""Count"", ""SelectionDeadline""],
                    autoLoad: true,
                    pageSize: 300,
                    remoteSort: true,
                    remoteFilter: true,
                    proxy: {
                        type: 'ajax',
                        url: '/Admission/Variants',
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });


            var prevSettings = {};
            try {
");
                WriteLiteral(@"                var prevSettingString = JSON.parse(localStorage.getItem(""VariantsForAdmissionsFilters"") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }
            } catch (err) {

            }

            var VariantStateStore = [["""", ""(Не выбрано)""]];
            VariantStateStore = VariantStateStore.concat(Object.keys(Urfu.VariantState).map(function (key) { return [key, Urfu.VariantState[key]]; }));


            var filtersWnd = null;
            var setFilters = function () {
                var settings = [
                                { property: 'DirectionOkso', value: filtersWnd.getComponent(""DirectionOksoField"").getValue() },
                                { property: 'Name', value: filtersWnd.getComponent(""NameField"").getValue() },
                                { property: 'familirizationType', value: filtersWnd.getComponent(");
                WriteLiteral(@"""familirizationTypeField"").getValue() },
                                { property: 'familirizationCondition', value: filtersWnd.getComponent(""familirizationConditionField"").getValue() },
                                { property: 'qualification', value: filtersWnd.getComponent(""qualificationField"").getValue() },
                                { property: 'Year', value: filtersWnd.getComponent(""YearField"").getValue() }
                ];
                store.setFilters(settings);
                localStorage.setItem(""VariantsForAdmissionsFilters"", JSON.stringify(settings));
            };

            filtersWnd = Ext.create('Ext.window.Window', {
                title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLab");
                WriteLiteral(@"el: ""ОКСО"", itemId: ""DirectionOksoField"", value: prevSettings[""DirectionOkso""] },
                    { fieldLabel: ""Название траектории"", itemId: ""NameField"", value: prevSettings[""Name""] },
                    { fieldLabel: ""Форма освоения"", itemId: ""familirizationTypeField"", value: prevSettings[""familirizationType""] },
                    { fieldLabel: ""Условия освоения"", itemId: ""familirizationConditionField"", value: prevSettings[""familirizationCondition""] },
                    { fieldLabel: ""Уровень обучения"", itemId: ""qualificationField"", value: prevSettings[""qualification""] },
                    { fieldLabel: ""Год"", itemId: ""YearField"", value: prevSettings[""Year""] }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function () {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
              ");
                WriteLiteral(@"          text: ""Отмена"",
                        handler: function () { filtersWnd.hide(); }
                    }
                ]
            });

            setFilters();


            var tpl = '<a href=""/Admission/VariantStudents/{Id}"">Студенты</a>';

            var gridPanel = Ext.create('Ext.grid.Panel',
                {
                    region: 'center',
                    store: store,
                    tbar: [
                        {
                            xtype: 'button',
                            text: 'Фильтры...',
                            handler: function () { filtersWnd.show(); }
                        },
                        {
                            xtype: 'button',
                            text: ""Отменить фильтры"",
                            handler: function () { store.clearFilter(); }
                        }
                    ],
                    loadMask: true,
                    columns: [
                        { x");
                WriteLiteral(@"type: 'rownumberer', width: 50 },
                        {
                            header: 'ОКСО',
                            dataIndex: 'DirectionOkso',
                            width: 90,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Название траектории',
                            dataIndex: 'Name',
                            width: 400,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                       {
                           header: 'Дата создания',
                           dataIndex: 'CreateDate',
                           renderer: Ext.util.Format.dateRenderer('d.m.Y H:i'),
                           width: 150
                       },
                        {
                            header: 'Форма освоения',
                            dataIndex: 'familirizationType',
                         ");
                WriteLiteral(@"   renderer: Ext.util.Format.htmlEncode,
                            width: 160
                        },
                        {
                            header: 'Условие освоения',
                            dataIndex: 'familirizationCondition',
                            renderer: Ext.util.Format.htmlEncode,
                            width: 170
                        },
                        {
                            header: 'Уровень обучения',
                            dataIndex: 'qualification',
                            width: 180
                        },
                        {
                            header: 'Год',
                            dataIndex: 'Year',
                            renderer: Ext.util.Format.htmlEncode,
                            width: 70
                        },
                       {
                           header: 'Лимит',
                           dataIndex: 'StudentsLimit',
                           align: 'cent");
                WriteLiteral(@"er',
                           renderer: Ext.util.Format.htmlEncode,
                           width: 80
                       },
                       {
                           header: 'Зачислено',
                           dataIndex: 'Count',
                           align: 'center',
                           renderer: Ext.util.Format.htmlEncode,
                           width: 110
                       },
                       {
                           header: 'Дата окончания выбора',
                           dataIndex: 'SelectionDeadline',
                           align: 'center',
                           renderer: Ext.util.Format.dateRenderer('d.m.Y'),
                           width: 210
                       },
                       {
                            xtype: 'templatecolumn',
                            tpl: tpl,
                            sortable: false,
                            width: 100
                       }
                    ]");
                WriteLiteral(@"
                });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
            gridPanel.getStore().on('load', function (store, records, options) {
                var focus = '");
#nullable restore
#line 196 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Admission\Variants.cshtml"
                        Write(ViewBag.Focus);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
                if (focus && focus.length > 0) {

                    var focusRow;//= store.findExact('Id', focus);
                    var row = store.data.find('Id', focus);
                    if (row)
                        focusRow = store.data.indexOf(row);
                    if (focusRow > 0) {
                        var rowData = store.getAt(focusRow);
                        gridPanel.getView().focusRow(rowData);
                        gridPanel.getSelectionModel().select(rowData);
                    }
                }
                return false;
            });
        });
    </script>
");
            }
            );
            WriteLiteral("\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
