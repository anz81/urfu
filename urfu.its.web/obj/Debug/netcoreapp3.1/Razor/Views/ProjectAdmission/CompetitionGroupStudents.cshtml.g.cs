#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dc1169897570a90feeb51ded769955693ad9b8e9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ProjectAdmission_CompetitionGroupStudents), @"mvc.1.0.view", @"/Views/ProjectAdmission/CompetitionGroupStudents.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
using Urfu.Its.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
using Urfu.Its.Web.DataContext;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dc1169897570a90feeb51ded769955693ad9b8e9", @"/Views/ProjectAdmission/CompetitionGroupStudents.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_ProjectAdmission_CompetitionGroupStudents : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 4 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
  
    Layout = "~/Views/Shared/_ExtLayout.cshtml";
    var filterName = "ProjectCompetitionGroupStudentsFilters";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    <script type=\"text/javascript\">\r\n\r\n        var statuses =\r\n            ");
#nullable restore
#line 14 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
       Write(Html.Raw(Json.Encode(EnumHelper<AdmissionStatus>.GetValues(AdmissionStatus.Admitted).Select(m => new {Value = m, Text = EnumHelper<AdmissionStatus>.GetDisplayValue(m)}).ToList())));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
        var statesStore = Ext.create('Ext.data.Store',
            {
                fields: ['Value', 'Text'],
                data: statuses
            });

        Ext.onReady(function() {

            Ext.tip.QuickTipManager.init();

            var hideStudentsStoreName = 'hideStudentsProjectAdmission';
            var isPriority = null;

            var columnsToShowName = 'columnsToShowProjectAdmissioin';
            var columnsToShow = [];

            function parseJson(json) {
                var data = JSON.parse(json.replace(/&quot;/g, '""'));
                return data;
            }

            var dataDirections = parseJson('");
#nullable restore
#line 36 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                       Write(ViewBag.Directions);

#line default
#line hidden
#nullable disable
                WriteLiteral("\');\r\n            var directionsStore = Ext.create(\"Ext.data.Store\",\r\n                {\r\n                    data: dataDirections\r\n                });\r\n\r\n            var dataRoles = parseJson(\'");
#nullable restore
#line 42 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                  Write(ViewBag.Roles);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"');
            var rolesStore = Ext.create(""Ext.data.Store"",
                {
                    data: dataRoles
                });

            var store = Ext.create(""Ext.data.BufferedStore"",
                {
                    fields: [
                        ""Id"", ""GroupName"", ""Surname"", ""Name"", ""PatronymicName"", ""Rating"", ""IsTarget"", ""IsInternational"",
                        ""Compensation"", ""Priority"", ""Status"", ""PersonalNumber"", ""StudentStatus"", ""AnotherAdmission"",
                        ""VariantId"", ""Published"", ""Modified"", ""OtherAdmission"", ""Comment""
                    ],
                    autoLoad: true,
                    pageSize: 300,
                    remoteSort: true,
                    remoteFilter: true,
                    proxy: {
                        type: 'ajax',
                        url: '");
#nullable restore
#line 61 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                         Write(Url.Action("CompetitionGroupStudentsAjax"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        extraParams: {\r\n                            id: \'");
#nullable restore
#line 63 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                            Write(ViewBag.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            hideStudents: sessionStorage.getItem(hideStudentsStoreName) || false
                        },
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });

            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem(""");
#nullable restore
#line 76 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                                                    Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""") || ""[]"");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                }

                var columnsToShow = JSON.parse(localStorage.getItem(columnsToShowName) || []);

            } catch (err) {

            }

            var filtersWnd = null;

            function loadStore() {
                store.proxy.setUrl('");
#nullable restore
#line 91 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                               Write(Url.Action("CompetitionGroupStudentsAjax"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' +\r\n                    \'?filter=\' +\r\n                    encodeURIComponent(localStorage.getItem(\"");
#nullable restore
#line 93 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                                        Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""")));
                store.load();
            }

            var setFilters = function() {
                var settings = [
                    { property: 'GroupName', value: filtersWnd.getComponent(""GroupNameField"").getValue() },
                    { property: 'Direction', value: filtersWnd.getComponent(""Direction"").getValue() },
                    { property: 'Surname', value: filtersWnd.getComponent(""SurnameField"").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent(""NameField"").getValue() },
                    { property: 'StudentStatus', value: filtersWnd.getComponent(""StudentStatusField"").getValue() },
                    { property: 'Status', value: filtersWnd.getComponent(""StatusField"").getValue() },
                    { property: 'PersonalNumber', value: filtersWnd.getComponent(""PersonalNumber"").getValue() },
                    { property: 'PatronymicName', value: filtersWnd.getComponent(""PatronymicNameField"").getValue() },
                    { ");
                WriteLiteral(@"property: 'withoutAdmission', value: filtersWnd.getComponent(""withoutAdmissionField"").getValue() }
                ];
                if (isPriority)
                    settings.push({ property: 'IsPriority', value: true });
                localStorage.setItem(""");
#nullable restore
#line 111 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                 Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""", JSON.stringify(settings));
                loadStore();
            };

            filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: ""Фильтры"",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: true,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 500
                    },
                    items: [
                        { fieldLabel: ""Название группы"", itemId: ""GroupNameField"", value: prevSettings[""GroupName""] },
                        {
                            fieldLabel: 'Направление',
                            itemId: ""Direction"",
                            value: prevSettings[""Direction""],
                            xtype: 'combobox',
                            store: directionsStore,
                            valueField: 'Id',
                            displayField");
                WriteLiteral(@": 'Name',
                            queryMode: 'local'
                        },
                        { fieldLabel: ""Фамилия"", itemId: ""SurnameField"", value: prevSettings[""Surname""] },
                        { fieldLabel: ""Имя"", itemId: ""NameField"", value: prevSettings[""Name""] },
                        { fieldLabel: ""Отчество"", itemId: ""PatronymicNameField"", value: prevSettings[""PatronymicName""] },
                        { fieldLabel: ""Статус"", itemId: ""StudentStatusField"", value: prevSettings[""StudentStatus""] },
                        { fieldLabel: ""Номер"", itemId: ""PersonalNumber"", value: prevSettings[""PersonalNumber""] },
                        {
                            fieldLabel: ""Состояние"",
                            itemId: ""StatusField"",
                            value: prevSettings[""Status""],
                            xtype: ""combobox"",
                            store: statesStore,
                            valueField: 'Value',
                            displa");
                WriteLiteral(@"yField: 'Text',
                            queryMode: 'local'

                        },
                        {
                            xtype: 'checkboxfield',
                            itemId: 'withoutAdmissionField',
                            fieldLabel: 'Скрыть зачисленных на другие проекты',
                            labelWidth: 300,
                            value: prevSettings[""withoutAdmission""]
                        }
                    ],
                    buttons: [
                        {
                            text: ""OK"",
                            handler: function() {
                                setFilters();
                                filtersWnd.hide();
                            }
                        },
                        {
                            text: ""Отмена"",
                            handler: function() { filtersWnd.hide(); }
                        }
                    ]
                });

            se");
                WriteLiteral(@"tFilters();

            var selRecord = [];
            var gridPanel = null;

            function setAdmissionStatus(rec, status) {
                var request = function() {

                    var students = rec.map(function(l) {
                        return {
                            Id: l.get(""Id""),
                            RoleId: l.get(""RoleId"")
                        };
                    });
                    //var jsonIds = JSON.stringify(ids);

                    Ext.Ajax.request({
                        url: '");
#nullable restore
#line 194 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                         Write(Url.Action("SetCompetitionGroupAdmissionStatus", new {propertyId = ViewBag.PropertyId,}));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        params: {\r\n                            studentIds: JSON.stringify(students), //rec.map(function (l) { return {\"Id\": l.get(\"Id\"), \"RoleId\": l.get(\"RoleId\") }; }),\r\n                            minorPeriodId: ");
#nullable restore
#line 197 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                      Write(ViewBag.ProjectPeriodId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@",
                            status: status
                        },
                        success: function(response) {
                            gridPanel.unmask();
                            var data = Ext.decode(response.responseText);
                            if (data.msg)
                                Ext.MessageBox.show({
                                    title: 'Информационное сообщение',
                                    msg: data.msg,
                                    buttons: Ext.MessageBox.OK,
                                    icon: Ext.MessageBox.INFO
                                });
                            if (data.reload)
                                location.reload();


                            for (var i in rec) {
                                rec[i].set(""Status"", status);
                                rec[i].set(""Published"", false);
                                // rec.Save();
                            }
                        ");
                WriteLiteral(@"    statusChanged(rec);
                            //store.commitChanges();
                            gridPanel.getView().refresh();
                            limitsStore.reload();

                        }
                    });
                }
                gridPanel.mask('...');
                request();
            }


            var indeterminateButton = Ext.create('Ext.Button',
                {
                    xtype: 'button',
                    disabled: true,
                    text: 'Нет решения',
                    handler: function() { setAdmissionStatus(selRecord, 0); }
                });

            var admittedButton = Ext.create('Ext.Button',
                {
                    xtype: 'button',
                    disabled: true,
                    text: 'Зачислен',
                    handler: function() { setAdmissionStatus(selRecord, 1); }
                });

            var deniedButton = Ext.create('Ext.Button',
                {
  ");
                WriteLiteral(@"                  xtype: 'button',
                    disabled: true,
                    text: 'Не зачислен',
                    handler: function() { setAdmissionStatus(selRecord, 2); }
                });

            var sendButton = Ext.create('Ext.Button',
                {
                    xtype: 'button',
                    disabled: true,
                    text: 'Отправить в ЛК',
                    handler: function() {
                        setTimeout(function() {
                                selRecord.forEach(function(el, index, array) {
                                    el.set(""Published"", true);
                                });
                            },
                            0);
                        Ext.Ajax.request({
                            url: '");
#nullable restore
#line 269 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                             Write(Url.Action("PublishCompetitionGroupAdmission"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                            params: {\r\n                                studentId: selRecord.map(function(l) { return l.get(\"Id\"); }),\r\n                                propertyId: ");
#nullable restore
#line 272 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                       Write(ViewBag.PropertyId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
                            },
                            success: function(response) {
                                Ext.toast({ html: ""Сообщение отправлено"", align: 't' });
                                gridPanel.getView().refresh();
                            }
                        });

                    }
                });
            var downloadExcel = Ext.create('Ext.Button',
                {
                    xtype: 'button',
                    text: 'В Excel',
                    handler: function() {
                        var fileUrl = '");
#nullable restore
#line 287 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                  Write(Url.Action("DownloadCompetitionGroupStudents", new {Id = ViewBag.PropertyId}));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' +\r\n                            \"?filter=\" +\r\n                            encodeURIComponent(localStorage.getItem(\"");
#nullable restore
#line 289 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                                                Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""") || ""[]"");
                        window.location.href = fileUrl;
                    }
                });


            function statusChanged(rec) {
                if (rec == null)
                    return;
                for (var i in rec) {
                    var anotherAdmission = rec[i].get(""AnotherAdmission"");
                    var status = rec[i].get(""Status"");
                    if (!anotherAdmission) {
                        indeterminateButton.setDisabled(status == 0 || '");
#nullable restore
#line 302 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                                                   Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \'False\');\r\n                        admittedButton.setDisabled(status == 1 || \'");
#nullable restore
#line 303 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                                              Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \'False\');\r\n                        deniedButton.setDisabled(status == 2 || \'");
#nullable restore
#line 304 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                                            Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral("\' == \'False\');\r\n                        sendButton.setDisabled(\'");
#nullable restore
#line 305 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                           Write(ViewBag.CanEdit);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' == 'False');
                    } else {
                        indeterminateButton.disable();
                        admittedButton.disable();
                        deniedButton.disable();
                        sendButton.disable();
                    }
                }
            }

            var limitsStore = Ext.create(""Ext.data.Store"",
                {
                    autoLoad: true,
                    remoteSort: true,
                    remoteFilter: true,
                    groupField: 'groupField',
                    proxy: {
                        type: 'ajax',
                        url: '");
#nullable restore
#line 323 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                         Write(Url.Action("Limits"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\',\r\n                        extraParams: {\r\n                            id: \'");
#nullable restore
#line 325 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                            Write(ViewBag.Id);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"'
                        },
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });

            var grouping = Ext.create('Ext.grid.feature.Grouping',
                {
                    ftype: 'grouping',
                    collapsible: true,
                    startCollapsed: true,
                    groupHeaderTpl: '{name}'
                });

            gridPanel = Ext.create('Ext.grid.Panel',
                {
                    multiSelect: true,
                    region: 'center',
                    store: store,
                    id: 'studentsGrid',
                    loadMask: true,
                    listeners: {
                        selectionchange: function(el, records) {
                            selRecord = records.slice();
                            statusCha");
                WriteLiteral(@"nged(selRecord);
                        }
                    },
                    dockedItems: [
                        Ext.create('Ext.grid.Panel',
                            {
                                store: limitsStore,
                                features: [grouping],
                                columns: [
                                    { header: 'Направление', dataIndex: 'okso', width: 150, renderer: Urfu.renders.htmlEncodeWithToolTip },
                                    { header: 'Образовательная программа', dataIndex: 'profile', width: 200, renderer: Urfu.renders.htmlEncodeWithToolTip },
                                    { header: 'Лимит', dataIndex: 'limit', width: 100, renderer: Urfu.renders.htmlEncodeWithToolTip },
                                    { header: 'Зачислено', dataIndex: 'admitted', width: 120, renderer: Urfu.renders.htmlEncodeWithToolTip },
                                    { header: 'Свободных мест', dataIndex: 'freePlaces', width: 120, ren");
                WriteLiteral(@"derer: Urfu.renders.htmlEncodeWithToolTip }
                                ],
                                autoHeight: true,
                                autoWidth: true,
                                renderTo: Ext.getBody()
                            }),
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    text: 'Фильтры...',
                                    handler: function() { filtersWnd.show(); }
                                },
                                {
                                    xtype: 'button',
                                    text: ""Отменить фильтры"",
                                    handler: function() {
                                        filtersWnd.items.items.forEach(function(element, index, array) {
                   ");
                WriteLiteral("                         element.setValue(\'\');\r\n                                        });\r\n                                        localStorage.setItem(\"");
#nullable restore
#line 388 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                                                         Write(filterName);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""", []);
                                        loadStore();
                                    }
                                },
                                {
                                    xtype: 'button',
                                    text: ""Скрыть\\показать студентов c приоритетом"",
                                    handler: function() {
                                        window.showPriority = !window.showPriority;
                                        if (window.showPriority) {
                                            isPriority = true;
                                        } else {
                                            isPriority = null;
                                        }
                                        setFilters();
                                    }
                                },
                                '-',
                                indeterminateButton,
                                admittedButton,
      ");
                WriteLiteral(@"                          deniedButton,
                                '-',
                                sendButton,
                                downloadExcel
                            ]
                        },
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'checkbox',
                                    boxLabel: 'Скрыть неактивных студентов',
                                    value: sessionStorage.getItem(hideStudentsStoreName) || false,
                                    listeners: {
                                        change: function(t, newValue, oldValue, eOpts) {
                                            store.getProxy().setExtraParam('hideStudents', newValue);
                                            sessionStorage.setItem(hideStudentsStoreName, newValue);
                          ");
                WriteLiteral(@"                  console.log('alert', newValue);
                                            setFilters();
                                        }
                                    }
                                },
                            ]
                        }
                    ],
                    viewConfig: {
                        getRowClass: function(record) {
                            return !record.get('Published')
                                ? 'highlight'
                                : '';
                        },
                        markDirty: false
                    },
                    plugins: [
                        {
                            ptype: 'cellediting',
                            clicksToEdit: 1,
                            listeners: {
                                beforeedit: function(e, editor, opt) {
                                    return editor.record.data.Status != 1; // студентам со статусом ""Зачислен"" ");
                WriteLiteral(@"нельзя поменять роль
                                }
                            }
                        }
                    ],
                    columns: [
                        { xtype: 'rownumberer', width: 50 },
                        {
                            header: 'Направление',
                            align: 'center',
                            dataIndex: 'okso',
                            sortable: false,
                            width: 140,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Образовательная программа',
                            align: 'left',
                            dataIndex: 'profileCode',
                            sortable: false,
                            width: 120,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                     ");
                WriteLiteral(@"       header: 'Название группы',
                            dataIndex: 'GroupName',
                            width: 120,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Фамилия',
                            dataIndex: 'Surname',
                            width: 160,
                            renderer: function(value, metaData, record) {
                                return '<a href=""/PersonalInfo/Student?studentId=' + record.data.Id + '"">' + value + '</a>';
                            }
                        },
                        {
                            header: 'Имя',
                            dataIndex: 'Name',
                            width: 160,
                            renderer: Urfu.renders.htmlEncode
                        },
                        {
                            header: 'Отчество',
                            dataIndex: 'Patrony");
                WriteLiteral(@"micName',
                            width: 160,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Статус',
                            dataIndex: 'StudentStatus',
                            width: 120,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Личный номер студента',
                            dataIndex: 'PersonalNumber',
                            width: 120,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Рейтинг',
                            dataIndex: 'Rating',
                            width: 90
                        },
                        {
                            header: 'Целевой',
                            dataIndex: 'IsTarget',
           ");
                WriteLiteral(@"                 width: 100,
                            align: 'center',
                            renderer: function(val) { return val ? 'Да' : ""Нет"" }
                        },
                        {
                            header: 'Иностранный студент',
                            dataIndex: 'IsInternational',
                            width: 150,
                            align: 'center',
                            renderer: function(val) { return val ? 'Да' : ""Нет"" }
                        },
                        {
                            header: 'Вид возмещения затрат',
                            align: 'center',
                            dataIndex: 'Compensation',
                            width: 150,
                            renderer: Urfu.renders.htmlEncode
                        },
                        {
                            header: 'Приоритет в ЛК',
                            dataIndex: 'Priority',
                            align: '");
                WriteLiteral(@"center',
                            width: 150
                        },
                        {
                            header: 'Комментарий',
                            dataIndex: 'Comment',
                            align: 'center',
                            width: 250
                        },
                        {
                            header: 'Роль в ЛК',
                            dataIndex: 'Role',
                            id: 'student-role',
                            align: 'center',
                            width: 150,
                            sortable: false,
                            editor: {
                                xtype: 'combobox',
                                editable: false,
                                dataIndex: 'Role',
                                store: rolesStore,
                                allowBlank: false,
                                valueField: 'Id',
                                displayField: '");
                WriteLiteral(@"Name',
                                listeners: {
                                    'select': function(combo, records, eOpts) {
                                        combo.value = records.data.Name;
                                    }
                                }
                            },
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Дата приоритета',
                            dataIndex: 'Modified',
                            align: 'center',
                            width: 160,
                            renderer: Ext.util.Format.dateRenderer('d-n-Y H:i:s')
                        },
                        {
                            header: 'Состояние',
                            width: 160,
                            dataIndex: 'Status',
                            xtype: 'templatecolumn',
                            tpl: new Ext.XTemplate(");
                WriteLiteral(@"
                                '<tpl for=""."" if=""!!AnotherAdmission"">',
                                ""Зачислен в {AnotherAdmission:htmlEncode}"",
                                '<tpl else>',
                                '{[this.getAdmissionStatus(values.Status)]}',
                                ""</tpl>"",
                                {
                                    getAdmissionStatus: function(status) {
                                        return { 0: ""Нет решения"", 1: ""Зачислен"", 2: ""Не зачислен"" }[status];
                                    }
                                }
                            )
                        },
                        {
                            header: 'П-т', //'<span data-qtip=""&shy"" style=""height: 20px""></span>',
                            dataIndex: 'Id',
                            width: 60,
                            renderer: function(val, meta, rec) {
                                if (val)
                          ");
                WriteLiteral(@"          return Ext.String
                                        .format('<a onclick=\'showLastProjects(\""{0}\"")\' class=""glyphicon glyphicon-eye-open"" style=""cursor:pointer""></a>', val);
                                else return """";
                            }
                        },
                        //{
                        //    header: 'Преподаватель',
                        //    align: 'center',
                        //    dataIndex: 'Teacher',
                        //    width: 200,
                        //    renderer: Urfu.renders.htmlEncode
                        //},
                        {
                            header: 'Другой проект',
                            align: 'center',
                            dataIndex: 'OtherAdmission',
                            width: 210,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        }
                    ]
                });

            var items = [");
                WriteLiteral(@"
                gridPanel
            ];
            Urfu.createViewport('border', items);

            function findRoleIdByName(name) {
                var roleId = -1;
                rolesStore.data.items.forEach(function(item, i, arr) {
                    if (item.data.Name == name)
                        roleId = item.data.Id;
                });
                return roleId;
            }

            gridPanel.on('edit',
                function(editor, e) {
                    var data = e.record.data;
                    var record = store.data.find(""Id"", data.Id);
                    record.data.RoleId = findRoleIdByName(data.Role);
                    record.data.Role = data.Role;
                    Ext.getCmp('studentsGrid').getView().refresh();
                });

            var hideColumns = function() {
                if (columnsToShow.length > 0) {
                    gridPanel.columns.forEach(function(column, index, arr) {
                        column.setHi");
                WriteLiteral(@"dden(columnsToShow.includes(column.dataIndex) == false);
                    });
                }
            };
            hideColumns();

            gridPanel.on('columnschanged',
                function(ct, e) {
                    columnsToShow = ct.gridVisibleColumns.map(function(c) { return c.dataIndex; });
                    localStorage.setItem(columnsToShowName, JSON.stringify(columnsToShow));
                });
        });

        function showLastProjects(id) {
            Ext.Ajax.request({
                url: '");
#nullable restore
#line 664 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\ProjectAdmission\CompetitionGroupStudents.cshtml"
                 Write(Url.Action("GetStudentLastProjectsInfo"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                params: {
                    id: id,
                },
                success: function(response) {
                    if (response.responseText != """") {
                        var data = Ext.decode(response.responseText);
                        Ext.MessageBox.show({
                            title: 'Предыдущие проекты',
                            msg: data.msg,
                        });
                    }
                }
            });
        }
    </script>
");
            }
            );
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
