#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\OwnershipTypes\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "aa91b350efd6f2a9e3903600f83cde54e289a353"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_OwnershipTypes_Index), @"mvc.1.0.view", @"/Views/OwnershipTypes/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa91b350efd6f2a9e3903600f83cde54e289a353", @"/Views/OwnershipTypes/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_OwnershipTypes_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\OwnershipTypes\Index.cshtml"
  
    ViewBag.Title = "Формы собственности";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral(@"    <div class=""form-horizontal"">
        <script type=""text/javascript"">
            var lastFilter = [];
            Ext.onReady(function () {
                Ext.tip.QuickTipManager.init();

                var localStorageName = ""OwnershipTypesFilters"";

                var store = Ext.create(""Ext.data.BufferedStore"",
                    {
                        idProperty: 'Id',
                        fields: [
                            ""Id"", ""Name""
                        ],
                        autoLoad: true,
                        pageSize: 25,
                        remoteSort: true,
                        remoteFilter: true,
                        proxy: {
                            type: 'ajax',
                            url: '/OwnershipTypes/Index',
                            reader: {
                                type: 'json',
                                rootProperty: 'data',
                                totalProperty: 'total'
                   ");
            WriteLiteral(@"         }
                        }
                    });

                function setFilters() {
                    settings = [
                        { property: 'FullName', value: filtersWnd.getComponent(""FullName"").getValue() },
                        { property: 'ShortName', value: filtersWnd.getComponent(""ShortName"").getValue() }
                    ];
                    store.setFilters(settings);
                    localStorage.setItem(localStorageName, JSON.stringify(settings));
                }

                var prevSettings = {};
                try {
                    var prevSettingString = JSON.parse(localStorage.getItem(localStorageName) || ""[]"");

                    for (var i = 0; i < prevSettingString.length; i++) {
                        prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
                    }
                }
                catch (err) {
                }

                var filtersWnd = Ext.create('E");
            WriteLiteral(@"xt.window.Window',
                    {
                        title: ""Фильтры"",
                        closeAction: 'hide',
                        resizable: false,
                        autoHeight: true,
                        bodyPadding: 6,
                        defaults: {
                            xtype: 'textfield',
                            width: 400
                        },
                        items: [
                            {
                                xtype: 'hidden',
                                itemId: 'Id',
                            },
                            {
                                xtype: 'textfield',
                                fieldLabel: 'Форма собственности',
                                labelWidth: 140,
                                itemId: 'FullName',
                                width: 500,
                                value: prevSettings[""FullName""],
                            },
                   ");
            WriteLiteral(@"         {
                                xtype: 'textfield',
                                fieldLabel: 'Аббревиатура',
                                labelWidth: 140,
                                itemId: 'ShortName',
                                width: 300,
                                value: prevSettings[""ShortName""],
                            }
                        ],
                        buttons: [
                            {
                                text: ""ОК"",
                                handler: function () {
                                    setFilters();
                                    filtersWnd.hide();
                                }
                            },
                            {
                                text: ""Отмена"",
                                handler: function () { filtersWnd.hide(); }
                            }
                        ]
                    });

                setFilters();

      ");
            WriteLiteral(@"          function required(value) {
                    return (value != undefined && value.length > 0) ? true : ""Поле не может быть пустым"";
                }

                var editWnd = Ext.create('Ext.window.Window',
                    {
                        title: ""Форма собственности"",
                        closeAction: 'hide',
                        resizable: false,
                        autoHeight: true,
                        bodyPadding: 6,
                        rowHeight: 100,
                        defaults: {
                            xtype: 'textfield',
                            width: 400
                        },
                        items: [
                            {
                                xtype: 'hidden',
                                itemId: 'Id',
                            },
                            {
                                xtype: 'textfield',
                                fieldLabel: 'Форма собственности*',
  ");
            WriteLiteral(@"                              labelWidth: 140,
                                itemId: 'FullName',
                                width: 500,
                                validator: required
                            },
                            {
                                xtype: 'textfield',
                                fieldLabel: 'Аббревиатура*',
                                labelWidth: 140,
                                itemId: 'ShortName',
                                width: 300,
                                validator: required
                            }
                        ],
                        buttons: [
                            {
                                id: 'btnSaveCountry',
                                text: ""Сохранить"",
                                handler: function () {
                                    var isValid = true;
                                    editWnd.items.items.forEach(function (element, index, array) {");
            WriteLiteral(@"
                                        if (!element.isValid()) isValid = false;
                                    });
                                    if (!isValid) return false;

                                    Ext.Ajax.request({
                                            url: '");
#nullable restore
#line 157 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\OwnershipTypes\Index.cshtml"
                                             Write(Url.Action("EditOwnershipType"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                            params: {
                                                id: editWnd.getComponent(""Id"").getValue() ? editWnd.getComponent(""Id"").getValue() : 0,
                                                name: editWnd.getComponent(""FullName"").getValue(),
                                                shortName: editWnd.getComponent(""ShortName"").getValue()
                                            },
                                            success: function (response) {
                                                if (response.responseText != """") {
                                                    var data = Ext.decode(response.responseText);
                                                    if (data.success) {
                                                        editWnd.hide();
                                                        store.reload();
                                                    }
                                           ");
            WriteLiteral(@"         else
                                                    {
                                                        Ext.MessageBox.alert('Ошибка', data.message);
                                                    }
                                                }
                                            },
                                            failure: function (response) {
                                                Ext.MessageBox.alert('Ошибка', 'Неизвестная ошибка');
                                            }
                                        });
                                }
                            },
                            {
                                text: ""Отмена"",
                                handler: function () { editWnd.hide(); }
                            }
                        ]
                    });
                
                var gridPanel = Ext.create('Ext.grid.Panel',
                    {
                   ");
            WriteLiteral(@"     region: 'center',
                        store: store,
                        loadMask: true,
                        columnLines: true,
                        tbar: [
                            {
                                xtype: 'button',
                                text: ""Фильтры"",
                                handler: function () {
                                    filtersWnd.show();
                                }
                            },
                            {
                                xtype: 'button',
                                text: ""Отменить фильтры"",
                                handler: function () {
                                    store.clearFilter();
                                    settings = [];
                                    localStorage.setItem(localStorageName, JSON.stringify([]));
                                }
                            }, '-',
                            {
                           ");
            WriteLiteral(@"     xtype: 'button',
                                text: ""Добавить форму собственности"",
                                handler: function () {
                                    editWnd.items.items.forEach(function (element, index, array) {
                                        element.setValue("""");
                                        element.clearInvalid();
                                    });
                                    editWnd.show();
                                }
                            }
                        ],
                        columns: [
                            { xtype: 'rownumberer', width: 50 },
                            {
                                header: 'Форма собственности',
                                align: 'left',
                                dataIndex: 'FullName',
                                width: 500,
                                cellWrap: true,
                                renderer: Urfu.renders.htmlEnco");
            WriteLiteral(@"deWithToolTip
                            },
                            {
                                header: 'Аббревиатура',
                                align: 'left',
                                dataIndex: 'ShortName',
                                width: 200,
                                cellWrap: true,
                                renderer: Urfu.renders.htmlEncodeWithToolTip
                            },
                            {
                                xtype: 'actioncolumn',
                                region: 'center',
                                sortable: false,
                                width: 70,
                                items: [
                                    {
                                        icon: '");
#nullable restore
#line 249 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\OwnershipTypes\Index.cshtml"
                                          Write(Url.Content("~/Content/Images/edit.png"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                        iconCls: 'icon-padding',
                                        text: 'Редактировать',
                                        tooltip: 'Редактировать',
                                        handler: function (grid, rowIndex, colIndex) {
                                            var rec = grid.getStore().getAt(rowIndex);
                                            editWnd.items.items.forEach(function (element, index, array) {
                                              if (rec.data[element.itemId] != undefined)
                                                element.setValue(rec.data[element.itemId]);
                                            });
                                            editWnd.show();
                                        }
                                    },
                                    {
                                        icon: '");
#nullable restore
#line 263 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\OwnershipTypes\Index.cshtml"
                                          Write(Url.Content("~/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                        iconCls: 'icon-padding',
                                        text: 'Удалить',
                                        tooltip: 'Удалить',
                                        handler: function (grid, rowIndex, colIndex) {
                                            var request = function () {
                                            var rec = grid.getStore().getAt(rowIndex);
                                            Ext.Ajax.request({
                                                    url: '");
#nullable restore
#line 271 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\OwnershipTypes\Index.cshtml"
                                                     Write(Url.Action("RemoveOwnershipType"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                                                    params: {
                                                        id: rec.get(""Id"")
                                                    },
                                                    success: function (response) {
                                                        if (response.responseText != """") {
                                                            var data = Ext.decode(response.responseText);
                                                            if (data.success) {
                                                                store.reload();
                                                            }
                                                            else
                                                            {
                                                                Ext.MessageBox.alert('Ошибка', data.message);
                                                            }
               ");
            WriteLiteral(@"                                         }
                                                    },
                                                    failure: function (response) {
                                                        Ext.MessageBox.alert('Ошибка', 'Неизвестная ошибка');
                                                    }
                                                });
                                            }
                                            Ext.MessageBox.show({
                                                title: 'Информационное сообщение',
                                                msg: ""Удалить форму собственности?"",
                                                buttons: Ext.MessageBox.YESNO,
                                                fn: function (btn) {
                                                    if (btn === 'yes') {
                                                        request();
                                             ");
            WriteLiteral(@"       }
                                                }
                                            });
                                        }
                                    }
                                ]
                            }
                        ]

                    });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);


                gridPanel.getStore()
                .on('load',
                    function(store, records, options) {
                        var focus = '");
#nullable restore
#line 320 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\OwnershipTypes\Index.cshtml"
                                Write(ViewBag.Focus);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
                        if (focus && focus.length > 0) {

                            var focusRow = store.findExact('Id', parseInt(focus));
                            if (focusRow >= 0) {
                                var rowData = store.getAt(focusRow);
                                gridPanel.getView().focusRow(rowData);
                                gridPanel.getSelectionModel().select(rowData);
                            }
                        }
                        return false;
                    });

            });
        </script>
    </div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
