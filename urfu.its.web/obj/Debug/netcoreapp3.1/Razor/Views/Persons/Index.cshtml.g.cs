#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Persons\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "18407e50aad37f43f9dad07d527e4313f72d569f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Persons_Index), @"mvc.1.0.view", @"/Views/Persons/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"18407e50aad37f43f9dad07d527e4313f72d569f", @"/Views/Persons/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Persons_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Persons\Index.cshtml"
  
    ViewBag.Title = "Персоны";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        Ext.onReady(function () {
            var personsStore = Ext.create(""Ext.data.BufferedStore"",
                {
                    fields: [""id"", ""Name"", ""Surname"", ""PatronymicName"", ""Phone""],
                    autoLoad: true,
                    pageSize: 300,
                    remoteSort: true,
                    remoteFilter: true,
                    proxy: {
                        type: 'ajax',
                        url: '/Persons/Index',
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });

            var gridPanel = Ext.create('Ext.grid.Panel',
                {
                    region: 'center',
                    store: personsStore,
                    loadMask: true,
                    tbar: [
                        {
    ");
                WriteLiteral(@"                        xtype: 'label',
                            text: 'Фамилия'
                        },
                        {
                            id: 'txtSurname',
                            xtype: 'textfield',
                        },
                        {
                            xtype: 'label',
                            text: 'Имя'
                        },
                        {
                            id: 'txtName',
                            xtype: 'textfield',
                        },
                        {
                            xtype: 'label',
                            text: 'Отчество'
                        },
                        {
                            id: 'txtPatronymicName',
                            xtype: 'textfield'
                        },
                        {
                            xtype: 'button',
                            text: 'Применить',
                            handler: function ");
                WriteLiteral(@"() {
                                personsStore.filter([
                                    { property: 'Surname', value: Ext.getCmp('txtSurname').getValue() },
                                    { property: 'Name', value: Ext.getCmp('txtName').getValue() },
                                    { property: 'PatronymicName', value: Ext.getCmp('txtPatronymicName').getValue() }
                                    ]);
                            }
                        },
                        {
                            xtype: 'button',
                            text: 'Отменить',
                            handler: function () { personsStore.clearFilter(); }
                        }
                    ],
                    columns: [
                        { xtype:'rownumberer', width: 50 },
                        {
                            header: 'Фамилия',
                            dataIndex: 'Surname',
                            width: 200,
                         ");
                WriteLiteral(@"   renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Имя',
                            dataIndex: 'Name',
                            width: 150,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Отчество',
                            align: 'center',
                            dataIndex: 'PatronymicName',
                            width: 150,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Телефон',
                            align: 'center',
                            dataIndex: 'Phone',
                            width: 250,
                            sortable: false,
                            renderer: Ext.util.Format.htmlEncode
                        },
                    ]
            ");
                WriteLiteral("    });\r\n\r\n            var items = [\r\n                gridPanel\r\n            ];\r\n\r\n            Urfu.createViewport(\'border\', items);\r\n        });\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
