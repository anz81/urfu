#pragma checksum "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "35920016fd8edc2ff3734e0235ca3bfd2693ec0d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Document_ModuleWorkingPrograms), @"mvc.1.0.view", @"/Views/Document/ModuleWorkingPrograms.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\_ViewImports.cshtml"
using Urfu.Its.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
using Urfu.Its.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
using Urfu.Its.Web.DataContext;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
using Urfu.Its.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"35920016fd8edc2ff3734e0235ca3bfd2693ec0d", @"/Views/Document/ModuleWorkingPrograms.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"571aa92c4ca967469f2915635495580dde4274ca", @"/Views/_ViewImports.cshtml")]
    public class Views_Document_ModuleWorkingPrograms : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
  
    ViewBag.Title = "Список версий РП";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("<style>\r\n\r\n    .its-medium {\r\n        width: 24px;\r\n        height: 24px;\r\n        margin-left: 5px;\r\n    }\r\n</style>\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
<script type=""text/javascript"">
    var showDisciplines;
    var showChangeLists = function(docId, title) {
        var window = createChangeListsWindow(docId, 'Листы изменений модуля ' + title);
        window.show();
    };

    Ext.onReady(function() {
        Ext.tip.QuickTipManager.init();

        var documentTypes =
            ");
#nullable restore
#line 29 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
       Write(Html.Raw(Json.Encode(EnumHelper<VersionedDocumentType>.GetValues(VersionedDocumentType.ModuleWorkingProgram).Select(m => new {Value = m, Text = EnumHelper<VersionedDocumentType>.GetDisplayValue(m)}).ToList())));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
        var getTypeName = function (value) {
            for (var i = 0; i < documentTypes.length; i++) {
                if (documentTypes[i].Value === value) {
                    return documentTypes[i].Text;

                }
            }

            return value;
        };
        var documentTypeStore = Ext.create('Ext.data.Store',
            {
                fields: ['Value', 'Text'],
                data: documentTypes
            });
        var store = Ext.create(""Ext.data.BufferedStore"",
            {
                fields: [
                    ""VersionedDocumentId"", ""moduleId"", ""title"", ""shortTitle"", ""coordinator"", ""specialities"", ""SedOP"",
                    ""status"", { name: ""statusChangeTime"", type: 'date' }
                ],
                autoLoad: true,
                pageSize: 300,
                remoteSort: true,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: window.location.h");
                WriteLiteral(@"ref,
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                    }
                }
            });
        var disciplinesStore = Ext.create(""Ext.data.Store"",
            {
                fields: [
                    ""VersionedDocumentId"", ""disciplineId"", ""title"", ""ModuleWorkingProgramId"", ""version"",""status"",
                    { name: ""statusChangeTime"", type: 'date' }
                ],
                //autoLoad: true,
                remoteSort: true,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: '");
#nullable restore
#line 76 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                     Write(Url.Action("DisciplinesWorkingPrograms"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                    reader: { type: 'json' }
                }
            });

        var prevSettings = {};
        try {
            var prevSettingString = JSON.parse(localStorage.getItem(""ModuleWorkingProgramsFilters"") || ""[]"");

            for (var i = 0; i < prevSettingString.length; i++) {
                prevSettings[prevSettingString[i][""property""]] = prevSettingString[i][""value""];
            }
        } catch (err) {
        }
        var filtersWnd = null;

        //Название модуля, Координатор
        var setFilters = function() {
            var settings = [
                { property: 'title', value: filtersWnd.getComponent(""title"").getValue() },
                { property: 'coordinator', value: filtersWnd.getComponent(""coordinator"").getValue() },
                { property: 'type', value: filtersWnd.getComponent(""typeCombo"").getValue() },

            ];
            store.setFilters(settings);
            localStorage.setItem(""ModuleWorkingProgramsFilters"", JSON");
                WriteLiteral(@".stringify(settings));
        };

        filtersWnd = Ext.create('Ext.window.Window',
            {
                title: ""Фильтры"",
                closeAction: 'hide',
                resizable: false,
                autoHeight: false,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLabel: ""Название модуля"", itemId: ""title"", value: prevSettings[""title""] },
                    { fieldLabel: ""Координатор"", itemId: ""coordinator"", value: prevSettings[""coordinator""] },
                    {
                        fieldLabel: ""Тип документа"",
                        itemId: ""typeCombo"",
                        value: prevSettings[""type""],
                        xtype: ""combobox"",
                        store: documentTypeStore,
                        valueField: 'Value',
                        displayField: 'Text',
             ");
                WriteLiteral(@"           queryMode: 'local'

                    }
                ],
                buttons: [
                    {
                        text: ""OK"",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: ""Отмена"",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

        setFilters();
        var disciplinesGridPanel = Ext.create('Ext.window.Window',
            {
                title: 'Дисциплины',
                closeAction: 'hide',
                resizable: false,
                autoHeight: false,
                bodyPadding: 6,
                height: 600,
                layout: 'fit',
                width: 1200,
                items: [
                    {
                        xtype: 'grid',
           ");
                WriteLiteral(@"             id: 'disciplinesGrid',
                        loadMask: true,
                        columnLines: true,
                        //height: 800,
                        width: 1000,
                        store: disciplinesStore,
                        columns: [
                            { xtype: 'rownumberer', width: 50 },
                            {
                                header: 'Версия',
                                align: 'center',
                                dataIndex: 'version',
                                width: 100,
                                renderer: Ext.util.Format.htmlEncode
                            },
                            {
                                header: 'Название дисциплины',
                                dataIndex: 'title',
                                width: 400,
                                renderer: Urfu.renders.htmlEncodeWithToolTip
                            },
                            //{
  ");
                WriteLiteral(@"                          //    header: 'Дата изменения статуса',
                            //    align: 'center',
                            //    dataIndex: 'statusChangeTime',
                            //    width: 200,
                            //    renderer: Ext.util.Format.dateRenderer('d.m.Y H:i'),

                            //},
                            {
                                header: 'Статус',
                                align: 'center',
                                dataIndex: 'status',
                                width: 200,
                                renderer: Ext.util.Format.htmlEncode
                            },
                            {
                                header: 'Дата изменения статуса',
                                align: 'center',
                                dataIndex: 'statusChangeTime',
                                width: 200,
                                renderer: Ext.util.Format.dateRenderer('d.m.Y ");
                WriteLiteral(@"H:i'),

                            },
                            {
                                xtype: 'templatecolumn',
                                sortable: false,
                                tpl: '<a href=""/Document/{VersionedDocumentId}"">РПД</a>',
                                width: 100
                            },
                            {
                                xtype: 'actioncolumn',
                                region: 'center',
                                width: 200,
                                defaults: {
                                    metadata: {
                                        attr: 'style=""padding-left:10px;width:auto;""'
                                    }
                                },
                                items: [
                                    {
                                        icon: '");
#nullable restore
#line 220 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                                          Write(Url.Content("~/Content/Images/doc1.png?22"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', // Use a URL in the icon config
                                        iconCls: 'icon-padding',
                                        text: 'Скачать docx',
                                        tooltip: 'Скачать docx',
                                        handler: function(grid, rowIndex, colIndex) {
                                            var rec = grid.getStore().getAt(rowIndex);
                                            window.location =
                                                + rec.get('VersionedDocumentId') + '/Print?format=docx';

                                        }
                                    },
");
#nullable restore
#line 244 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                                     if (User.IsInRole(ItsRoles.Admin))
                                    {

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n                                    {\r\n                                icon: \'");
#nullable restore
#line 247 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                                  Write(Url.Content("~/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', // Use a URL in the icon config
                                iconCls: 'icon-padding',
                                text: 'Удалить',
                                tooltip: 'Удалить',
                                handler: function(grid, rowIndex, colIndex) {
                                    var rec = grid.getStore().getAt(rowIndex);
                                    //var grid = this.up('grid');
                                    var maskEl = grid.getEl();
                                    //var store = grid.getStore();
                                    removeRequest(false);

                                    function removeRequest(confirmed) {
                                        if (confirmed)
                                            maskEl.mask('Выполнение операции...');

                                        Ext.Ajax.request({
                                            url: '/DisciplineWorkingProgram/RemoveWorkingProgram',
                                 ");
                WriteLiteral(@"           params: {
                                                id: rec.get('VersionedDocumentId'),
                                                confirmed: confirmed
                                            },
                                            success: function (response) {
                                                if(confirmed)
                                                    maskEl.unmask();

                                                if (!confirmed) {
                                                    if (confirm(""Вы действительно хотите удалить версию РП?"")) {
                                                        removeRequest(true);
                                                    }
                                                } else {
                                                    disciplinesStore.load();
                                                }
                                            },
                                       ");
                WriteLiteral(@"     failure: function (d) {
                                                if (confirmed)
                                                    maskEl.unmask();

                                                console.error(d.responseText);
                                                alert(d.responseText);
                                            }
                                        });
                                    }
                                }

                                    }
                                                                        ");
#nullable restore
#line 292 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                                                                                }

#line default
#line hidden
#nullable disable
                WriteLiteral(@"                                ]
                            }
                        ]
                    }
                ]
            });

        var sendToSed = function (wpId, r) {
            var mainMaskEl = Ext.getCmp('MainGrid').getEl();
            mainMaskEl.mask('Выполнение операции...');
                    Ext.Ajax.request({
                            //method: 'GET',
                            url: '");
#nullable restore
#line 305 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                             Write(Url.Action("SendToSed","Document"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            params: {
                                //groupId: r.get('GroupId'),
                                wpId: wpId,
                            },
                            success: function (a) {
                                mainMaskEl.unmask();
                                var result = JSON.parse(a.responseText);
                                if(result.success)
                                {
                                    
                                    Ext.Msg.alert('Ok', 'РПМ отправлена в УПОП.');
                                    //todo взять из ответа
                                    r.set('Status', result.statusName);
                                    r.set('SedOp', result.sedOp);
                                    //r.set('statusChangeTime', result.statusChangeTime);
                                    Ext.getCmp('MainGrid').getView().refresh();
                                }
                                else
       ");
                WriteLiteral(@"                             Ext.Msg.alert('Ошибка', result.message);
                            },
                            failure: function (a) {
                                mainMaskEl.unmask();
                                var result = JSON.parse(a.responseText);
                                Ext.Msg.alert('Ошибка', 'РПМ не отправлена.');
                            }
                    });
                };

        var getStatus = function (wpId, r) {
            var mainMaskEl = Ext.getCmp('MainGrid').getEl();
            mainMaskEl.mask('Выполнение операции...');
                    Ext.Ajax.request({
                            //method: 'POST',
                            url: '");
#nullable restore
#line 339 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                             Write(Url.Action("GetSedStatus", "Document"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                            params: {
                                wpId: wpId,
                            },
                            success: function (a) {
                                //store.reload();
                                mainMaskEl.unmask();
                                var result = JSON.parse(a.responseText);
                                if(result.success)
                                {
                                    Ext.Msg.alert('Ok', 'Статус в СЭД: ' + result.statusName);

                                    r.set('Status', result.statusName);
                                    r.set('SedOp', result.sedOp);
                                  // r.set('statusChangeTime', result.statusChangeTime);

                                    Ext.getCmp('MainGrid').getView().refresh();
                                }
                                else
                                    Ext.Msg.alert('Ошибка', result.message);
                       ");
                WriteLiteral(@"     },
                            failure: function (a) {
                                mainMaskEl.unmask();
                                var result = JSON.parse(a.responseText);
                                Ext.Msg.alert('Ошибка', 'Ошибка при получении статуса');
                            }
                    });
                };

        var gridPanel = Ext.create('Ext.grid.Panel', {
            region: 'center',
            store: store,
            tbar: [
                {
                    xtype: 'button',
                    text: 'Фильтры...',
                    handler: function() { filtersWnd.show(); }
                },
                {
                    xtype: 'button',
                    text: ""Отменить фильтры"",
                    handler: function() {
                        store.clearFilter();
                        localStorage.setItem(""ModuleWorkingProgramsFilters"", JSON.stringify([]));
                    }
                }
            ],");
                WriteLiteral(@"
            loadMask: true,
            columnLines: true,
            id: 'MainGrid',
            viewConfig: {
                markDirty: false
            },
            columns: [
                { xtype: 'rownumberer', width: 50 },
                {
                    header: 'Версия',
                    align: 'center',
                    dataIndex: 'version',
                    width: 100,
                    renderer: Ext.util.Format.htmlEncode
                },
                {
                    header: 'Направления',
                    align: 'left',
                    dataIndex: 'specialities',
                    sortable: false,
                    width: 150,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Название модуля',
                    dataIndex: 'title',
                    width: 400,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                }");
                WriteLiteral(@",
                {
                    header: 'Координатор',
                    align: 'left',
                    dataIndex: 'coordinator',
                    width: 400,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                },
                {
                    header: 'Статус',
                    align: 'center',
                    dataIndex: 'Status',
                    width: 200,
                    renderer: Ext.util.Format.htmlEncode
                },
                {
                    header: 'Тип документа',
                    align: 'center',
                    dataIndex: 'type',
                    width: 200,
                    renderer: getTypeName,
                },
                {
                    header: 'Дата изменения статуса',
                    align: 'center',
                    dataIndex: 'statusChangeTime',
                    width: 200,
                    renderer: Ext.util.Format.dateRenderer('d.m.Y H:i'");
                WriteLiteral(@")
                },
                {
                    xtype: 'templatecolumn',
                    sortable: false,
                    tpl: new Ext.XTemplate(""<a href='/Document/{VersionedDocumentId}'>{[this.getTypeName(values.type)]}</a>"" +
                        ""<tpl if='this.hasDWP(values.type)'> <a href='javascript:showDisciplines({VersionedDocumentId},\""{title}\"");'>РПД</a>  </tpl>"" +
                        "" <a href='javascript:showChangeLists({VersionedDocumentId},\""{title}\"");'>ЛИ</a>"",
                        {
                            getTypeName: function (type) {
                                return getTypeName(type);
                            },
                            hasDWP: function(type) {
                                return type != ");
#nullable restore
#line 454 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                                          Write(VersionedDocumentType.GiaWorkingProgram.ToString("D"));

#line default
#line hidden
#nullable disable
                WriteLiteral(" && type != ");
#nullable restore
#line 454 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                                                                                                            Write(VersionedDocumentType.PracticesWorkingProgram.ToString("D"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
                            }
                        }),
                    width: 150
                },
                {
                    sortable: false,
                    hideable: false,
                    menuDisabled: true,
                    width: 230,
                    renderer: function (v, m, r) {
                        var id = Ext.id();
                        var sedOp = r.get(""SedOp"");
                        var text = sedOp ? 'Отправить в УПОП' : 'Получить статус СЭД';
                       
                        Ext.defer(function () {
                            Ext.widget('button', {
                                renderTo: id,
                                text: text,
                                width: 210,
                                handler: function () {
                                    var wpId = r.get(""VersionedDocumentId"");
                                    if (sedOp)
                                        sendToSed(wpId, r)");
                WriteLiteral(@";
                                    else
                                        getStatus(wpId, r);
                                }
                            });
                        }, 150);
                        
                        return Ext.String.format('<div id=""{0}""></div>', id);
                    }
                },
                {
                    xtype: 'actioncolumn',

                    region: 'center',
                    width: 200,
                    defaults: {
                        metadata: {
                            attr: 'style=""padding-left:10px;width:auto;""'
                        }
                    },
                    items: [
");
                WriteLiteral("                        {\r\n                            icon: \'");
#nullable restore
#line 511 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                              Write(Url.Content("~/Content/Images/doc1.png?22"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', // Use a URL in the icon config
                            iconCls: 'icon-padding',
                            text: 'Скачать docx',
                            tooltip: 'Скачать docx',
                            handler: function(grid, rowIndex, colIndex) {
                                var rec = grid.getStore().getAt(rowIndex);
                                window.location =
                                    + rec.get('VersionedDocumentId') + '/Print?format=docx';


                            }
                        }");
                WriteLiteral(",\r\n");
#nullable restore
#line 536 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                         if (User.IsInRole(ItsRoles.Admin))
                        {

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n                        {\r\n                            icon: \'");
#nullable restore
#line 539 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                              Write(Url.Content("~/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', // Use a URL in the icon config
                            iconCls: 'icon-padding',
                            text: 'Удалить',
                            tooltip: 'Удалить',
                            handler: function(grid, rowIndex, colIndex) {
                                var rec = grid.getStore().getAt(rowIndex);
                                var maskEl = this.up('grid').getEl();
                                var store = this.up('grid').getStore();
                                removeRequest(false);

                                function removeRequest(confirmed) {
                                    if (confirmed)
                                        maskEl.mask('Выполнение операции...');

                                    Ext.Ajax.request({
                                        url: '/WorkingPrograms/RemoveModuleWorkingProgram',
                                        params: {
                                            id: rec.get('VersionedDocumentId'),
   ");
                WriteLiteral(@"                                         confirmed: confirmed
                                        },
                                        success: function (response) {
                                            if(confirmed)
                                                maskEl.unmask();

                                            if (!confirmed) {
                                                if (confirm(""Вы действительно хотите удалить версию РП?"")) {
                                                    removeRequest(true);
                                                }
                                            } else {
                                                store.load();
                                            }
                                        },
                                        failure: function (d) {
                                            if (confirmed)
                                                maskEl.unmask();

                   ");
                WriteLiteral(@"                         console.error(d.responseText);
                                            alert(d.responseText);
                                        }
                                    });
                                }
                            }
                    }");
#nullable restore
#line 581 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                            }

#line default
#line hidden
#nullable disable
                WriteLiteral(@"                    ]
                }
            ]
        });

        showDisciplines = function(docId, title) {
            //disciplinesGridPanel.getComponent('Id').setValue(rec.get('Id'));
            disciplinesStore.proxy.setUrl(
                '");
#nullable restore
#line 590 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
            Write(Url.Action("DisciplinesWorkingPrograms"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"?moduleWPId=' + docId);
            disciplinesStore.load();
            disciplinesGridPanel.setTitle('Дисцилины модуля ' + title);
            disciplinesGridPanel.show();
        }

        var items = [
            gridPanel
        ];

        Urfu.createViewport('border', items);
    });

    function createChangeListsWindow(docId, title) {
        return Ext.create('Ext.window.Window', {
            title: title,
            closeAction: 'destroy',
            resizable: false,
            autoHeight: false,
            bodyPadding: 6,
            height: 600,
            layout: 'fit',
            width: 1000,
            tbar: [{
                xtype: 'button',
                text: 'Сформировать лист изменений',
                handler: function () {
                    var store = this.up('window').down('grid').getStore();
                    var window = new Ext.window.Window({
                        title: 'Выберите конечную версию',
                        viewMod");
                WriteLiteral(@"el: {
                            data: {
                                DocumentId: null
                            }
                        },
                        closeAction: 'destroy',
                        bodyPadding: 10,
                        layout: 'fit',
                        width: 250,
                        items: {
                            xtype: 'combobox',
                            queryMode: 'local',
                            displayField: 'Name',
                            valueField: 'DocumentId',
                            bind: {
                                value: '{DocumentId}'
                            },
                            store: {
                                autoLoad: true,
                                proxy: {
                                    type: 'ajax',
                                    url: '");
#nullable restore
#line 641 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                                     Write(Url.Action("GetChangeListTargetVersions", "WorkingPrograms"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"?id=' + docId,
                                    reader: { type: 'json' }
                                }
                            }
                        },
                        buttons: [{
                            text: 'Сформировать',
                            bind: {
                                disabled: '{!DocumentId}'
                            },
                            handler: function () {
                                var window = this.up('window');
                                var vm = this.lookupViewModel();
                                var targetId = vm.get('DocumentId');
                                var maskEl = this.up('window').getEl();
                                maskEl.mask('Выполнение операции...');

                                Ext.Ajax.request({
                                    url: '/WorkingPrograms/CreateChangeList',
                                    params: {
                                        sourceId: docId,
");
                WriteLiteral(@"                                        targetId: targetId
                                    },
                                    success: function (response) {
                                        maskEl.unmask();
                                        store.load();
                                        window.close();
                                    },
                                    failure: function (d) {
                                        maskEl.unmask();

                                        console.error(d.responseText);
                                        alert(d.responseText);
                                    }
                                });
                            }
                        }, {
                            text: 'Отмена',
                            handler: function() {
                                this.up('window').close();
                            }
                        }]
                    });
            ");
                WriteLiteral(@"        window.show();
                }
            }],
            items: [{
                xtype: 'grid',
                id: 'changeListsGrid',
                loadMask: true,
                columnLines: true,
                //height: 800,
                sortableColumns: false,
                store: {
                    autoLoad: true,
                    proxy: {
                        type: 'ajax',
                        url: '");
#nullable restore
#line 698 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                         Write(Url.Action("GetChangeLists", "WorkingPrograms"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"?id=' + docId,
                        reader: { type: 'json' }
                    }
                },
                columns: [{
                    xtype: 'rownumberer', width: 50
                }, {
                    header: 'Исходная версия',
                    dataIndex: 'SourceDisplayName',
                    width: 400,
                    renderer: Ext.util.Format.htmlEncode
                }, {
                    header: 'Конечная версия',
                    dataIndex: 'TargetDisplayName',
                    width: 400,
                    renderer: Urfu.renders.htmlEncodeWithToolTip
                }, {
                    xtype: 'actioncolumn',
                    region: 'center',
                    width: 80,
                    defaults: {
                        metadata: {
                            attr: 'style=""padding-left:10px;width:auto;""'
                        }
                    },
                    items: [{
                        icon: '");
#nullable restore
#line 724 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                          Write(Url.Content("~/Content/Images/doc1.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', // Use a URL in the icon config
                        iconCls: 'icon-padding',
                        text: 'Скачать docx',
                        tooltip: 'Скачать docx',
                        handler: function(grid, rowIndex, colIndex) {
                            var rec = grid.getStore().getAt(rowIndex);
                            window.location =
                                + rec.get('VersionedDocumentId') + '/Print?format=docx';
                        }
                    },
");
#nullable restore
#line 734 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                         if (User.IsInRole(ItsRoles.Admin))
                        {

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n                    {\r\n                        icon: \'");
#nullable restore
#line 737 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                          Write(Url.Content("~/Content/Images/remove.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"', // Use a URL in the icon config
                        iconCls: 'icon-padding',
                        text: 'Удалить',
                        tooltip: 'Удалить',
                        handler: function(grid, rowIndex, colIndex) {
                            var store = grid.getStore();
                            var rec = store.getAt(rowIndex);
                            var maskEl = grid.getEl();

                            removeRequest(false);

                            function removeRequest(confirmed) {
                                if (confirmed)
                                    maskEl.mask('Выполнение операции...');

                                Ext.Ajax.request({
                                    url: '/WorkingPrograms/RemoveChangeList',
                                    params: {
                                        id: rec.get('VersionedDocumentId'),
                                        confirmed: confirmed
                                    },
 ");
                WriteLiteral(@"                                   success: function (response) {
                                        if(confirmed)
                                            maskEl.unmask();

                                        if (!confirmed) {
                                            if (confirm(""Вы действительно хотите удалить Лист изменений?"")) {
                                                removeRequest(true);
                                            }
                                        } else {
                                            store.load();
                                        }
                                    },
                                    failure: function (d) {
                                        if (confirmed)
                                            maskEl.unmask();

                                        console.error(d.responseText);
                                        alert(d.responseText);
                                    }
   ");
                WriteLiteral("                             });\r\n                            }\r\n                        }\r\n                    }");
#nullable restore
#line 780 "D:\-urfu\its\Urfu.Its.Web\Urfu.Its.Web\Views\Document\ModuleWorkingPrograms.cshtml"
                            }

#line default
#line hidden
#nullable disable
                WriteLiteral("]\r\n                }]\r\n            }]\r\n        });\r\n    }\r\n</script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
