@model List<Urfu.Its.Web.Controllers.MinorReportVM>
@{
    ViewBag.Title = "Отчет по секциям ФК По зачисленным студентам";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";
}
@section scripts
{
    <script type="text/javascript">

        Ext.onReady(function () {
            Ext.Ajax.setTimeout(1200000);
            Ext.tip.QuickTipManager.init();

            Ext.define('ComboBoxModel',
            {
                extend: 'Ext.data.Model',
                fields:
                [
                    { type: 'string', name: 'Id' },
                    { type: 'string', name: 'Name' }
                ]
            });

            function parseJson(json) {
                var data = JSON.parse(json.replace(/&quot;/g, '"'));
                return data;
            }
            
            var dataSemesters = parseJson('@ViewBag.Semesters');
            var SemestersStore = Ext.create("Ext.data.Store",
                {
                    data: dataSemesters
                });

            var dataYears = parseJson('@ViewBag.Years');
            var yearsStore = Ext.create("Ext.data.Store",
                {
                    data: dataYears,

                });
            
            var store = Ext.create("Ext.data.Store",
            {
                fields: [
                    "CompetitionGroupName", "moduleName", "GroupName", "Surname", "Name", "PatronymicName", "Rating", "IsTarget", "IsInternational",
                    "Compensation", "MinStudentsCount", "MaxStudentsCount", "specialities", "StudentStatus"
                ],
                groupField: 'CompetitionGroupName',
                autoLoad: false,
                //pageSize: 300,
                remoteSort: true,
                remoteFilter: true,

                proxy: {
                    type: 'ajax',
                    url: window.location.pathname ,
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                    },
                    timeout: 1200000
                }
            });
            var defaultYear = @(DateTime.Now.Month < 7? DateTime.Now.Year -1 : DateTime.Now.Year);
            var prevSettings = {Year:defaultYear,semesterId:@(DateTime.Now.Month < 7?2:1)};

            try {
                var prevSettingString = JSON.parse(localStorage.getItem("SectionFKReportFilters") || "[]");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i]["property"]] = prevSettingString[i]["value"];
                }
            } catch (err) {

            }


            var semesterCmbx = Ext.create('Ext.form.ComboBox',
           {
               xtype: 'combobox',
               //header: "Семестр",
               fieldLabel: 'Семестр',
               store: SemestersStore,
               value: prevSettings["semesterId"] || "@(DateTime.Now.Month < 7?2:1)",
               valueField: 'Id',
               displayField: 'Name',
               queryMode: 'remote',
               editable: false,
               disableKeyFilter: false,
               width: 300
           });
            var yearCmbx = Ext.create('Ext.form.ComboBox',
          {
              xtype: 'combobox',
              //header: "Год",
              fieldLabel: 'Год',
              store: yearsStore,
              value: prevSettings["Year"] || defaultYear,
              valueField: 'Id',
              displayField: 'Name',
              queryMode: 'remote',
              editable: false,
              disableKeyFilter: false,
              width: 200
          });
            var filtersWnd = null;
            function loadStore() {
                store.proxy.setUrl(window.location.pathname +
                    '?filter=' +
                    encodeURIComponent(localStorage.getItem("SectionFKReportFilters")));
                store.load();
            }
            var setFilters = function() {
                var settings = [
                    { property: 'CompetitionGroupName', value: filtersWnd.getComponent("CompetitionGroupNameField").getValue() },
                    { property: 'GroupName', value: filtersWnd.getComponent("GroupNameField").getValue() },
                    { property: 'moduleName', value: filtersWnd.getComponent("moduleNameField").getValue() },
                    { property: 'Surname', value: filtersWnd.getComponent("SurnameField").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent("NameField").getValue() },
                    { property: 'PatronymicName', value: filtersWnd.getComponent("PatronymicNameField").getValue() },
                    { property: 'IsTarget', value: filtersWnd.getComponent("IsTargetField").getValue().IsTargetField },
                    { property: 'semesterId', value: semesterCmbx.getValue() || 0, verb: 'Equals' },
                    { property: 'Year', value: yearCmbx.getRawValue() || defaultYear, verb: 'Equals' },
                    {
                        property: 'IsInternational',
                        value: filtersWnd.getComponent("IsInternationalField").getValue().IsInternationalField
                    }
                ];
                //store.setFilters(settings);
                localStorage.setItem("SectionFKReportFilters", JSON.stringify(settings));
                loadStore();
             
            };
            
            var grouping = Ext.create('Ext.grid.feature.Grouping',
            {
                ftype: 'grouping',
                collapsible: true,
                startCollapsed: true,
                hideGroupedHeader: true,
                groupHeaderTpl: '{name} / Лимит нижний {[values.rows[0].data.MinStudentsCount]} / Лимит верхний {[values.rows[0].data.MaxStudentsCount]} / Зачислено: {rows.length} / Год: {[values.rows[0].data.Year]} / Семестр: {[values.rows[0].data.Semester]} '
            });

            filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: "Фильтры",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: true,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 500
                    },
                    items: [
                        { fieldLabel: "Секция", itemId: "moduleNameField", value: prevSettings["moduleName"] },
                        { fieldLabel: "Конкурсная группа", itemId: "CompetitionGroupNameField", value: prevSettings["CompetitionGroupName"] },
                        { fieldLabel: "Название группы", itemId: "GroupNameField", value: prevSettings["GroupName"] },
                        { fieldLabel: "Фамилия", itemId: "SurnameField", value: prevSettings["Surname"] },
                        { fieldLabel: "Имя", itemId: "NameField", value: prevSettings["Name"] },
                        { fieldLabel: "Отчество", itemId: "PatronymicNameField", value: prevSettings["PatronymicName"] },
                        { fieldLabel: "Номер", itemId: "PersonalNumber", value: prevSettings["PersonalNumber"] },
                        yearCmbx,
                        semesterCmbx,
                      {
                        xtype: 'radiogroup',
                        fieldLabel: 'Целевой',
                        itemId: "IsTargetField",
                        value: prevSettings["IsTarget"],
                        items: [
                            {
                                boxLabel: 'Все',
                                name: 'IsTargetField',
                                inputValue: ''

                            }, {
                                boxLabel: 'Да',
                                name: 'IsTargetField',
                                inputValue: 'true'
                            }, {
                                boxLabel: 'Нет',
                                name: 'IsTargetField',
                                inputValue: 'false'
                            }
                        ]
                    },
                    {
                        xtype: 'radiogroup',
                        fieldLabel: 'Иностранный',
                        itemId: "IsInternationalField",
                        value: prevSettings["IsInternational"],
                        items: [
                            {
                                boxLabel: 'Все',
                                name: 'IsInternationalField',
                                inputValue: ''

                            }, {
                                boxLabel: 'Да',
                                name: 'IsInternationalField',
                                inputValue: 'true'
                            }, {
                                boxLabel: 'Нет',
                                name: 'IsInternationalField',
                                inputValue: 'false'
                            }
                        ]
                    }
                ],
                buttons: [
                    {
                        text: "OK",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: "Отмена",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

            //loadStore();
            setFilters();
            //semesterCmbx.on('select', setFilters);
            //yearCmbx.on('select', setFilters);
            var gridPanel = null;

            var downloadReport = Ext.create('Ext.Button',
            {
                xtype: 'button',
                text: 'Отчёт по секциям в Excel',
                handler: function() {
                    var fileUrl = '@Url.Action("DownloadReport")' +
                        "?filter=" +
                        encodeURIComponent(localStorage.getItem("SectionFKReportFilters") || "[]");
                    window.location.href = fileUrl;
                }
            });

            var downloadDivisionReport = Ext.create('Ext.Button',
            {
                xtype: 'button',
                text: 'Отчёт по подразделениям в Excel',
                handler: function() {
                    var fileUrl = '@Url.Action("DownloadDivisionReport")' +
                        "?filter=" +
                        encodeURIComponent(localStorage.getItem("SectionFKReportFilters") || "[]");
                    window.location.href = fileUrl;
                }
            });



            gridPanel = Ext.create('Ext.grid.Panel',
            {
                multiSelect: true,
                region: 'center',
                store: store,
                loadMask: true,
                columnLines: true,
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                    },
                    //semesterCmbx,
                    //yearCmbx,
                   /* {
                        xtype: 'button',
                        text: "Применить",
                        handler: function () {
                            setFilters();
                        }
                    }*/,
                    {
                        xtype: 'button',
                        text: "Отменить фильтры",
                        handler: function() {
                            localStorage.setItem("SectionFKReportFilters", JSON.stringify([
                                { property: 'semesterId', value: semesterCmbx.getValue(), verb: 'Equals' },
                                { property: 'Year', value: yearCmbx.getRawValue(), verb: 'Equals' },
                            ]));
                            //store.clearFilter();
                            store.proxy.setUrl(window.location.pathname + '?filter='+encodeURIComponent(localStorage.getItem("SectionFKReportFilters")));
                            store.load();
                            //store.setFilters();

                        }
                    }, '-',
                    {
                        xtype: 'button',
                        text: "Развернуть\\Свернуть группировку",
                        handler: function() {
                            window.groupsCollapsed = !window.groupsCollapsed;
                            if (window.groupsCollapsed)
                                grouping.expandAll();
                            else
                                grouping.collapseAll();
                        }
                    },
                    '-',
                    downloadReport,
                    downloadDivisionReport
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Секция',
                        dataIndex: 'moduleName',
                        width: 160,
                        renderer: Ext.util.Format.htmlEncode
                    },
                       {
                           header: 'Приоритет',
                           dataIndex: 'priority',
                           width: 130,
                           renderer: Ext.util.Format.htmlEncode
                       },
                    {
                        header: 'Название группы',
                        dataIndex: 'GroupName',
                        width: 160,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Фамилия',
                        dataIndex: 'Surname',
                        width: 200,
                        renderer: function(value, metaData, record) {
                            return '<a href="/PersonalInfo/Student?studentId=' + record.data.Id + '">' + value + '</a>';
                        }
                    },
                    {
                        header: 'Имя',
                        dataIndex: 'Name',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Отчество',
                        dataIndex: 'PatronymicName',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Статус студента',
                        dataIndex: 'StudentStatus',
                        align: 'center',
                        width: 125
                    },
                    {
                        header: 'Пол',
                        dataIndex: 'male',
                        width: 90
                    },                    
                    {
                        header: 'Рейтинг',
                        dataIndex: 'Rating',
                        width: 90
                    },
                    {
                        header: 'Целевой',
                        dataIndex: 'IsTarget',
                        width: 100,
                        align: 'center',
                        renderer: function(val) { return val ? 'Да' : "Нет" }
                    },
                    {
                        header: 'Иностранный студент',
                        dataIndex: 'IsInternational',
                        width: 200,
                        align: 'center',
                        renderer: function(val) { return val ? 'Да' : "Нет" }
                    },
                    {
                        header: 'Спортсмен',
                        dataIndex: 'IsTarget',
                        width: 100,
                        align: 'center',
                        renderer: function (val) { return val ? 'Да' : "Нет" }
                    },
                    {
                        header: 'Вид возмещения затрат',
                        align: 'center',
                        dataIndex: 'Compensation',
                        width: 210,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Лимит нижний',
                        align: 'center',
                        dataIndex: 'MinStudentsCount',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Лимит верхний',
                        align: 'center',
                        dataIndex: 'MaxStudentsCount',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    }
                ],
                features: [grouping]
            });
            d = null;
            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
    </script>
}
