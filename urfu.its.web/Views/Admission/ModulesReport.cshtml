@using Urfu.Its.Common
@using Urfu.Its.Web.DataContext

@{
    Layout = "~/Views/Shared/_ExtLayout.cshtml";
}

@section scripts
{
    <script type="text/javascript">

        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();

            var store = Ext.create("Ext.data.Store",
            {
                fields: [
                    "Id", "GroupName", "Surname", "Name", "PatronymicName", "Rating", "IsTarget", "IsInternational",
                    "Compensation", "Status", "StudentsCount", "variant"
                ],
                groupField: 'moduleTitle',
                autoLoad: true,
                //pageSize: 300,
                remoteSort: true,
                remoteFilter: true,
                remoteGroup: true,
                proxy: {
                    type: 'ajax',
                    url: window.location.pathname + window.location.search,
                    reader: {
                        type: 'json',
                        rootProperty: 'data',
                        totalProperty: 'total'
                    }
                }
            });
            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem("ModulesReportFilters") || "[]");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i]["property"]] = prevSettingString[i]["value"];
                }
            } catch (err) {

            }

            filtersWnd = null;
            var setFilters = function() {
                var settings = [
                    { property: 'GroupName', value: filtersWnd.getComponent("GroupNameField").getValue() },
                    { property: 'Surname', value: filtersWnd.getComponent("SurnameField").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent("NameField").getValue() },
                    { property: 'Status', value: filtersWnd.getComponent("StatusField").getValue() },
                    { property: 'PatronymicName', value: filtersWnd.getComponent("PatronymicNameField").getValue() },
                    { property: 'IsTarget', value: filtersWnd.getComponent("IsTargetField").getValue().IsTargetField },
                    {
                        property: 'IsInternational',
                        value: filtersWnd.getComponent("IsInternationalField").getValue().IsInternationalField
                    }
                ];
                store.setFilters(settings);
                localStorage.setItem("ModulesReportFilters", JSON.stringify(settings));
            };
            var grouping = Ext.create('Ext.grid.feature.Grouping',
            {
                ftype: 'grouping',
                collapsible: true,
                startCollapsed: true,
                hideGroupedHeader: true,
                groupHeaderTpl: '{name} Зачислено: {rows.length}' // Зачислено: {rows.length}' 
            });

            filtersWnd = Ext.create('Ext.window.Window',
            {
                title: "Фильтры",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLabel: "Название группы", itemId: "GroupNameField", value: prevSettings["GroupName"] },
                    { fieldLabel: "Фамилия", itemId: "SurnameField", value: prevSettings["Surname"] },
                    { fieldLabel: "Имя", itemId: "NameField", value: prevSettings["Name"] },
                    { fieldLabel: "Статус", itemId: "StatusField", value: prevSettings["Status"] },
                    { fieldLabel: "Номер", itemId: "PersonalNumber", value: prevSettings["PersonalNumber"] },
                    { fieldLabel: "Отчество", itemId: "PatronymicNameField", value: prevSettings["PatronymicName"] },
                    {
                        xtype: 'radiogroup',
                        fieldLabel: 'Целевой',
                        itemId: "IsTargetField",
                        value: prevSettings["IsTarget"],
                        items: [
                            {
                                boxLabel: 'Все',
                                name: 'IsTargetField',
                                inputValue: ''

                            }, {
                                boxLabel: 'Да',
                                name: 'IsTargetField',
                                inputValue: 'true'
                            }, {
                                boxLabel: 'Нет',
                                name: 'IsTargetField',
                                inputValue: 'false'
                            }
                        ]
                    },
                    {
                        xtype: 'radiogroup',
                        fieldLabel: 'Иностранный',
                        itemId: "IsInternationalField",
                        value: prevSettings["IsInternational"],
                        items: [
                            {
                                boxLabel: 'Все',
                                name: 'IsInternationalField',
                                inputValue: ''

                            }, {
                                boxLabel: 'Да',
                                name: 'IsInternationalField',
                                inputValue: 'true'
                            }, {
                                boxLabel: 'Нет',
                                name: 'IsInternationalField',
                                inputValue: 'false'
                            }
                        ]
                    }
                ],
                buttons: [
                    {
                        text: "OK",
                        handler: function() {
                            //store.filter([
                            //    { property: 'GroupName', value: filtersWnd.getComponent("GroupNameField").getValue() },
                            //    { property: 'Surname', value: filtersWnd.getComponent("SurnameField").getValue() },
                            //    { property: 'Name', value: filtersWnd.getComponent("NameField").getValue() },
                            //    { property: 'StudentStatus', value: filtersWnd.getComponent("StudentStatus").getValue() },
                            //    { property: 'PersonalNumber', value: filtersWnd.getComponent("PersonalNumber").getValue() },
                            //    { property: 'PatronymicName', value: filtersWnd.getComponent("PatronymicNameField").getValue() },
                            //    { property: 'IsTarget', value: filtersWnd.getComponent("IsTargetField").getValue() },
                            //    { property: 'IsInternational', value: filtersWnd.getComponent("IsInternationalField").getValue() }
                            //]);
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: "Отмена",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

            setFilters();
            var gridPanel = null;

            var downloadReport = Ext.create('Ext.Button',
            {
                xtype: 'button',
                text: 'Отчёт по модулям в Excel',
                handler: function() {
                    var fileUrl = '@Url.Action("DownloadModulesReport")' +
                        "?programId=@ViewBag.programId&filter=" +
                        encodeURIComponent(localStorage.getItem("ModulesReportFilters") || "[]");
                    window.location.href = fileUrl;
                }
            });

            var downloadPriorityReport = Ext.create('Ext.Button',
            {
                xtype: 'button',
                text: 'Отчёт по приоритетам в Excel',
                handler: function() {
                    var fileUrl = '@Url.Action("DownloadPrioritiesReport")' +
                        "?programId=@ViewBag.programId&filter=" +
                        encodeURIComponent(localStorage.getItem("ModulesReportFilters") || "[]");
                    window.location.href = fileUrl;
                }
            });

            gridPanel = Ext.create('Ext.grid.Panel',
            {
                multiSelect: true,
                region: 'center',
                store: store,
                loadMask: true,
                columnLines: true,
                tbar: [
                    {
                        xtype: 'box',
                        autoEl: { tag: 'a', href: '@Url.Action("ProgramsForReports")', html: 'Возврат на список' }
                    },
                    '-',
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                    },
                    {
                        xtype: 'button',
                        text: "Отменить фильтры",
                        handler: function() {
                            localStorage.setItem("ModulesReportFilters", []);
                            store.clearFilter();
                        }
                    },
                    {
                        xtype: 'button',
                        text: "Развернуть\\Свернуть группировку",
                        handler: function () {
                            window.groupsCollapsed = !window.groupsCollapsed;
                            if (window.groupsCollapsed)
                                grouping.expandAll();
                            else
                                grouping.collapseAll();
                        }
                    },
                    '-',
                    downloadReport,
                    downloadPriorityReport
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Название группы',
                        dataIndex: 'GroupName',
                        width: 160,
                        renderer: Ext.util.Format.htmlEncode 
                    },
                    {
                        header: 'Фамилия',
                        dataIndex: 'Surname',
                        width: 200,
                        renderer: function(value, metaData, record) {
                            return '<a href="/PersonalInfo/Student?studentId=' + record.data.Id + '">' + value + '</a>';
                        }
                    },
                    {
                        header: 'Имя',
                        dataIndex: 'Name',
                        width: 200,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Отчество',
                        dataIndex: 'PatronymicName',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Статус',
                        dataIndex: 'Status',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Рейтинг',
                        dataIndex: 'Rating',
                        width: 90
                    },
                    {
                        header: 'Целевой',
                        dataIndex: 'IsTarget',
                        width: 100,
                        align: 'center',
                        renderer: function(val) { return val ? 'Да' : "Нет" }
                    },
                    {
                        header: 'Иностранный студент',
                        dataIndex: 'IsInternational',
                        width: 200,
                        align: 'center',
                        renderer: function(val) { return val ? 'Да' : "Нет" }
                    },
                    {
                        header: 'Траектория',
                        dataIndex: 'variant',
                        width: 200,
                        align: 'center',
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Вид возмещения затрат',
                        align: 'center',
                        dataIndex: 'Compensation',
                        width: 210,
                        renderer: Urfu.renders.htmlEncode
                    },
                    {
                        header: 'Лимит',
                        align: 'center',
                        dataIndex: 'StudentsCount',
                        width: 100,
                        renderer: Urfu.renders.htmlEncode
                    }
                ],
                features: [grouping]
            });
            d = null;
            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
    </script>
}

