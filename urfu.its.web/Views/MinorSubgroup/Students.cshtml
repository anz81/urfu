@model Urfu.Its.Web.Controllers.MinorSubgroupVM
@{
    ViewBag.Title = "Редактирование студентов подгруппы " + Model.Subgroup.Name;
    Layout = "~/Views/Shared/_ExtLayout.cshtml";
}

@section scripts
{
    <script type="text/javascript">
        var subgroupId = @Model.Id;
        var lastFilter;
        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();

            var store = Ext.create("Ext.data.Store",
            {
                idProperty: 'Id',
                fields: [
                    "Id", "GroupName", "Surname", "Name", "PatronymicName", { name: "Included", type: 'bool' },
                    "AnotherGroup", "Score", "Mark"
                ],
                autoLoad: true,
                remoteSort:
                    true,
                remoteFilter:
                    true,
                proxy:
                {
                    type: 'ajax',
                    url:
                        '/MinorSubgroup/Students?id=' + @Model.Subgroup.Id,
                    reader:
                    {
                        type: 'json',
                        rootProperty:
                            'data',
                        totalProperty:
                            'total'
                    }
                },
                listeners: {
                    update: function(self, record, operation, modifiedFieldNames, details, eOpts) {
                        if (operation !== Ext.data.Model.EDIT) {
                            //self.sourcerejectChanges();
                            return;
                        }
                        if (modifiedFieldNames.length !== 1 || modifiedFieldNames[0] !== 'Included') {
                            return;
                        }

                    }
                }
            });

            function studentsMembership(include) {
                var title = include ? "Зачисление" : "Удаление зачислений";
                Ext.MessageBox.wait(title);
                setTimeout(store.each(function(record, index) {
                        if (!record.get('AnotherGroup')) {
                            record.set("Included", include);
                        }
                    }),
                    0);
                Ext.Ajax.request({
                    url: '/MinorSubgroup/StudentsMembership',
                    method: 'POST',
                    params: {
                        include: include,
                        subgroupId: subgroupId,
                        filter: JSON.stringify(lastFilter)
                    },
                    success: function(response) {
                        var data = Ext.decode(response.responseText);
                        if (response.status !== 200)
                            window.reload();
                        Ext.MessageBox.hide();
                        if (data.msg && data.msg.length > 0) {
                            Ext.MessageBox.show({
                                title: 'Информационное сообщение',
                                msg: data.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO // иконка мб {ERROR,INFO,QUESTION,WARNING}
                                //width:300,                       // есть еще minWidth
                                //closable:false,                  // признак наличия икнки закрытия окна
                            });
                        }
                        store.commitChanges();
                    },
                    complete: function(response) {
                        Ext.MessageBox.hide();
                    }
                });
            }

            var filtersWnd = Ext.create('Ext.window.Window',
            {
                title: "Фильтры",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLabel: "Фамилия", itemId: "Surname" },
                    { fieldLabel: "Имя", itemId: "Name" },
                    { fieldLabel: "Отчество", itemId: "PatronymicName" },
                    { fieldLabel: "Группа", itemId: "Group" }

                ],
                buttons: [
                    {
                        text: "OK",
                        handler: function() {
                            lastFilter = [
                                { property: 'Surname', value: filtersWnd.getComponent("Surname").getValue() },
                                { property: 'Name', value: filtersWnd.getComponent("Name").getValue() },
                                {
                                    property: 'PatronymicName',
                                    value: filtersWnd.getComponent("PatronymicName").getValue()
                                },
                                { property: 'GroupName', value: filtersWnd.getComponent("Group").getValue() }

                            ];
                            store.filter(lastFilter);
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: "Отмена",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });
            //Ext.util.Format.decimalSeparator = ',';
            var gridPanel = Ext.create('Ext.grid.Panel',
            {
                region: 'center',
                store: store,
                loadMask: true,
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                    },
                    {
                        xtype: 'button',
                        text: "Отменить фильтры",
                        handler: function() {
                            store.clearFilter();
                            lastFilter = [];
                        }
                    },
                    {
                        xtype: 'button',
                        text: "Скрыть\\показать включенных студентов",
                        handler: function() {
                            window.showIncluded = !window.showIncluded;
                            if (window.showIncluded) {
                                store.filter('Included', true);
                                lastFilter.Included = true;
                            } else {
                                store.clearFilter();
                                lastFilter = [];
                            }
                        }
                    },
                    {
                        xtype: 'button',
                        text: "Список подгрупп",
                        handler: function() { window.location = "/MinorSubgroup/Index?focus=@Model.Id"; }
                    },
                    {
                        xtype: 'button',
                        text: "Зачислить",
                        handler: function() {
                            studentsMembership(true);
                        }
                    },
                    {
                        xtype: 'button',
                        text: "Удалить зачисления",
                        handler: function() {
                            studentsMembership(false);
                        }
                    },
                    {
                        xtype: 'button',
                        text: "Экспорт в Excel",
                        handler: function() {
                            window.location = "/MinorSubgroup/DownloadSubgroupReport?subgroupId=@Model.Id";
                        }
                    }
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Группа',
                        dataIndex: 'GroupName',
                        width: 150,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Фамилия',
                        dataIndex: 'Surname',
                        width: 200,
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Имя',
                        dataIndex: 'Name',
                        width: 200,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Отчество',
                        dataIndex: 'PatronymicName',
                        width: 200,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    @if (Model.HasScores)
                    {
                        <text>
                            {
                                header: 'Балл',
                                dataIndex: 'Score',
                                width: 100,
                                //renderer: Ext.util.Format.numberRenderer('0.0'),
                                editor: {
                                    maxValue: 100,
                                    minValue: 0,
                                    xtype: 'numberfield',
                                    hideTrigger:true,
                                }
                            },
                            {
                                header: 'Оценка',
                                dataIndex: 'Mark',
                                width: 100,
                                renderer: Urfu.renders.htmlEncodeWithToolTip
                            },
                        </text>
                    }
                    {
                        header: 'В подгруппе',
                        dataIndex: 'Included',
                        width: 150,
                        xtype: 'checkcolumn',

                        listeners: {
                            beforecheckchange: function(column, recordIndex) {
                                var record = store.getAt(recordIndex);
                                //if (record.get('AnotherGroup') !== null) {
                                //    return false;
                                //}
                                var included = record.get('Included');
                                var studentId = record.get('Id');
                                var subgroupId = @Model.Id;

                                Ext.Ajax.request({
                                    url: '/MinorSubgroup/StudentMembership',
                                    method: 'POST',
                                    params: {
                                        include: !included,
                                        studentId: studentId,
                                        subgroupId: subgroupId
                                    },
                                    success: function(response) {
                                        var data = Ext.decode(response.responseText);
                                        if (response.status === 200)
                                            record.commit();
                                        else
                                            record.reject();
                                        if (data.msg && data.msg.length > 0) {
                                            Ext.MessageBox.show({
                                                title: 'Информационное сообщение',
                                                msg: data.msg,
                                                buttons: Ext.MessageBox.OK,
                                                icon: Ext.MessageBox.INFO // иконка мб {ERROR,INFO,QUESTION,WARNING}
                                                //width:300,                       // есть еще minWidth
                                                //closable:false,                  // признак наличия икнки закрытия окна
                                            });
                                        }

                                    }
                                });
                            }
                        }
                    },
                    {
                        header: 'Зачислен в подгруппу',
                        align: 'center',
                        dataIndex: 'AnotherGroup',
                        renderer: Ext.util.Format.htmlEncode,
                        width: 600
                    }
                ],
                selModel: {
                    selType: 'cellmodel'
                },
                plugins: [
                    Ext.create('Ext.grid.plugin.CellEditing',
                    {
                        clicksToEdit: 1,
                        listeners: {
                            beforeedit:function(editor, ctx, options) {
                                var record = ctx.record;
                                if (ctx.field === 'Score' && !record.get('Included'))
                                    return false;
                                return true;
                            },
                            edit: function(editor, ctx, options) {
                                
                                //var id = gridPanel.getSelectionModel().getSelection()[0].data['Id'];
                                var record = ctx.record;

                                if (ctx.field !== 'Score')
                                    return true;

                                if (record.get('AnotherGroup') !== null) {
                                    record.reject();
                                    return false;
                                }
                                var studentId = record.get("Id");
                                var subgroupId = @Model.Id;

                                Ext.Ajax.request({
                                    url: '/MinorSubgroup/StudentMark',
                                    method: 'POST',
                                    params: {
                                        score: ctx.value.toLocaleString('ru-RU'),
                                        studentId: studentId,
                                        subgroupId: subgroupId
                                    },
                                    success: function(response) {
                                        var data = Ext.decode(response.responseText);
                                        if (response.status === 200 && data.ok) {
                                            
                                            record.set("Mark", data.mark);
                                            if (data.msg && data.msg.length > 0) {
                                                Ext.MessageBox.show({
                                                    title: 'Информационное сообщение',
                                                    msg: data.msg,
                                                    buttons: Ext.MessageBox.OK,
                                                    icon: Ext.MessageBox.INFO
                                                });
                                            }
                                            record.commit();
                                        } else {
                                            record.reject();
                                            Ext.MessageBox.show({
                                                title: 'Информационное сообщение',
                                                msg: data.msg,
                                                buttons: Ext.MessageBox.OK,
                                                icon: Ext.MessageBox.INFO
                                            });
                                        }
                                    }
                                });
                            }
                        }
                    })
                ]
            });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
        });
    </script>
}