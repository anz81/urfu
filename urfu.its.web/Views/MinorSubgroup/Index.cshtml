@{
    ViewBag.Title = "Подгруппы для майноров";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";
}
@section scripts
{
    <script type="text/javascript">
        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();
            Ext.Ajax.setTimeout(1200000);
            Ext.define('ComboBoxModel',
            {
                extend: 'Ext.data.Model',
                fields:
                [
                    { type: 'string', name: 'Id' },
                    { type: 'string', name: 'Name' }
                ]
            });
            var all = Ext.create('ComboBoxModel',
            {
                Name: 'Все'
            });
            var semestersStore = Ext.create('Ext.data.Store',
            {
                model: 'ComboBoxModel',
                proxy:
                {
                    type: 'ajax',
                    url: '/Minors/Semesters',
                    reader: { type: 'json', root: 'data' }
                },
                listeners: {
                    load: function() {
                        this.add(all);
                        this.commitChanges();
                    }
                },
                remoteSort: false, //true for server sorting
                sorters: [
                    {
                        property: 'Id',
                        direction: 'ASC'
                    }
                ]
            });

            var yearStore = Ext.create('Ext.data.Store',
            {
                model: 'ComboBoxModel',
                proxy:
                {
                    type: 'ajax',
                    url: '/MinorSubgroup/MinorPeriodYears',
                    reader: { type: 'json', root: 'data' }
                },
                listeners: {
                    load: function() {
                        this.add(all);
                        this.commitChanges();
                    }
                },
                remoteSort: false, //true for server sorting
                sorters: [
                    {
                        property: 'Id',
                        direction: 'ASC'
                    }
                ]
            });

            var minorStore = Ext.create('Ext.data.Store',
            {
                idProperty: 'Id',
                proxy:
                {
                    type: 'ajax',
                    url: '/MinorSubgroup/Modules',
                    reader: { type: 'json', root: 'data' }
                },
                listeners: {
                    load: function() {
                        this.add(all);
                        this.commitChanges();
                    }
                },
                remoteFilter: false,
                remoteSort: false, //true for server sorting
                sorters: [
                    {
                        property: 'Id',
                        direction: 'ASC'
                    }
                ]
            });
            var printWnd = null;

            function setMinorFilter() {
                minorStore.clearFilter();
                var year = printWnd.getComponent("year").getValue();
                var semesterId = printWnd.getComponent("semester").getValue();

                if (year && year.length > 0)
                    minorStore.filter("Year", year);
                if (semesterId && semesterId.length > 0)
                    minorStore.filter("SemesterId", semesterId);
            }
            
            function updateTitle() {
                @*if (Urfu && Urfu.panel)
                    Urfu.panel.setTitle("@ViewBag.Title");
                Ext.Ajax.request({
                    url: '/MinorSubgroup/StudentsCount?filter=' +
                        encodeURIComponent(localStorage.getItem("MinorSubgroupFilters") || "[]"),
                    method: 'GET',
                    success: function(response) {
                        if (Urfu && Urfu.panel)
                            Urfu.panel
                                .setTitle("@ViewBag.Title  Кол-во зачисленных студентов: \\ " + response.responseText);
                        else
                            setTimeout(function() {
                                while (!Urfu || !Urfu.panel) {
                                    Urfu.panel.setTitle("@ViewBag.Title  Кол-во зачисленных студентов: \\ " +
                                        response.responseText,
                                        100);
                                }
                            });
                    },
                    params: {
                        //filter: JSON.parse(localStorage.getItem("MinorSubgroupFilters") || "[]")

                    }
                });*@
            }

            var currentYear = @(DateTime.Now.Month < 7? DateTime.Now.Year -1 : DateTime.Now.Year);

            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem("MinorSubgroupFilters") || "[]");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i]["property"]] = prevSettingString[i]["value"];
                }

                if (prevSettings["Year"] == null || prevSettings["Year"] == "") {
                        prevSettings["Year"] = currentYear;
                    }

            } catch (err) {

            }

            filtersWnd = null;
            var setFilters = function() {
                var settings = [
                    { property: 'Year', value: filtersWnd.getComponent("Year").getValue() },
                    { property: 'Semester', value: filtersWnd.getComponent("Semester").getValue() },
                    { property: 'ModuleTitle', value: filtersWnd.getComponent("ModuleTitle").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent("Name").getValue() },
                    { property: 'subgroupType', value: filtersWnd.getComponent("subgroupType").getValue() },
                    { property: 'Limit', value: filtersWnd.getComponent("Limit").getValue() },
                    { property: 'count', value: filtersWnd.getComponent("count").getValue() }
                ];
                store.setFilters(settings);
                localStorage.setItem("MinorSubgroupFilters", JSON.stringify(settings));
                updateTitle();
            };

            filtersWnd = Ext.create('Ext.window.Window',
            {
                title: "Фильтры",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLabel: "Год", itemId: "Year", value: prevSettings["Year"] },
                    { fieldLabel: "Семестр", itemId: "Semester", value: prevSettings["Semester"] },
                    { fieldLabel: "Модуль", itemId: "ModuleTitle", value: prevSettings["ModuleTitle"] },
                    { fieldLabel: "Индекс", itemId: "Name", value: prevSettings["Name"] },
                    { fieldLabel: "Тип подгруппы", itemId: "subgroupType", value: prevSettings["subgroupId"] },
                    { fieldLabel: "Лимит", itemId: "Limit", value: prevSettings["Limit"] },
                    { fieldLabel: "Студенты", itemId: "count", value: prevSettings["count"] }
                ],
                buttons: [
                    {
                        text: "OK",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: "Отмена",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

            var store = Ext.create("Ext.data.Store",
                {
                    idProperty: 'Id',
                    fields: ["Id", "Year", "Semester", "ModuleTitle", "Name", "subgroupType", "Limit", "count"],
                    autoLoad: true,
                    remoteSort: true,
                    groupField: 'ModuleTitle',
                    remoteFilter: true,
                    filters: [
                        { property: 'Year', value: filtersWnd.getComponent("Year").getValue() },
                        { property: 'Semester', value: filtersWnd.getComponent("Semester").getValue() },
                        { property: 'ModuleTitle', value: filtersWnd.getComponent("ModuleTitle").getValue() },
                        { property: 'Name', value: filtersWnd.getComponent("Name").getValue() },
                        { property: 'subgroupType', value: filtersWnd.getComponent("subgroupType").getValue() },
                        { property: 'Limit', value: filtersWnd.getComponent("Limit").getValue() },
                        { property: 'count', value: filtersWnd.getComponent("count").getValue() }
                    ],
                    proxy: {
                        type: 'ajax',
                        url: '/MinorSubgroup/Index',
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total',
                        },
                        timeout: 1200000
                    },
                });

            printWnd = Ext.create('Ext.window.Window',
            {
                title: "Печать",
                closeAction: 'hide',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 700
                },
                items: [
                    {
                        fieldLabel: "Год",
                        itemId: "year",
                        editable: false,
                        xtype: "combobox",
                        store: yearStore,
                        valueField: 'Id',
                        displayField: 'Name',
                        queryMode: 'remote',
                        listeners: {
                            change: function (field, newValue, oldValue) {
                                all.data.Year = newValue;
                                setMinorFilter();
                            },
                            scope: this
                        }
                    },
                    {
                        fieldLabel: "Семестр",
                        itemId: "semester",
                        editable: false,
                        xtype: "combobox",
                        store: semestersStore,
                        valueField: 'Id',
                        displayField: 'Name',
                        queryMode: 'remote',
                        listeners: {
                            change: function (field, newValue, oldValue) {
                                all.data.SemesterId = newValue;
                                setMinorFilter();
                            },
                            scope: this
                        }
                    },
                    {
                        fieldLabel: "Майнор",
                        itemId: "minor",
                        editable: false,
                        xtype: "combobox",
                        store: minorStore,
                        valueField: 'Id',
                        displayField: 'Name',
                        queryMode: 'remote',
                        listeners: {
                            change: function(field, newValue, oldValue) {
                            },
                            scope: this
                        },
                        tpl: Ext.create('Ext.XTemplate',
                            '<tpl for=".">',
                                '<div class="x-boundlist-item" style="border-bottom:1px solid #f0f0f0;">',
                                '<div>{Name}</div></div>',
                            '</tpl>'

                        ),

                        displayTpl: Ext.create('Ext.XTemplate',
                            '<tpl for=".">',
                                '{Name}',
                            '</tpl>'
                          )

                    }
                ],
                buttons: [
                    {
                        text: "Распечатать",
                        handler: function () {

                            var filter = [
                                { property: "Year", value: printWnd.getComponent("year").getValue() },
                                { property: "semesterId", value: printWnd.getComponent("semester").getValue() },
                                { property: "minorId", value: printWnd.getComponent("minor").getValue() },
                            ];
                            var url = '@Url.Action("MassPrint")' +
                                "?filter=" + JSON.stringify(filter);
                            window.location = url;
                            printWnd.hide();
                        }
                    },
                    {
                        text: "Отмена",
                        handler: function() { printWnd.hide(); }
                    }
                ]
                });


            var copyUrl = "";
            var copyMembershipsWnd = Ext.create('Ext.window.Window',
                {
                    title: "Выбор параметра копирования",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: true,
                    bodyStyle: "margin: 10px;",
                    bodyPadding: 6,
                    defaults: {
                        width: 400,

                    },
                    items: [
                        {
                            labelwidth: 150,
                            itemId: "withTeacher",
                            xtype: "checkboxfield",
                            boxLabel: "С преподавателем"

                        },
                    ],
                    buttons: [
                        {
                            text: "Копировать",
                            handler: function () {
                                copyMembershipsWnd.mask('Копирование..');
                                var url = copyUrl +
                                    "&withTeacher=" +
                                    (copyMembershipsWnd.getComponent("withTeacher").getValue() ? "true" : "false");
                                
                                Ext.Ajax.request({
                                    method: "POST",
                                    url: url,
                                    success: function (response) {
                                        copyMembershipsWnd.unmask();
                                        copyMembershipsWnd.hide();
                                        var data = Ext.decode(response.responseText);
                                        Ext.MessageBox.show({
                                            title: 'Информационное сообщение',
                                            msg: data.message,
                                            buttons: Ext.MessageBox.OK,
                                            fn: function (btn) {
                                                if (data.success) {
                                                    window.location = '/MinorSubgroup/Index?focus=' + data.focus;
                                                }
                                            }
                                        });                                        
                                    },
                                    failure: function (response) {
                                        copyMembershipsWnd.unmask();
                                        copyMembershipsWnd.hide();
                                        Ext.MessageBox.alert('Ошибка', "Неизвестная ошибка");
                                    }
                                });
                            }
                        },
                        {
                            text: "Отмена",
                            handler: function () { copyMembershipsWnd.hide(); }
                        }
                    ]
                });

            //setFilters();
            updateTitle();
            var tpl = '<a href="/MinorSubgroup/Students?id={Id}">Студенты</a>\
                | <a href="/MinorSubgroup/Edit?id={Id}">Редактировать</a>\
                <tpl if="data.MarksFrozen">| <a href="/MinorSubgroup/Unfreeze?id={Id}">Открыть ведомость</a></tpl>\
                <tpl if="!MarksFrozen">| <a href="/MinorSubgroup/Freeze?id={Id}">Закрыть ведомость</a></tpl>';
            var grouping = Ext.create('Ext.grid.feature.Grouping',
                { ftype: 'grouping', collapsible: true, startCollapsed: true });
            var gridPanel = Ext.create('Ext.grid.Panel',
            {
                region: 'center',
                store: store,
                loadMask: true,
                features: [grouping],
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                    },
                    {
                        xtype: 'button',
                        text: "Отменить фильтры",
                        handler: function () {

                            filtersWnd.items.items.forEach(function (element, index, array) {
                                if (element.itemId == 'Year') {
                                    element.setValue(currentYear);
                                }
                                else {
                                    element.setValue("");
                                }
                            });
                            
                            setFilters();
                            //localStorage.setItem("MinorSubgroupFilters", []);
                            //store.clearFilter();
                            //updateTitle();
                        }
                    },
                    {
                        xtype: 'button',
                        text: "Количество подгрупп",
                        handler: function() { window.location = "/MinorSubgroupMeta/Index"; }
                    },
                    {
                        xtype: 'button',
                        text: "Создать подгруппы",
                        handler: function() { window.location = "/MinorSubgroup/Create"; }
                    },
                    {
                        xtype: 'button',
                        text: "Развернуть\\Свернуть группировку",
                        handler: function() {
                            window.groupsCollapsed = !window.groupsCollapsed;
                            if (window.groupsCollapsed)
                                grouping.expandAll();
                            else
                                grouping.collapseAll();
                        }
                    },
                    {
                        xtype: 'button',
                        text: "Распределить студентов",
                        handler: function() { window.location = "/MinorSubgroup/FillGroupsWithStudents"; }
                    },
                    {
                        xtype: 'button',
                        text: "Удалить",
                        handler: function() {
                            var objects = gridPanel.getSelectionModel().getSelection();
                            if (objects.length === 0)
                                return;
                            Ext.MessageBox.confirm('Удаление подгрупп',
                                'Удалить подгруппы и зачисления студентов в них (' + objects.length + ' шт.) ?',
                                function(btn) {
                                    if (btn === 'yes') {
                                        var refresh = function() {
                                            window.location = "/MinorSubgroup/Index";
                                        };
                                        Ext.Ajax.request({
                                            url: '/MinorSubgroup/Delete',
                                            success: refresh,
                                            failure: refresh,
                                            params: { ids: objects.map(function(obj) { return obj.data.Id }) }
                                        });
                                    }
                                });

                        }
                    },
                    {
                        xtype: 'button',
                        text: "Копировать",
                        handler: function() {
                            var objects = gridPanel.getSelectionModel().getSelection();
                            if (objects.length !== 2) {
                                Ext.MessageBox.alert("Копирование зачислений студентов", 'Выберите две подгруппы');
                                return;
                            }

                            var o0 = objects[0].data;
                            var o1 = objects[1].data;

                            if (o0.minorId !== o1.minorId) {
                                Ext.MessageBox.alert("Копирование зачислений студентов",
                                    'Копирование зачисление разрешено только внутри одного модуля');
                                return;
                            }

                            if ((!!o0.count) === (!!o1.count)) {
                                Ext.MessageBox.alert("Копирование зачислений студентов",
                                    'Одна из подгрупп должна быть пустой, в другую должны быть зачислены студенты');
                                return;
                            }


                            var src = null;
                            var dst = null;
                            if (o0.count === 0)
                                dst = o0;
                            if (o1.count === 0)
                                dst = o1;
                            if (o0.count !== 0)
                                src = o0;
                            if (o1.count !== 0)
                                src = o1;
                            if (src.subgroupType === dst.subgroupType && src.Semester === dst.Semester) {
                                Ext.MessageBox.alert("Копирование зачислений студентов",
                                    'Выберите другой вид нагрузки!');
                            } else {
                                copyUrl = "/MinorSubgroup/SimpleCopyMembership?srcId=" + src.Id + "&dstId=" + dst.Id;
                                copyMembershipsWnd.show();
                            }
                        }
                    },
                    '-',
                    {
                        xtype: 'button',
                        text: 'Открыть в Excel',
                        handler: function() {
                            var fileUrl = '@Url.Action("DownloadMinorSubGroups")' +
                                "?filter=" +
                                encodeURIComponent(localStorage.getItem("MinorSubgroupFilters") || "[]");
                            window.location.href = fileUrl;
                        }
                    },
                    '-',
                    {
                        xtype: 'button',
                        text: 'Печать',
                        handler: function() {
                            printWnd.show();
                        }
                    },
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Год',
                        dataIndex: 'Year',
                        width: 100, /*
                        layout: 'anchor',
                        items: [
                        {
                            xtype: 'textfield',
                            anchor: '100%',
                            margin: '3px'
                        }],*/
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Семестр',
                        dataIndex: 'Semester',
                        width: 100,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Модуль',
                        dataIndex: 'ModuleTitle',
                        width: 300,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Индекс',
                        dataIndex: 'Name',
                        width: 300,
                        renderer: function(value, metaData, record, rowIdx, colIdx, store) {
                            metaData.tdAttr = 'data-qtip="' + value + '"';
                            return value;
                        }
                    },
                    {
                        header: 'Нагрузка',
                        align: 'center',
                        dataIndex: 'subgroupType',
                        renderer: Ext.util.Format.htmlEncode,
                        width: 180
                    },
                    {
                        header: 'Лимит',
                        align: 'center',
                        dataIndex: 'Limit',
                        renderer: Ext.util.Format.htmlEncode,
                        width: 120
                    },
                    {
                        header: 'Студенты',
                        align: 'center',
                        dataIndex: 'count',
                        renderer: Ext.util.Format.htmlEncode,
                        width: 120
                    },
                    {
                        header: 'Преподаватель',
                        align: 'center',
                        dataIndex: 'teacher',
                        renderer: Ext.util.Format.htmlEncode,
                        width: 150
                    },
                    {
                        //xtype: 'templatecolumn',
                        //tpl: tpl,
                        sortable: false,
                        width: 470,
                        dataIndex: 'MarksFrozen',
                        renderer: function (value, metaData, record) {
                            return '<a href="/MinorSubgroup/Students?id=' + record.get("Id") +'">Студенты</a>\
                                  | <a href="/MinorSubgroup/Edit?id=' + record.get("Id") + '">Редактировать</a>' +
                            (record.get("HasScores")
                                ? (record.get("MarksFrozen")
                                        ? ' | <a href="/MinorSubgroup/Unfreeze?id=' +
                                        record.get("Id") +
                                        '">Открыть ведомость</a>'
                                        : ' | <a href="/MinorSubgroup/Freeze?id=' +
                                        record.get("Id") +
                                        '">Закрыть ведомость</a>'
                                )
                                : '');
                        }
                    }
                ],
                selModel: {
                    selType: 'checkboxmodel' /*,
                    showHeaderCheckbox: true,
                    mode: 'SIMPLE'*/
                }
            });

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);

            gridPanel.getStore()
                .on('load',
                    function(store, records, options) {
                        var focus = '@ViewBag.Focus';
                        if (focus && focus.length > 0) {

                            var focusRow = store.findExact('Id', parseInt(focus));
                            if (focusRow >= 0) {
                                var rowData = store.getAt(focusRow);
                                var gv = gridPanel.getView();

                                var groupingFeature = gridPanel.getView().features[0];

                                groupingFeature.expand(rowData.data['ModuleTitle'], true);

                                gv.focusRow(rowData);
                                gridPanel.getSelectionModel().select(rowData);
                            }
                            return false;
                        }
                    });

            var alertString = '@ViewBag.Message';
            if (alertString.length > 0)
                Ext.MessageBox.alert('Копирование зачислений студентов', alertString);

        });
    </script>
}