
@{
    ViewBag.Title = "Проекты";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";
}

<style>
    .prgroup a:focus, a:active {
        outline: none;
        text-decoration: none;
    }

    ol {
        padding-left: 0;
        margin-left: 30px;
        list-style: none;
        counter-reset: my-counter;
    }

    ol li {
            margin-top: 10px;
            counter-increment: my-counter
        }

    ol li::before {
            content: counter(my-counter) ". ";
            color: #337ab7;
            margin-left: -1em
        }

</style>

@{
    <div class="form-horizontal">
        <script type="text/javascript">

    var localStorageName = "ProjectFilters";

        function downloadReport() {
            var fileUrl = '@Url.Action("DownloadProjectReport", "Project")'
                .concat('?filter=' + encodeURIComponent(localStorage.getItem(localStorageName) || "[]"));
            window.location.href = fileUrl;
            return false;
        }


        Ext.onReady(function() {
            Ext.tip.QuickTipManager.init();
            Ext.Ajax.setTimeout(180000);
            Ext.define('Semester',
            {
                extend: 'Ext.data.Model',
                fields:
                [
                    { type: 'string', name: 'Id' },
                    { type: 'string', name: 'Name' }
                ]
                });

            Ext.define('Level',
                {
                    extend: 'Ext.data.Model',
                    fields:
                        [
                            { type: 'string', name: 'Level' }
                        ]
                });

            var SemestersStore = Ext.create('Ext.data.Store',
            {
                model: 'Semester',
                proxy:
                {
                    type: 'ajax',
                    url: '/Minors/Semesters',
                    reader: { type: 'json', rootProperty: 'data' }
                }
            });
            var levelsStore = Ext.create('Ext.data.Store',
                {
                    model: 'Level',
                    proxy:
                        {
                            type: 'ajax',
                            url: '/Project/Levels',
                            reader: { type: 'json', rootProperty: 'data' }
                        }
                });

            var store = Ext.create("Ext.data.BufferedStore",
                {
                    autoLoad: true,
                    idProperty: 'id',
                    remoteSort: true,
                    pageSize: 25,
                    remoteFilter: true,
                    proxy: {
                                type: 'ajax',
                                url: '/Project/Index',
                                reader: {
                                    type: 'json',
                                    rootProperty: 'data',
                                    totalProperty: 'total'
                                },
                                timeout: 180000
                            }
                    });


            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem(localStorageName) || "[]");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i]["property"]] = prevSettingString[i]["value"];
                }
            } catch (err) {
            }

            var filtersWnd = null;
            //направление, название модуля, координатор, учебный год, семестр
            var setFilters = function() {
                var settings = [
                    { property: 'specialities', value: filtersWnd.getComponent("specialities").getValue() },
                    { property: 'title', value: filtersWnd.getComponent("title").getValue() },
                    { property: 'year', value: filtersWnd.getComponent("year").getValue() },
                    { property: 'semester', value: filtersWnd.getComponent("semester").getValue() },
                    { property: 'level', value: filtersWnd.getComponent("level").getValue() }
                ];

                store.setFilters(settings);
                localStorage.setItem(localStorageName, JSON.stringify(settings));
            };

            filtersWnd = Ext.create('Ext.window.Window',
            {
                title: "Фильтры",
                closeAction: 'hide',
                resizable: false,
                autoHeight: false,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    { fieldLabel: "Направление", itemId: "specialities", value: prevSettings["specialities"] },
                    { fieldLabel: "Название модуля", itemId: "title", value: prevSettings["title"] },
                    { fieldLabel: "Учебный год", itemId: "year", value: prevSettings["year"] },
                    {
                        fieldLabel: "Семестр",
                        itemId: "semester",
                        value: prevSettings["semester"],
                        xtype: "combobox",
                        store: SemestersStore,
                        valueField: 'Id',
                        displayField: 'Name',
                        queryMode: 'remote',
                        width: 250
                    },
                    {
                        fieldLabel: "Уровень",
                        itemId: "level",
                        value: prevSettings["level"],
                        xtype: "combobox",
                        store: levelsStore,
                        valueField: 'Level',
                        displayField: 'Level',
                        queryMode: 'remote',
                        width: 200
                    }
                ],
                buttons: [
                    {
                        text: "OK",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: "Отмена",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

            setFilters();


            var tpl = '<a href="{file}">Файл</a> | <a href="@Url.Action("Edit","Project")?id={id}">Изменить</a>\
                     | <a href="@Url.Action("Disciplines", "Project")?moduleId={id}">Дисциплины</a>';


            var datestore = Ext.create('Ext.data.Store', {
               fields: ['year', 'semesterId', 'semesterName', 'date'],
               model:'Periods',
                groupField: 'year',
               autoLoad: true,
                proxy: {
                    type: 'ajax',
                    url: '/Project/ProjectPeriods',
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    },
                    timeout: 180000
                }

            });

            var dateselectedGrid = Ext.create('Ext.grid.Panel',
                {
                    store: datestore,
                    plugins: [
                        {ptype: 'cellediting',
                    clicksToEdit: 1,
                    errorSummary: false
                        }],
                    viewConfig: {
                    markDirty: false
                     },
                    columns: [
                        { header: 'Семестр', dataIndex: 'semesterName', autoSizeColumn: true,minWidth: 190 },
                        {
                            header: 'Выбрать до',
                            //width: 130,
                            autoSizeColumn: true,
                            minWidth:190,
                            sortable: false,
                            dataIndex:'date',
                            groupable: false,
                            field: {
                                xtype: 'datefield',
                                width: 130,
                                startDay: 1,
                                invalidText: "Дата должна быть указана в формате дд.мм.гггг "
                            },
                            renderer: Ext.util.Format.dateRenderer('d.m.Y')
                        }
                    ],
                    features: [
                        {
                            ftype: 'grouping',
                            id: 'year',
                            groupHeaderTpl:'{name}'

                        }]

                });

            var dateSelection = Ext.create('Ext.window.Window',
                {
                    title: "",
                    closeAction: 'hide',
                    autoHeight: true,
                    width: 390,
                    height: 300,
                    autoWidth: true,
                    //X: 100,
                    //Y:100,
                    items: [
                        dateselectedGrid
                    ],
                    buttons: [
                {
                    text: "OK",
                            handler: function () {

                                var selectedprojects = gridPanel.getSelectionModel().getSelection();

                                var projectIds =[];
                                selectedprojects.forEach(function (element) {
                                    projectIds.push(element.id);
                                });

                                var deadlines = [];
                                for (var i = 0; i < dateselectedGrid.getStore().data.items.length; i++)
                                {
                                    itemdata = dateselectedGrid.getStore().data.items[i].data;

                                    if (itemdata.date !== null) {
                                        deadlines.push({ year: itemdata.year, semesterId: itemdata.semesterId, SelectionDeadline: itemdata.date});
                                    }
                                }
                                    Ext.Ajax.request({
                                    method: 'POST',
                                    dataType: 'json',
                                    url: '../Project/SetProjectDeadline',
                                    params: {
                                        projects: JSON.stringify(projectIds),
                                        deadlines:Ext.JSON.encode(deadlines)
                                    },
                                    success: function (response) {
                                        Ext.Msg.alert('OK', 'Даты выбора установлены');
                                    },
                                    failure: function (response) {
                                            console.log(response.status);
                                        }
                                    });
                                dateSelection.close();
                                gridPanel.getSelectionModel().deselectAll();

                            }
                    },
                    {
                        text: "отмена",
                        handler: function () {
                            dateSelection.close();
                            gridPanel.getSelectionModel().deselectAll();
                        }
                    }
            ]

                });


            function createWpResponsiblePersonsSelectorWindow(projectRecord) {
                function debounce(func, delay) {
                    var inDebounce;
                    return function () {
                        var context = this;
                        var args = arguments;
                        clearTimeout(inDebounce);
                        inDebounce = setTimeout(function () { func.apply(context, args) }, delay);
                    }
                }

                var debounceFilter = debounce(function (userStore, value) {
                    userStore.clearFilter();
                    userStore.filterBy(function (r) {
                        var split = value.split(' ').filter(function (i) { return i; });
                        var r1 = new RegExp(Ext.String.escapeRegex(value), "i");
                        return (r.get('Fio') || '').match(r1) ||
                            split.every(function (s) {
                                var r2 = new RegExp(Ext.String.escapeRegex(s), "i");
                                return (r.get('LastName') || '').match(r2) ||
                                    (r.get('FirstName') || '').match(r2) ||
                                    (r.get('Patronymic') || '').match(r2);
                            });
                    });
                }, 300);

                var window = new Ext.window.Window({
                    closeAction: 'destroy',
                    viewModel: {
                        stores: {
                            persons: {
                                autoLoad: true,
                                proxy: {
                                    type: 'ajax',
                                    url: '/Project/GetProjectRops',
                                    extraParams: {
                                        projectId: projectRecord.get('id')
                                    }
                                },
                                listeners: {
                                    load: function (_, records) {
                                        var users = records.filter(function (r) {
                                            return r.get('IsSelected');
                                        });
                                        var chief = records.filter(function (r) {
                                            return r.get('IsChief');
                                        });
                                        var mainGrid = Ext.ComponentQuery.query('#mainGrid')[0];
                                        mainGrid.getSelectionModel().select(users);

                                        var chosedRopsGrid = Ext.ComponentQuery.query('#chosedRopsGrid')[0];
                                        chosedRopsGrid.getSelectionModel().select(chief);
                                    }
                                }
                            },
                            selectedPersons: {}
                        }
                    },
                    title: 'Выбор РОПов',
                    width: 600,
                    height: 600,
                    layout: { type: 'border' },
                    tbar: [
                        {
                            xtype: 'textfield',
                            fieldLabel: 'Поиск',
                            width: 400,
                            listeners: {
                                change: function (field, newValue) {
                                    var store = this.up('window').down('#mainGrid').getStore();
                                    debounceFilter(store, newValue);
                                }
                            }
                        }
                    ],
                    items: [
                        {
                            xtype: 'grid',
                            reference: 'mainGrid',
                            itemId: 'mainGrid',
                            region: 'center',
                            flex: 1,
                            loadMask: true,
                            bind: {
                                store: '{persons}'
                            },
                            selModel: Ext.create('Ext.selection.CheckboxModel',
                                {
                                    listeners: {
                                        selectionchange: function (grid, selection) {
                                            var vm = this.view.lookupViewModel();
                                            vm.get('selectedPersons').setData(selection);
                                        }
                                    },
                                    headerWidth: 30,
                                    checkOnly: true,
                                    allowDeselect: false
                                }),
                            columns: [
                                {
                                    dataIndex: 'Fio',
                                    text: 'ФИО',
                                    flex: 1
                                }
                            ]
                        }, {
                            xtype: 'grid',
                            region: 'south',
                            itemId: 'chosedRopsGrid',
                            title: 'Выбранные РОПы',
                            maxHeight: 244,
                            minHeight: 144,
                            bind: {
                                store: '{selectedPersons}'
                            },
                            columns: [
                                {
                                    dataIndex: 'Fio',
                                    text: 'ФИО',
                                    flex: 1,
                                    renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                                        var text = 'Выделите галочкой, чтобы указать главного';
                                        metaData.tdAttr = 'data-qtip="' + Ext.String.htmlEncode(text) + '"';
                                        return value;
                                    }
                                }, {
                                    xtype: 'actioncolumn',
                                    width: 30,
                                    items: [
                                        {
                                            icon: '/Content/Images/remove.png',
                                            tooltip: 'Удалить',
                                            handler: function (grid, rowIndex, colIndex, item, e, record) {
                                                if (confirm('Вы действительно желаете удалить запись из списка? Области образования для данного РОПа будут удалены и не будут подлежать восстановлению!')) {
                                                    this.up('window').down('#mainGrid').getSelectionModel()
                                                        .deselect(record);
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            selModel: {
                                selType: 'checkboxmodel',
                                mode: 'SINGLE',
                                headerWidth: 30,
                                checkOnly: 'true',
                                injectCheckbox: 1,
                                allowDeselect: true
                            }
                        }
                    ],
                    buttons: [
                        {
                            text: 'ОК',
                            handler: function () {
                                var window = this.up('window');
                                var selection = window.down('#mainGrid').getSelection();

                                var objects = window.down('#chosedRopsGrid').getSelection();
                                var chiefUser = '';
                                if (objects.length > 0)
                                    chiefUser = objects[0].data.Id;

                                Ext.Ajax.request({
                                    url: '/Project/SetProjectRops',
                                    method: 'POST',
                                    params: {
                                        projectId: projectRecord.get('id'),
                                        teacherIds: selection.map(function (r) { return r.get('Id'); }),
                                        chiefUser: chiefUser
                                    },
                                    success: function () {
                                        store.reload();
                                        window.close();

                                    },
                                    failure: function (d) {
                                        console.error(d.responseText);
                                        alert(d.responseText);
                                    }
                                });
                            }
                        }, {
                            text: 'Отмена',
                            handler: function () {
                                this.up('window').close();
                            }
                        }
                    ]
                });
                return window;
            }

            var projectCompetencesStore = Ext.create("Ext.data.Store",
                {
                    autoLoad: false,
                    proxy: {
                        type: 'ajax',
                        url: '/Project/Competences',
                        reader: {
                            type: 'json',
                        }
                    },
                    listeners: {
                        load: function (t, records, successful, operation, eOpts) {
                            var data = records[0].data.data[0];
                            var index = data.RowIndex;
                            // заполнить списки: стандарт и направление
                        }
                    }
                });

            function updateCompetencesStore(t) {
                var form = t.up('window').down('form');
                var possibleCompetencesStore = t.lookupViewModel().getStore('possibleCompetences');

                var competencesStore = t.lookupViewModel().getStore('competences');
                var profilesStore = t.lookupViewModel().getStore('profiles');
                var competenceTypesStore = t.lookupViewModel().getStore('competenceTypes');

                form.items.items.find(p => p.name == "AddCompetenceForm")
                    .items.findBy(p => p.name == "container")
                    .items.findBy(p => p.name == "Competence")
                    .setValue('');

                var standard = form.items.items.find(p => p.name == "AddCompetenceForm").items.findBy(p => p.name == "Standard").getValue();
                var direction = form.items.items.find(p => p.name == "AddCompetenceForm").items.findBy(p => p.name == "DirectionId").getValue();
                var profile = form.items.items.find(p => p.name == "AddCompetenceForm").items.findBy(p => p.name == "ProfileId").getValue();
                var type = form.items.items.find(p => p.name == "AddCompetenceForm").items.findBy(p => p.name == "Type").getValue();

                var selectedDirectionData;
                t.lookupViewModel().getStore('directions').data.items.forEach(function (rec, index, arr) {
                    if (rec.data.DirectionId == direction) {
                        selectedDirectionData = rec.data;
                    }
                });

                var profilesData = [];
                possibleCompetencesStore.data.items.filter(c => c.data.Standard == standard && c.data.DirectionId == direction && c.data.ProfileId)
                    .forEach(function (val, index, arr) {
                        if (profilesData.find(s => s.ProfileId == val.data.ProfileId) == null) {
                            profilesData.push({ ProfileId: val.data.ProfileId, ProfileTitle: val.data.ProfileTitle, Division: val.data.Division });
                        }
                    });
                profilesStore.setData(profilesData);

                var competenceTypesData = [];
                possibleCompetencesStore.data.items.filter(c => c.data.Standard == standard
                    && (selectedDirectionData == null || c.data.DirectionId == null ||
                        c.data.DirectionId == selectedDirectionData.DirectionId
                        && c.data.DirectionAreaEducationId == selectedDirectionData.DirectionAreaEducationId
                        && c.data.DirectionQualification == selectedDirectionData.DirectionQualification)
                    && (c.data.ProfileId == profile || profile == null || profile.trim() == ''))
                    .forEach(function (val, index, arr) {
                        if (competenceTypesData.find(s => s.Type == val.data.Type) == null) {
                            competenceTypesData.push({ Type: val.data.Type });
                        }
                    });
                competenceTypesStore.setData(competenceTypesData);

                var competencesData = possibleCompetencesStore.data.items.filter(c => c.data.Standard == standard
                    && (selectedDirectionData == null || c.data.DirectionId == null ||
                                c.data.DirectionId == selectedDirectionData.DirectionId
                                && c.data.DirectionAreaEducationId == selectedDirectionData.DirectionAreaEducationId
                                && c.data.DirectionQualification == selectedDirectionData.DirectionQualification)
                    && (c.data.ProfileId == profile || profile == null || profile.trim() == '')
                    && c.data.Type == type);

                competencesStore.setData(competencesData);
            }

            function createCompetenceWindow(index, record) {
                return Ext.create('Ext.window.Window',
                    {
                        title: "Компетенции проекта",
                        closeAction: 'hide',
                        overflowY: 'auto',
                        resizable: true,
                        x: 100,
                        y: 100,
                        height: 500,
                        width: 665,
                        modal: true,
                        bodyPadding: 6,
                        rowHeight: 100,
                        defaults: {
                            labelWidth: 130
                        },
                        viewModel: {
                            data: Ext.apply({}, record ? record.data : {}),
                            stores: {
                                standards: { },
                                directions: { },
                                profiles: { },
                                competenceTypes: { },
                                competences: { },

                                possibleCompetences: {
                                    autoLoad: true,
                                    proxy: {
                                        type: 'ajax',
                                        url: '@Url.Action("PossibleCompetences", "Project")',
                                        reader: {
                                            type: 'json',
                                            rootProperty: 'data'
                                        },
                                        extraParams: (record
                                            ? {
                                                id: '{id}'
                                            }
                                            : {})
                                    }
                                },

                                competencesTableStore: {
                                    autoLoad: true,
                                    proxy: {
                                        type: 'ajax',
                                        url: '@Url.Action("ProjectCompetences", "Project")',
                                        reader: {
                                            type: 'json',
                                            rootProperty: 'data'
                                        },
                                        extraParams: (record
                                            ? {
                                                id: '{id}'
                                            }
                                            : {})
                                    }
                                }
                            }
                        },
                        items: {
                            xtype: 'form',
                            defaults: {
                                labelWidth: 130
                            },
                            items: [
                                {
                                    fieldLabel: 'Идентификатор',
                                    name: 'id',
                                    bind: 'Id',
                                    readOnly: true,
                                    hidden: true,
                                },
                                {
                                    xtype: 'button',
                                    text: "Добавить",
                                    //hidden: '@ViewBag.CanEdit' == 'False',
                                    width: 100,
                                    handler: function () {
                                        var window = this.up('window');
                                        var form = window.down('form');
                                        var hidden = form.items.items.find(d => d.name == "AddCompetenceForm").hidden;
                                        form.items.items.find(d => d.name == "AddCompetenceForm").setHidden(!hidden);
                                        this.setText(hidden ? "Скрыть" : "Добавить");
                                        if (hidden) {
                                            var possibleCompetences = this.lookupViewModel().getStore('possibleCompetences');
                                            var standardData = [];
                                            var directionData = [];

                                            possibleCompetences.data.items.forEach(function (rec, index, arr) {
                                                if (standardData.find(s => s.Standard == rec.data.Standard) == null) {
                                                    standardData.push({ Standard: rec.data.Standard });
                                                }
                                                if (directionData.find(d => d.DirectionId == rec.data.DirectionId) == null && rec.data.DirectionId != null) {
                                                    directionData.push({
                                                        DirectionId: rec.data.DirectionId,
                                                        DirectionTitle: rec.data.DirectionTitle,
                                                        DirectionAreaEducationId: rec.data.DirectionAreaEducationId,
                                                        DirectionQualification: rec.data.DirectionQualification
                                                    });
                                                }
                                            });

                                            this.lookupViewModel().getStore('directions').setData(directionData);
                                            this.lookupViewModel().getStore('standards').setData(standardData);
                                        }
                                    }
                                },
                                {
                                    xtype: 'form',
                                    name: 'AddCompetenceForm',
                                    hidden: true,
                                    margin: '10 0 0 0',
                                    layout: {
                                        type: 'vbox'
                                    },
                                    defaults: {
                                        labelWidth: 130
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            fieldLabel: 'Стандарт*',
                                            name: 'Standard',
                                            bind: {
                                                store: '{standards}',
                                                value: '{Standard}'
                                            },
                                            allowBlank: false,
                                            editable: true,
                                            queryMode: 'local',
                                            displayField: 'Standard',
                                            valueField: 'Standard',
                                            anyMatch: true,
                                            width: 300,
                                            listeners: {
                                                change: function () {
                                                    updateCompetencesStore(this);
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            name: 'DirectionId',
                                            fieldLabel: 'Направление',
                                            bind: {
                                                store: '{directions}',
                                                value: '{DirectionId}'
                                            },
                                            allowBlank: false,
                                            editable: true,
                                            queryMode: 'local',
                                            displayField: 'DirectionTitle',
                                            valueField: 'DirectionId',
                                            width: 500,
                                            anyMatch: true,
                                            listeners: {
                                                change: function () {
                                                    var form = this.up('window').down('form');
                                                    form.items.items.find(p => p.name == "AddCompetenceForm").items.find(p => p.name == "ProfileId").setValue('')
                                                    updateCompetencesStore(this);
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'combobox',
                                            name: 'ProfileId',
                                            fieldLabel: 'Образовательная программа',
                                            bind: {
                                                store: '{profiles}',
                                                value: '{ProfileId}'
                                            },
                                            allowBlank: true,
                                            editable: true,
                                            queryMode: 'local',
                                            displayField: 'ProfileTitle',
                                            valueField: 'ProfileId',
                                            width: 500,
                                            listeners: {
                                                change: function () {
                                                    updateCompetencesStore(this);
                                                    var profile = this.getValue();
                                                    try {
                                                        var division = '';
                                                        if (profile != null && profile.trim() != '')
                                                            division = this.displayTplData[0].Division;
                                                        this.up('window').down('form').items.items.find(p => p.name == "AddCompetenceForm").items.find(p => p.name == "Division").setValue(division);
                                                    }
                                                    catch{ }
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'textfield',
                                            name: 'Division',
                                            fieldLabel: 'Подразделение',
                                            bind: '{Division}',
                                            allowBlank: true,
                                            editable: false,
                                            width: 500
                                        },
                                        {
                                            xtype: 'combobox',
                                            name: 'Type',
                                            fieldLabel: 'Тип компетенции*',
                                            bind: {
                                                store: '{competenceTypes}',
                                                value: '{Type}'
                                            },
                                            allowBlank: false,
                                            editable: true,
                                            queryMode: 'local',
                                            displayField: 'Type',
                                            valueField: 'Type',
                                            listeners: {
                                                change: function () {
                                                    updateCompetencesStore(this);
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'form',
                                            name: 'container',
                                            layout: {
                                                type: 'hbox',
                                                align: 'center'
                                            },
                                            defaults: {
                                                labelWidth: 130
                                            },
                                            items: [
                                                Ext.create('Ext.form.field.Tag', {
                                                    name: 'Competence',
                                                    fieldLabel: 'Компетенции',
                                                    bind: {
                                                        store: '{competences}',
                                                        value: '{Competence}'
                                                    },
                                                    allowBlank: false,
                                                    editable: true,
                                                    queryMode: 'local',
                                                    displayField: 'Code',
                                                    valueField: 'Id',
                                                    width: 500,
                                                    tpl: Ext.create('Ext.XTemplate',
                                                        '<tpl for=".">',
                                                        '<div class="x-boundlist-item" style="border-bottom:1px solid #f0f0f0;">',
                                                        '<div><b>{Code}</b> {Description}</div>' +
                                                        '</div>',
                                                        '</tpl>'
                                                    )
                                                }),
                                                {
                                                    xtype: 'button',
                                                    text: "Добавить",
                                                    margin: '0 0 0 10',
                                                    handler: function () {
                                                        var window = this.up('window');
                                                        var form = window.down('form');
                                                        var data = form.getValues();
                                                        var competences = data.Competence;
                                                        var items = form.items.items.find(p => p.name == "competenceTable").store.data.items;
                                                        var competencesCmbxItems = form.items.items.find(p => p.name == "AddCompetenceForm").items.find(p => p.name == "container").items.findBy(p => p.name == "Competence").store.data.items;
                                                        competences.forEach(function (value, index, arr) {
                                                            if (!items.some(elem => elem.data.Id == value)) {
                                                                var competenceData = competencesCmbxItems.find(function (el, ind, array) {
                                                                    if (el.data.Id == value) {
                                                                        return el;
                                                                    }
                                                                });
                                                                form.items.items.find(p => p.name == "competenceTable").store.add(competenceData);
                                                            }
                                                        });
                                                        form.items.items.find(p => p.name == "competenceTable").getView().refresh();
                                                    }
                                                }
                                            ]
                                        }]
                                },
                                Ext.create('Ext.grid.Panel', {
                                    name: 'competenceTable',
                                    region: 'center',
                                    bind: {
                                        store: '{competencesTableStore}'
                                    },
                                    loadMask: true,
                                    width: 650,
                                    columnLines: true,
                                    margin: '10 0 0 0',
                                    columns: [
                                        {
                                            header: 'Направление',
                                            dataIndex: 'DirectionCode',
                                            tooltip: 'Направление',
                                            width: 100,
                                            cellWrap: true,
                                            renderer: Urfu.renders.htmlEncodeWithToolTip
                                        },
                                        {
                                            header: 'ОП',
                                            dataIndex: 'ProfileCode',
                                            tooltip: 'Образовательная программа',
                                            width: 100,
                                            cellWrap: true,
                                            renderer: Urfu.renders.htmlEncodeWithToolTip
                                        },
                                        {
                                            header: 'Код',
                                            dataIndex: 'Code',
                                            width: 80,
                                            cellWrap: true,
                                            renderer: Urfu.renders.htmlEncodeWithToolTip
                                        },
                                        {
                                            header: 'Описание',
                                            dataIndex: 'Description',
                                            width: 300,
                                            cellWrap: true,
                                            renderer: Urfu.renders.htmlEncodeWithToolTip
                                        },
                                        {
                                            xtype: 'actioncolumn',
                                            region: 'center',
                                            sortable: false,
                                            //hidden: '@ViewBag.CanEdit' == 'False',
                                            width: 50,
                                            items: [
                                                {
                                                    icon: '@Url.Content("~/Content/Images/remove.png")',
                                                    iconCls: 'icon-padding',
                                                    text: 'Удалить',
                                                    tooltip: 'Удалить',
                                                    handler: function (grid, rowIndex, colIndex) {
                                                        grid.store.removeAt(rowIndex, 1);
                                                        grid.refresh();
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                })
                            ]
                        },
                        buttons: [
                            {
                                text: "Сохранить",
                                //hidden: '@ViewBag.CanEdit' == 'False',
                                handler: function () {
                                    var window = this.up('window');
                                    var form = window.down('form');
                                    var competences = form.items.items.find(p => p.name == "competenceTable").store.data.items.map(elem => elem.data.Id);

                                    Ext.Ajax.request({
                                        method: 'POST',
                                        url: '@Url.Action("SetCompetences")',
                                        params: {
                                            id: record.get('id'),
                                            competences: competences
                                        },
                                        success: function (response) {
                                            var data = Ext.decode(response.responseText);
                                            Ext.MessageBox.show({
                                                title: 'Информационное сообщение',
                                                msg: 'Изменения сохранены',
                                                buttons: Ext.MessageBox.OK
                                            });

                                            var rowData = gridPanel.getStore().getAt(index);
                                            rowData.data.competence = data.message;
                                            gridPanel.getView().refresh();
                                            gridPanel.getView().focusRow(rowData);
                                            gridPanel.getSelectionModel().select(rowData);

                                            window.close();
                                        },
                                        failure: function (response) {
                                            Ext.MessageBox.show({
                                                title: 'Информационное сообщение',
                                                msg: 'Ошибка',
                                                buttons: Ext.MessageBox.OK
                                            });
                                        }
                                    });
                                }
                            },
                            {
                                text: "Отмена",
                                //hidden: '@ViewBag.CanEdit' == 'False',
                                handler: function () {
                                    var window = this.up('window');

                                    Ext.MessageBox.show({
                                        title: 'Уведомление',
                                        msg: "Изменения не сохранены. Выйти?",
                                        buttons: Ext.MessageBox.YESNO,
                                        fn: function (btn) {
                                            if (btn === 'yes') {
                                                window.close();
                                            }
                                        },
                                        icon: Ext.MessageBox.QUESTION
                                    });
                                }
                            }
                        ]
                    }
                );
            }

            var gridPanel = Ext.create('Ext.grid.Panel',
            {
                region: 'center',
                store: store,
                loadMask: true,
                columnLines: true,
                selModel:
                {
                    selType: 'checkboxmodel',
                    headerWidth: 34,
                    mode:'SIMPLE'
                    },
                tbar: [
                    {
                    xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                },
                    {
                    xtype: 'button',
                        text: "Отменить фильтры",
                        handler: function() {
                        store.clearFilter();
                        localStorage.setItem(localStorageName, JSON.stringify([]));
                    }
                },
                    '-',
                    {
                    xtype: 'button',
                        text: "Отчёт по проектам в Excel",
                        handler: downloadReport
                    },'-',
                    {
                        xtype: 'button',
                        text: "Дата выбора",
                        hidden: '@ViewBag.CanEdit' == 'False',
                        handler: function () {
                            var selectedprojects = gridPanel.getSelectionModel().getSelection();

                            if (selectedprojects.length == 0) {

                                Ext.MessageBox.alert("Дата выбора","Для назначения даты выбора необходимо указать проекты")
                                return;
                            }

                            dateSelection.show();
                        }
                    },
                ],
                plugins: [
                    {
                        ptype: "rowexpander",
                        rowBodyTpl: new Ext.XTemplate(
                            '<p><b>Проектные роли: </b>{projectroles}</p>',
                            '<p><b>Компетенции: </b>{competence}</p>',
                            '<p>{summary}</p>',
                            '<p><b>Зачётные единицы: </b>{testUnits}</p>',
                            '<p><b>Приоритет: </b>{priority}</p>',
                            '<p><b>Дата утверждения: </b>{approvedDate}</p>',
                            '<p><b>Комментарий: </b>{comment}</p>'
                        )
                    }
                ],
                columns: [
                    { xtype: 'rownumberer', width: 50 },
                    {
                        header: 'Уровень',
                        align: 'left',
                        dataIndex: 'Level',
                        sortable: false,
                        width: 100,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                    header: 'Направления',
                        align: 'left',
                        dataIndex: 'specialities',
                        sortable: false,
                        width: 150,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                    header: 'Название модуля',
                        dataIndex: 'title',
                        width: 300,
                        cellWrap: true,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                    header: 'Короткое название модуля',
                        dataIndex: 'shortTitle',
                        width: 200,
                        cellWrap: true,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        header: 'Руководители образовательных программ',
                        align: 'left',
                        dataIndex: 'rops',
                        width: 200,
                        cellWrap: true,
                        sortable: false,
                        renderer: Urfu.renders.htmlEncodeWithToolTip
                    },
                    {
                        xtype: 'actioncolumn',
                        region: 'center',
                        sortable: false,
                        width: 130,
                        items: [
                            {
                                icon: '@Url.Content("~/Content/Images/teacher_red.png")',
                                iconCls: 'icon-padding',
                                text: 'Руководители образовательных программ (РОП)',
                                tooltip: 'Руководители образовательных программ (РОП)',
                                handler: function (grid, rowIndex, colIndex) {
                                    var rec = grid.getStore().getAt(rowIndex);
                                    if (rec.data.canEdit) {
                                        var formPanel = createWpResponsiblePersonsSelectorWindow(rec);
                                        formPanel.show();
                                    }
                                    else {
                                        Ext.MessageBox.alert('Ошибка', "У вас нет прав вносить изменения");
                                    }
                                }
                            },
                            {
                                icon: '@Url.Content("~/Content/Images/building.png")',
                                iconCls: 'icon-padding',
                                text: 'Предприятие',
                                tooltip: 'Предприятие',
                                handler: function (grid, rowIndex, colIndex) {
                                    var rec = grid.getStore().getAt(rowIndex);
                                    if (rec.data.canEdit) {
                                        var link = "@Url.Action("Company")?id=" + rec.get('id');
                                        window.open(link, '_blank');
                                    }
                                    else {
                                        Ext.MessageBox.alert('Ошибка', "У вас нет прав вносить изменения");
                                    }
                                }
                            },
                            {
                                icon: '@Url.Content("~/Content/Images/skill.png")',
                                iconCls: 'icon-padding',
                                text: 'Компетенции',
                                tooltip: 'Компетенции',
                                handler: function (grid, rowIndex, colIndex) {
                                    var rec = grid.getStore().getAt(rowIndex);
                                    if (rec.data.canEdit) {
                                        createCompetenceWindow(rowIndex, rec).show();
                                    }
                                    else {
                                        Ext.MessageBox.alert('Ошибка', "У вас нет прав вносить изменения");
                                    }
                                }
                            },
                            {
                                icon: '@Url.Content("~/Content/Images/projectgroup.png")',
                                iconCls: 'icon-padding',
                                text: 'Проектные группы',
                                tooltip: 'Проектные группы',
                                handler: function (grid, rowIndex) {
                                    var rec = grid.getStore().getAt(rowIndex);
                                    createCompetitionGroupsWindow(rec).show();
                                }
                            }
                        ]
                    },
                    {
                        xtype: 'templatecolumn',
                        sortable: false,
                        tpl: tpl,
                        width: 420
                    }
                ]
            });

            var groupTpl = new Ext.XTemplate(
                '<ol class="prgroup">',
                '<tpl for=".">',
                '<li>',
                '<a href ="@Url.Action("CompetitionGroups","Project")?focus={ProjectCompetitionGroupId}" target="_blank"><b>Проектная группа: </b>{Name}<br><b> Семестр: </b> {Semester} <br><b> Год: </b>{Year}<br><b>Курс: {Course}</b></a>',
                '</li>',
                '</tpl>',
                '</ol>'
            );


            function createCompetitionGroupsWindow(record) {
                return Ext.create('Ext.window.Window',
                    {
                        title: "Проектные группы",
                        closeAction: 'hide',
                        closeToolText: 'Закрыть окно',
                        resizable: false,
                        height: 500,
                        width: 600,
                        scrollable:'y',
                        items: [
                            {
                                xtype: 'dataview',
                                height:'100%',
                                store: {
                                    autoLoad: true,
                                    fields: ['ProjectCompetitionGroupId', 'Name', 'Semester', 'Year', 'Course'],
                                    proxy: {
                                        type: 'ajax',
                                        url: '@Url.Action("GetProjectCompetitionGroups", "Project")',
                                        extraParams: { id: record.id },
                                        reader: {
                                            type: 'json',
                                            rootProperty: 'data'
                                        }
                                    }
                                },
                                tpl: groupTpl,
                                itemSelector: 'div'
                            }

                       ]

                    });
            }

            var items = [
                gridPanel
            ];

            Urfu.createViewport('border', items);
            gridPanel.getStore().on('load', function (store, records, options) {
                var focus = '@ViewBag.Focus';
                if (focus && focus.length > 0) {

                    var focusRow = store.findExact('id', focus);
                    if (focusRow > 0) {
                        var rowData = store.getAt(focusRow);
                        gridPanel.getView().focusRow(rowData);
                        gridPanel.getSelectionModel().select(rowData);
                    }
                }
                return false;
            });
        });
        </script>
    </div>

}
