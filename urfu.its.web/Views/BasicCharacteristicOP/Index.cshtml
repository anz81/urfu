@using Urfu.Its.Common
@using Urfu.Its.Web.DataContext
@using Urfu.Its.Web.Models
@{
    ViewBag.Title = "Список ОХОП";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";

    var canManageWorkingPrograms = User.IsInRole(ItsRoles.WorkingProgramManager);
    var canViewWorkingPrograms = User.IsInRole(ItsRoles.WorkingProgramView);
}
<style>

    .its-medium {
        width: 24px;
        height: 24px;
        margin-left: 5px;
    }
</style>
@section scripts
{
    <script src="@Url.Content("~/Scripts/VersionedDocs/versionedDocs.js")"></script>

    <script type="text/javascript">
    var localStorageName = "BasicCharacteristicOPListFilter";
    Ext.onReady(function() {
        Ext.tip.QuickTipManager.init();

        var focus = null;

        function required(value) {
            return (value != undefined && value.length > 0) ? true : "Поле не может быть пустым";
        }

        function parseJson(json) {
            var data = JSON.parse(json.replace(/&quot;/g, '"'));
            return data;
        }

        var dataDivisions = parseJson('@ViewBag.Divisions');
        var divisionStore = Ext.create("Ext.data.Store",
            {
                data: dataDivisions
            });
        var directionStore = Ext.create("Ext.data.Store", {});
        var dataDirections = parseJson('@ViewBag.Directions');

        var profileStore = Ext.create("Ext.data.Store", {});

        var directionFiltersStore = Ext.create("Ext.data.Store", {});
        var profileFiltersStore = Ext.create("Ext.data.Store", {});


        var store = Ext.create("Ext.data.Store",
            {
                autoLoad: true,
                remoteSort: false,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: window.location.href,
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    }
                }
            });

        var prevSettings = {};
        try {
            var prevSettingString = JSON.parse(localStorage.getItem(localStorageName) || "[]");

            for (var i = 0; i < prevSettingString.length; i++) {
                prevSettings[prevSettingString[i]["property"]] = prevSettingString[i]["value"];
            }
        } catch (err) {
        }
        var filtersWnd = null;

        var setFilters = function() {
            var settings = [
                { property: 'divisionId', value: filtersWnd.getComponent("division").getValue() },
                { property: 'directionId', value: filtersWnd.getComponent("direction").getValue() },
                { property: 'profileId', value: filtersWnd.getComponent("profile").getValue() }
            ];
            store.setFilters(settings);
            localStorage.setItem(localStorageName, JSON.stringify(settings));
        };

        var changeDivisionEvent = function(wnd, directions, profiles, newValue, isFilter){
            wnd.items.items.find(p => p.itemId == "direction").setValue('');
            directions.setData([]);

            wnd.items.items.find(p => p.itemId == "profile").setValue('');
            profiles.setData([]);

            if (newValue != '' && newValue != null) {
                try {
                    var currentDivisionData = divisionStore.data.items.filter(d => d.data.DivisionId == newValue)[0].data;
                    directions.setData(currentDivisionData.Directions);
                }
                catch{ }
            }
            else {
                if (isFilter) {
                    directions.setData(dataDirections);
                }
            }
        }

        var changeDirectionEvent = function (wnd, directions, profiles, newValue) {
            wnd.items.items.find(p => p.itemId == "profile").setValue('');
            profiles.setData([]);

            if (newValue != '' && newValue != null) {
                try {
                    var currentDirectionData = directions.data.items.filter(d => d.data.DirectionId == newValue)[0].data;
                    profiles.setData(currentDirectionData.Profiles);
                }
                catch{ }
            }
        }
        
        filtersWnd = Ext.create('Ext.window.Window',
            {
                title: "Фильтры",
                closeAction: 'hide',
                resizable: false,
                autoHeight: false,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500,
                    labelWidth: 130
                },
                items: [
                    {
                        fieldLabel: "Институт",
                        itemId: "division",
                        value: prevSettings['divisionId'],
                        xtype: "combobox",
                        store: divisionStore,
                        valueField: 'DivisionId',
                        displayField: 'DivisionName',
                        queryMode: 'local',
                        anyMatch: true,
                        width: 500,
                        listeners: {
                            change: function (t, newValue, oldValue, eOpts) {
                                changeDivisionEvent(filtersWnd, directionFiltersStore, profileFiltersStore, newValue, true);
                            }
                        }
                    },
                    {
                        fieldLabel: "Направление",
                        itemId: "direction",
                        value: prevSettings['directionId'],
                        xtype: "combobox",
                        store: directionFiltersStore,
                        valueField: 'DirectionId',
                        displayField: 'DirectionName',
                        queryMode: 'local',
                        anyMatch: true,
                        width: 500,
                        listeners: {
                            change: function (t, newValue, oldValue, eOpts) {
                                changeDirectionEvent(filtersWnd, directionFiltersStore, profileFiltersStore, newValue);
                            }
                        }
                    },
                    {
                        fieldLabel: "Образовательная программа",
                        itemId: "profile",
                        value: prevSettings['profileId'],
                        xtype: "combobox",
                        store: profileFiltersStore,
                        valueField: 'ProfileId',
                        displayField: 'ProfileName',
                        queryMode: 'local',
                        anyMatch: true,
                        width: 500
                    },
                ],
                buttons: [
                    {
                        text: "OK",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: "Отмена",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]
            });

        changeDivisionEvent(filtersWnd, directionFiltersStore, profileFiltersStore, prevSettings['divisionId'], true);
        changeDirectionEvent(filtersWnd, directionFiltersStore, profileFiltersStore, prevSettings['directionId']);
        filtersWnd.getComponent("direction").setValue(prevSettings['directionId']);
        filtersWnd.getComponent("profile").setValue(prevSettings['profileId']);
        
        setFilters();

        var createWnd = Ext.create('Ext.window.Window',
            {
                title: "Добавление ОХОП",
                closeAction: 'hide',
                resizable: false,
                autoHeight: false,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500,
                    labelWidth: 130
                },
                items: [
                    {
                        fieldLabel: "Институт",
                        itemId: "division",
                        xtype: "combobox",
                        store: divisionStore,
                        valueField: 'DivisionId',
                        displayField: 'DivisionName',
                        queryMode: 'local',
                        anyMatch: true,
                        allowBlank: false,
                        width: 500,
                        listeners: {
                            change: function (t, newValue, oldValue, eOpts) {
                                changeDivisionEvent(createWnd, directionStore, profileStore, newValue, false);
                            }
                        }
                    },
                    {
                        fieldLabel: "Направление",
                        itemId: "direction",
                        xtype: "combobox",
                        store: directionStore,
                        valueField: 'DirectionId',
                        displayField: 'DirectionName',
                        queryMode: 'local',
                        anyMatch: true,
                        allowBlank: false,
                        width: 500,
                        listeners: {
                            change: function (t, newValue, oldValue, eOpts) {
                                changeDirectionEvent(createWnd, directionStore, profileStore, newValue);
                            }
                        }
                    },
                    {
                        fieldLabel: "Образовательная программа",
                        itemId: "profile",
                        xtype: "combobox",
                        store: profileStore,
                        valueField: 'ProfileId',
                        displayField: 'ProfileName',
                        queryMode: 'local',
                        anyMatch: true,
                        allowBlank: false,
                        width: 500
                    },{
                        xtype: 'numberfield',
                        fieldLabel: 'Учебный год',
                        itemId: 'year',
                        hideTrigger: true,
                        cls: 'field-margin',
                        minValue: 2014,
                        maxValue: 2099,
                        validator: required,
                        width: 200
                    }
                ],
                buttons: [
                    {
                        text: "OK",
                        handler: function () {
                            var isValid = true;
                            createWnd.items.items.forEach(function (element, index, array) {
                                if (!element.isValid()) isValid = false;
                            });
                            if (!isValid) return false;
                            Ext.getBody().mask('Сохранение...');
                            Ext.Ajax.request({
                                url: '@Url.Action("Create")',
                                params: {
                                    profile: createWnd.getComponent("profile").getValue(),
                                    year: createWnd.getComponent("year").getValue()
                                },
                                success: function (response) {
                                    var data = Ext.decode(response.responseText);
                                    if (data.success) {
                                        focus = data.id;
                                        createWnd.hide();
                                        store.reload();
                                    }
                                    else {
                                        Ext.MessageBox.show({
                                            title: 'Ошибка',
                                            msg: data.message,
                                            buttons: Ext.MessageBox.OK
                                        });
                                    }
                                    Ext.getBody().unmask();
                                },
                                failure: function (response) {
                                    Ext.getBody().unmask();
                                    createWnd.hide();
                                }
                            });
                        }
                    },
                    {
                        text: "Отмена",
                        handler: function () { createWnd.hide(); }
                    }
                ]
            });

        var editWnd = function (record) {
            return Ext.create('Ext.window.Window',
                {
                    title: "Редактирование ОХОП",
                    closeAction: 'hide',
                    overflowY: 'auto',
                    resizable: true,
                    maxHeight: 500,
                    autoHeight: true,
                    width: 400,
                    modal: true,
                    bodyPadding: 6,
                    layout: { type: 'vbox', align: 'stretch' },
                    items: [
                        {
                            xtype: 'hidden',
                            hidden: true,
                            value: record.data.id,
                            itemId: "Id"
                        },
                        {
                            xtype: 'label',
                            text: `${record.data.profile} ${record.data.profileTitle}`,
                            style: 'font-weight: normal;'
                        },
                        {
                            xtype: 'numberfield',
                            fieldLabel: 'Учебный год',
                            itemId: 'Year',
                            hideTrigger: true,
                            cls: 'field-margin',
                            minValue: 2014,
                            maxValue: 2099,
                            validator: required,
                            width: 200,
                            value: record.data.year
                        }
                    ],
                    buttons: [
                        {
                            text: "Сохранить",
                            handler: function (btn) {
                                var isValid = true;
                                var wnd = this.up('window');

                                var yearCmp = wnd.getComponent("Year");
                                if (!yearCmp.isValid())
                                    return false;
                                                               
                                var id = wnd.getComponent("Id").getValue();
                                var year = yearCmp.getValue();

                                Ext.Ajax.request({
                                    url: '/BasicCharacteristicOP/Edit',
                                    params: {
                                        id: id,
                                        year: year
                                    },
                                    success: function (response) {
                                        var data = Ext.decode(response.responseText);
                                        if (!data.success) {
                                            Ext.MessageBox.show({
                                                title: 'Информационное сообщение',
                                                msg: data.message,
                                                buttons: Ext.MessageBox.OK,
                                                fn: function (btn) {
                                                }
                                            });
                                        }
                                        else {

                                            wnd.close();

                                            try {
                                                var recordIndex = store.findBy(r => r.data.Id === id);
                                                if (recordIndex == -1) {
                                                    store.reload();
                                                    return;
                                                }
                                                else
                                                    store.getAt(recordIndex).data.year = year;
                                                
                                                Ext.getCmp(id).getView().refresh();
                                            }
                                            catch{
                                                store.reload();
                                            }
                                        }
                                    },
                                    failure: function (d) {
                                        Ext.MessageBox.alert('Ошибка', "Неизвестная ошибка");
                                    }
                                });
                            }
                        }
                    ]
                });
        }

        var id = 'OhopGrid';

        var gridPanel = Ext.create('Ext.grid.Panel', {
            region: 'center',
            store: store,
            id:id,
            tbar: [
                {
                    xtype: 'button',
                    text: 'Фильтры...',
                    handler: function() { filtersWnd.show(); }
                },
                {
                    xtype: 'button',
                    text: "Отменить фильтры",
                    handler: function() {
                        store.clearFilter();
                        localStorage.setItem(localStorageName, JSON.stringify([]));
                    }
                }, '-',
                {
                    xtype: 'button',
                    text: 'Добавить',
                    hidden: '@ViewBag.CanEdit' == 'False',
                    handler: function () {
                        createWnd.show();
                    }
                }
            ],
            loadMask: true,
            columnLines: true,
            viewConfig: {
                markDirty: false
            },
            columns: [
                { xtype: 'rownumberer', width: 50 },
                {
                    header: 'Направление',
                    dataIndex: 'directionOkso',
                    width: 200,
                    renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                        value = `${record.data.directionOkso} - ${record.data.directionTitle}`;
                        metaData.tdAttr = 'data-qtip="' + Ext.String.htmlEncode(value) + '"';
                        return value;
                    }
                },
                {
                    header: 'Стандарт',
                    dataIndex: 'standard',
                    renderer: Ext.util.Format.htmlEncode,
                    width: 120
                },
                {
                    header: 'Образовательная программа',
                    dataIndex: 'profile',
                    width: 250,
                    renderer: function (value, metaData, record, rowIndex, colIndex, store, view) {
                        value = `${record.data.profile} - ${record.data.profileTitle}`;
                        metaData.tdAttr = 'data-qtip="' + Ext.String.htmlEncode(value) + '"';
                        return value;
                    }
                },
                {
                    header: 'Уровень обучения',
                    align: 'center',
                    dataIndex: 'qualification',
                    width: 150
                },
                {
                    header: 'Подразделение',
                    dataIndex: 'divisionTitle',
                    cellWrap: true,
                    renderer: Ext.util.Format.htmlEncode,
                    width: 170
                },
                {
                    header: 'Год',
                    dataIndex: 'year',
                    renderer: Ext.util.Format.htmlEncode,
                    width: 80
                },
                {
                    xtype: 'actioncolumn',
                    header: 'ОХОП',
                    region: 'center',
                    sortable: false,
                    width: 80,
                    items: [
                        {
                            icon: '@Url.Content("~/Content/Images/edit.png")',
                            iconCls: 'icon-padding',
                            tooltip: 'Редактировать',
                            handler: function (grid, rowIndex, colIndex) {
                                var rec = grid.getStore().getAt(rowIndex);
                                var wnd = editWnd(rec);
                                wnd.show();
                            }
                        },
                        {
                            icon: '@Url.Content("~/Content/Images/document-go.png")',
                            iconCls: 'icon-padding',
                            tooltip: 'ОХОП',
                            handler: function (grid, rowIndex, colIndex) {
                                var rec = grid.getStore().getAt(rowIndex);
                                if (!rec.get('documentKind'))
                                    alert('Для данной образовательной программы ОХОП не формируется');
                                var formPanel = Ext.create('VersionedDocs.Selector', {
                                    documentKind: rec.get('documentKind'),
                                    linkedEntityId: rec.get('id'),
                                    canView: @(canViewWorkingPrograms ? "true" : "false"),
                                    canEdit: @(canManageWorkingPrograms ? "true" : "false"),
                                    hiddenStandard: true,
                                    hiddenYear: false,
                                    year: rec.get('year')
                                });
                                formPanel.items.items[0].items.items[0].setEditable('true');
                                formPanel.show();
                            }
                        }
                    ]
                }
            ]
        });

        var items = [
            gridPanel
        ];

        Urfu.createViewport('border', items);
        gridPanel.getStore().on('load', function (store, records, options) {
            if (focus)
            {
                var focusRow = store.findExact('id', focus);
                if (focusRow > 0) {
                    var rowData = store.getAt(focusRow);
                    gridPanel.getView().focusRow(rowData);
                    gridPanel.getSelectionModel().select(rowData);
                }
            }
            focus = null;
            return false;
        });
    });
    </script>
}