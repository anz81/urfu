@{
    ViewBag.Title = "Профессиональные стандарты";
    Layout = "~/Views/Shared/_ExtLayout.cshtml";
}

<style>
    .x-action-col-icon {
        height: 16px;
        width: 16px;
        margin-left: 7px !important;
    }

    .custom-combo .x-form-trigger-wrap-default {
        border: none;
    }

    .displayfield {
        margin-top: 11px;
        padding-left: 6px;
    }
    
</style>

@section scripts
{
    <script type="text/javascript">
    Ext.onReady(function() {
        Ext.tip.QuickTipManager.init();

        var filterName = "ProfStandardsFilters";

        var store = Ext.create("Ext.data.Store",
            {
                autoLoad: true,
                remoteSort: true,
                remoteFilter: true,
                proxy: {
                    type: 'ajax',
                    url: window.location.pathname,
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    }
                }
            });

        var profActivityAreaStore = Ext.create("Ext.data.Store",
            {
                autoLoad: false,
                proxy: {
                    type: 'ajax',
                    url: '@Url.Action("GetProfActivityArea")',
                    reader: { type: 'json' }
                }
            });

        var standardStore = Ext.create("Ext.data.Store",
            {
                autoLoad: false,
                proxy: {
                    type: 'ajax',
                    url: '@Url.Action("GetProfStandards")',
                    reader: {
                        type: 'json',
                        rootProperty: 'data'
                    }
                }
            });


        var prevSettings = {};
        try {
            var prevSettingString = JSON.parse(localStorage.getItem(filterName) || "[]");

            for (var i = 0; i < prevSettingString.length; i++) {
                prevSettings[prevSettingString[i]["property"]] = prevSettingString[i]["value"];
            }
            store.setFilters(prevSettingString);
        } catch (err) {
            console.log(err);
        }

        var filtersWnd = null;
        var setFilters = function() {
            var settings = [
                { property: 'Code', value: filtersWnd.getComponent("ProfStandardCodeField").getValue() },
                { property: 'ProfArea', value: filtersWnd.getComponent("ProfActivityAreaField").getValue() }
            ];
            store.setFilters(settings);
            localStorage.setItem(filterName, JSON.stringify(settings));
        };

        filtersWnd = Ext.create('Ext.window.Window',
            {
                title: "Фильтры",
                closeAction: 'hide',
                closeToolText: 'Закрыть окно',
                resizable: false,
                autoHeight: true,
                bodyPadding: 6,
                defaults: {
                    xtype: 'textfield',
                    width: 500
                },
                items: [
                    {
                        xtype: 'combobox',
                        fieldLabel: "Область профессиональной деятельности",
                        labelWidth: 200,
                        itemId: "ProfActivityAreaField",
                        store: profActivityAreaStore,
                        value: prevSettings["ProfActivityAreaCode"],
                        queryMode: 'remote',
                        displayField: 'ProfAreaTitle',
                        valueField: 'ProfArea',
                        listeners: {
                            change: function(t, newValue, oldValue) {
                                filtersWnd.getComponent('ProfStandardCodeField').clearValue();
                                standardStore.load({
                                    params: {
                                        areaCode: newValue
                                    }
                                })
                            }
                        }
                    },
                    {
                        xtype: 'combobox',
                        fieldLabel: "Код профессионального стандарта",
                        labelWidth: 200,
                        itemId: "ProfStandardCodeField",
                        store: standardStore,
                        value: prevSettings["Code"],
                        queryMode: 'local',
                        displayField: 'Title',
                        valueField: 'Code',
                        anyMatch: true
                    }
                ],
                buttons: [
                    {
                        text: "OK",
                        handler: function() {
                            setFilters();
                            filtersWnd.hide();
                        }
                    },
                    {
                        text: "Отмена",
                        handler: function() { filtersWnd.hide(); }
                    }
                ]

            });

        var gridPanel = Ext.create('Ext.grid.Panel',
            {
                region: 'center',
                store: store,
                columnLines: true,
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Фильтры...',
                        handler: function() { filtersWnd.show(); }
                    },
                    {
                        xtype: 'button',
                        text: 'Отменить фильтры',
                        handler: function() {
                            store.clearFilter();
                            settings = [];
                            localStorage.setItem(filterName, JSON.stringify([]));
                        }
                    },
                    {
                        xtype: 'button',
                        text: 'Добавить стандарт',
                        hidden: '@ViewBag.CanEdit' == 'False',
                        handler: function() {
                            createRecordWindow().show();
                        }
                    }
                ],
                columns: [
                    { xtype: 'rownumberer', header: '№', width: 60 },
                    {
                        header: 'Код профессионального стандарта',
                        dataIndex: 'Code',
                        width: 200,
                        align: 'center',
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Наименование профессионального стандарта',
                        dataIndex: 'Title',
                        width: 590,
                        align: 'left',
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Область профессиональной деятельности',
                        dataIndex: 'ProfArea',
                        width: 250,
                        align: 'center',
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        header: 'Вид профессиональной деятельности',
                        dataIndex: 'ProfKind',
                        width: 650,
                        align: 'left',
                        renderer: Ext.util.Format.htmlEncode
                    },
                    {
                        xtype: 'actioncolumn',
                        resizable: false,
                        sortable: false,
                        align: 'center',
                        width: 60,
                        hidden: '@ViewBag.CanEdit' == 'False',
                        items: [
                            {
                                icon: '/Content/Images/edit.png',
                                tooltip: 'Редактировать',
                                handler: function(grid, rowIndex, colIndex, item, e, record) {
                                    createRecordWindow(record).show();
                                }
                            },
                            {
                                icon: '@Url.Content("/Content/Images/remove.png")',
                                tooltip: 'Удалить',

                                handler: function(grid, rowIndex, colIndex, item, e, record) {
                                    Ext.MessageBox.show({
                                        title: 'Удаление',
                                        msg: 'Вы действительно хотите удалить запись?',
                                        buttons: Ext.MessageBox.YESNO,
                                        fn: function(button) {
                                            if ('yes' == button) {
                                                Ext.Ajax.request({
                                                    method: 'GET',
                                                    url: '@Url.Action("Delete")',
                                                    params: { code: record.get('Code') },
                                                    success: function(response) {
                                                        var r = Ext.decode(response.responseText);
                                                        if (!r.success)
                                                            Ext.MessageBox.alert('', r.message);
                                                        else {
                                                            store.reload();
                                                            Ext.MessageBox.alert('', 'Запись удалена');
                                                        }
                                                    },
                                                    failure: function(xhr) {
                                                        Ext.MessageBox.show({
                                                            msg: xhr.responseText
                                                        })

                                                    }
                                                });
                                            }
                                        },
                                        icon: Ext.MessageBox.QUESTION
                                    })
                                }
                            }
                        ]
                    }
                ]
            });


        var proxy = new Ext.data.proxy.Ajax({
            url: '@Url.Action("GetProfAktivityKinds")',
            reader: {
                type: 'json',
                rootProperty: 'data'
            }
        });


        function createRecordWindow(record) {
            return Ext.create('Ext.window.Window',
                {
                    title: record ? 'Редактирование записи' : 'Добавление записи',
                    closeAction: 'hide',
                    closeToolText: 'Закрыть окно',
                    resizable: false,
                    bodyPadding: 6,
                    viewModel: {
                        data: Ext.apply({}, record ? record.data : {}),
                        stores: {
                            areastore: {
                                autoLoad: true,
                                proxy: {
                                    type: 'ajax',
                                    url: '@Url.Action("GetProfActivityArea")',
                                    reader: {
                                        type: 'json',
                                        rootProperty: 'data'
                                    }
                                }
                            },
                            profactkindstore: {}
                        }
                    },
                    items: {
                        xtype: 'form',
                        layout: { type: 'vbox', align: 'stretch' },
                        defaults: {
                             labelWidth: 200,
                             width: 700
                        },
                        items: [
                            {
                                xtype: 'combobox',
                                fieldLabel: 'Область профессиональной деятельности',
                                name: 'ProfActivityAreaCode',
                                readOnly: !!record,
                                readOnlyCls:'custom-combo',
                                bind: {
                                    store: '{areastore}',
                                    value: '{ProfAreaCode}'
                                },
                                allowBlank: false,
                                queryMode: 'local',
                                displayField: 'ProfAreaTitle',
                                valueField: 'ProfArea',
                                forceSelection: true,
                                listeners: {
                                    select: function (combo, value, eOpts) {
                                        var profstore = combo.up('form').up('window').viewModel
                                            .getStore('profactkindstore');
                                        if (profstore && proxy && !record) {
                                            proxy.extraParams = {
                                                areaCode: value.data.ProfArea,
                                                newprofactivitykinds: true
                                            };
                                            profstore.setProxy(proxy).load({
                                                callback : function() {
                                                    if (this.getCount() == 0)
                                                        this.insert(0,
                                                            {
                                                                "ProfActivityKindCode":null,
                                                                "Title":
                                                                    "Ничего не найдено"
                                                            });
                                                }
                                            });
                                        }
                                        var codefield = combo.up('form').query('[name=Code]')[0];
                                        codefield.setValue(codefield.originalValue);
                                    },
                                    dirtychange: function (t, isDirty, eOpts) {
                                        try {
                                            var profstore = t.up('form').up('window').viewModel
                                                .getStore('profactkindstore');
                                            if (profstore && proxy && record) {
                                                proxy.extraParams = {
                                                        areaCode:t.value,
                                                        newprofactivitykinds:false
                                                    };
                                                profstore.setProxy(proxy).load();
                                            }
                                        }
                                        catch{
                                            t.up('form').up('window').viewModel.getStore('profactkindstore').setData([]);
                                        }
                                    }
                                }
                            },
                            {
                                xtype: 'combobox',
                                fieldLabel: 'Вид профессиональной деятельности',
                                name: 'ProfActivityKindCode',
                                displayField: 'Title',
                                valueField: 'ProfActivityKindCode',
                                queryMode: 'local',
                                forceSelection: true,
                                readOnly: !!record,
                                readOnlyCls: 'custom-combo',
                                allowBlank: false,
                                bind: {
                                        store: '{profactkindstore}',
                                        value: '{ProfActivityKindCode}'
                                    },
                                validator: function () {
                                    if (Ext.isEmpty(this.getRawValue()) || this.getValue() == null) {
                                        return false;
                                    }
                                    else
                                        return true;
                                },
                                listeners: {
                                    select: function (combo, value, eOpts) {
                                            var codefield = combo.up('form').query('[name=Code]')[0];
                                            codefield.setValue(value.data.ProfActivityKindCode);
                                    }
                                },

                            },
                            {
                                xtype: 'displayfield',
                                fieldLabel: 'Код профессионального стандарта',
                                name: 'Code',
                                bind: '{Code}',
                                fieldCls:'displayfield',
                                value: '<i>Значение совпадает с кодом вида профессиональной деятельности</i>'
                            },
                            {
                                xtype: 'textarea',
                                fieldLabel: 'Наименование профессионального стандарта',
                                name: 'Title',
                                maxLength: 160,
                                minLength: 1,
                                bind: '{Title}'
                            }
                        ],
                          buttons: [
                                {
                                    text: "Сохранить",
                                    formBind: true,
                                    handler: function() {
                                        var window = this.up('window');
                                        var form = window.down('form');

                                        if (!form.isValid()) {
                                            Ext.Msg.alert('Ошибка', 'Заполнены не все поля');
                                            return;
                                        }
                                        form.submit({
                                            url: record ? '@Url.Action("Edit")' : '@Url.Action("Create")',
                                            success: function(form, action) {
                                                var r = action.result;
                                                if (!r.success) {
                                                    Ext.MessageBox.alert('', r.message);
                                                } else {
                                                    Ext.MessageBox.alert('', 'Информация сохранена.');
                                                    store.reload();
                                                    window.close();
                                                }
                                            },
                                            failure: function(form, action) {
                                                Ext.MessageBox.alert('',
                                                    'Информация не сохранена. ' + action.result.message);
                                            }
                                        });
                                    }
                                },
                                {
                                    text: "Отмена",
                                    handler: function() { this.up('window').close(); }
                                }
                            ]


                    }

              });
        }

        var items = [
            gridPanel
        ];

        Urfu.createViewport('border', items);

  });

    </script>
}


