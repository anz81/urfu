@using Urfu.Its.Common
@using Urfu.Its.Web.DataContext

@{
    Layout = "~/Views/Shared/_ExtLayout.cshtml";
    var filterName = "ProjectCompetitionGroupStudentsFilters";
}

@section scripts
{
    <script type="text/javascript">

        var statuses =
            @Html.Raw(Json.Encode(EnumHelper<AdmissionStatus>.GetValues(AdmissionStatus.Admitted).Select(m => new {Value = m, Text = EnumHelper<AdmissionStatus>.GetDisplayValue(m)}).ToList()));
        var statesStore = Ext.create('Ext.data.Store',
            {
                fields: ['Value', 'Text'],
                data: statuses
            });

        Ext.onReady(function() {

            Ext.tip.QuickTipManager.init();

            var hideStudentsStoreName = 'hideStudentsProjectAdmission';
            var isPriority = null;

            var columnsToShowName = 'columnsToShowProjectAdmissioin';
            var columnsToShow = [];

            function parseJson(json) {
                var data = JSON.parse(json.replace(/&quot;/g, '"'));
                return data;
            }

            var dataDirections = parseJson('@ViewBag.Directions');
            var directionsStore = Ext.create("Ext.data.Store",
                {
                    data: dataDirections
                });

            var dataRoles = parseJson('@ViewBag.Roles');
            var rolesStore = Ext.create("Ext.data.Store",
                {
                    data: dataRoles
                });

            var store = Ext.create("Ext.data.BufferedStore",
                {
                    fields: [
                        "Id", "GroupName", "Surname", "Name", "PatronymicName", "Rating", "IsTarget", "IsInternational",
                        "Compensation", "Priority", "Status", "PersonalNumber", "StudentStatus", "AnotherAdmission",
                        "VariantId", "Published", "Modified", "OtherAdmission", "Comment"
                    ],
                    autoLoad: true,
                    pageSize: 300,
                    remoteSort: true,
                    remoteFilter: true,
                    proxy: {
                        type: 'ajax',
                        url: '@Url.Action("CompetitionGroupStudentsAjax")',
                        extraParams: {
                            id: '@ViewBag.Id',
                            hideStudents: sessionStorage.getItem(hideStudentsStoreName) || false
                        },
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });

            var prevSettings = {};
            try {
                var prevSettingString = JSON.parse(localStorage.getItem("@filterName") || "[]");

                for (var i = 0; i < prevSettingString.length; i++) {
                    prevSettings[prevSettingString[i]["property"]] = prevSettingString[i]["value"];
                }

                var columnsToShow = JSON.parse(localStorage.getItem(columnsToShowName) || []);

            } catch (err) {

            }

            var filtersWnd = null;

            function loadStore() {
                store.proxy.setUrl('@Url.Action("CompetitionGroupStudentsAjax")' +
                    '?filter=' +
                    encodeURIComponent(localStorage.getItem("@filterName")));
                store.load();
            }

            var setFilters = function() {
                var settings = [
                    { property: 'GroupName', value: filtersWnd.getComponent("GroupNameField").getValue() },
                    { property: 'Direction', value: filtersWnd.getComponent("Direction").getValue() },
                    { property: 'Surname', value: filtersWnd.getComponent("SurnameField").getValue() },
                    { property: 'Name', value: filtersWnd.getComponent("NameField").getValue() },
                    { property: 'StudentStatus', value: filtersWnd.getComponent("StudentStatusField").getValue() },
                    { property: 'Status', value: filtersWnd.getComponent("StatusField").getValue() },
                    { property: 'PersonalNumber', value: filtersWnd.getComponent("PersonalNumber").getValue() },
                    { property: 'PatronymicName', value: filtersWnd.getComponent("PatronymicNameField").getValue() },
                    { property: 'withoutAdmission', value: filtersWnd.getComponent("withoutAdmissionField").getValue() }
                ];
                if (isPriority)
                    settings.push({ property: 'IsPriority', value: true });
                localStorage.setItem("@filterName", JSON.stringify(settings));
                loadStore();
            };

            filtersWnd = Ext.create('Ext.window.Window',
                {
                    title: "Фильтры",
                    closeAction: 'hide',
                    resizable: false,
                    autoHeight: true,
                    bodyPadding: 6,
                    defaults: {
                        xtype: 'textfield',
                        width: 500
                    },
                    items: [
                        { fieldLabel: "Название группы", itemId: "GroupNameField", value: prevSettings["GroupName"] },
                        {
                            fieldLabel: 'Направление',
                            itemId: "Direction",
                            value: prevSettings["Direction"],
                            xtype: 'combobox',
                            store: directionsStore,
                            valueField: 'Id',
                            displayField: 'Name',
                            queryMode: 'local'
                        },
                        { fieldLabel: "Фамилия", itemId: "SurnameField", value: prevSettings["Surname"] },
                        { fieldLabel: "Имя", itemId: "NameField", value: prevSettings["Name"] },
                        { fieldLabel: "Отчество", itemId: "PatronymicNameField", value: prevSettings["PatronymicName"] },
                        { fieldLabel: "Статус", itemId: "StudentStatusField", value: prevSettings["StudentStatus"] },
                        { fieldLabel: "Номер", itemId: "PersonalNumber", value: prevSettings["PersonalNumber"] },
                        {
                            fieldLabel: "Состояние",
                            itemId: "StatusField",
                            value: prevSettings["Status"],
                            xtype: "combobox",
                            store: statesStore,
                            valueField: 'Value',
                            displayField: 'Text',
                            queryMode: 'local'

                        },
                        {
                            xtype: 'checkboxfield',
                            itemId: 'withoutAdmissionField',
                            fieldLabel: 'Скрыть зачисленных на другие проекты',
                            labelWidth: 300,
                            value: prevSettings["withoutAdmission"]
                        }
                    ],
                    buttons: [
                        {
                            text: "OK",
                            handler: function() {
                                setFilters();
                                filtersWnd.hide();
                            }
                        },
                        {
                            text: "Отмена",
                            handler: function() { filtersWnd.hide(); }
                        }
                    ]
                });

            setFilters();

            var selRecord = [];
            var gridPanel = null;

            function setAdmissionStatus(rec, status) {
                var request = function() {

                    var students = rec.map(function(l) {
                        return {
                            Id: l.get("Id"),
                            RoleId: l.get("RoleId")
                        };
                    });
                    //var jsonIds = JSON.stringify(ids);

                    Ext.Ajax.request({
                        url: '@Url.Action("SetCompetitionGroupAdmissionStatus", new {propertyId = ViewBag.PropertyId,})',
                        params: {
                            studentIds: JSON.stringify(students), //rec.map(function (l) { return {"Id": l.get("Id"), "RoleId": l.get("RoleId") }; }),
                            minorPeriodId: @ViewBag.ProjectPeriodId,
                            status: status
                        },
                        success: function(response) {
                            gridPanel.unmask();
                            var data = Ext.decode(response.responseText);
                            if (data.msg)
                                Ext.MessageBox.show({
                                    title: 'Информационное сообщение',
                                    msg: data.msg,
                                    buttons: Ext.MessageBox.OK,
                                    icon: Ext.MessageBox.INFO
                                });
                            if (data.reload)
                                location.reload();


                            for (var i in rec) {
                                rec[i].set("Status", status);
                                rec[i].set("Published", false);
                                // rec.Save();
                            }
                            statusChanged(rec);
                            //store.commitChanges();
                            gridPanel.getView().refresh();
                            limitsStore.reload();

                        }
                    });
                }
                gridPanel.mask('...');
                request();
            }


            var indeterminateButton = Ext.create('Ext.Button',
                {
                    xtype: 'button',
                    disabled: true,
                    text: 'Нет решения',
                    handler: function() { setAdmissionStatus(selRecord, 0); }
                });

            var admittedButton = Ext.create('Ext.Button',
                {
                    xtype: 'button',
                    disabled: true,
                    text: 'Зачислен',
                    handler: function() { setAdmissionStatus(selRecord, 1); }
                });

            var deniedButton = Ext.create('Ext.Button',
                {
                    xtype: 'button',
                    disabled: true,
                    text: 'Не зачислен',
                    handler: function() { setAdmissionStatus(selRecord, 2); }
                });

            var sendButton = Ext.create('Ext.Button',
                {
                    xtype: 'button',
                    disabled: true,
                    text: 'Отправить в ЛК',
                    handler: function() {
                        setTimeout(function() {
                                selRecord.forEach(function(el, index, array) {
                                    el.set("Published", true);
                                });
                            },
                            0);
                        Ext.Ajax.request({
                            url: '@Url.Action("PublishCompetitionGroupAdmission")',
                            params: {
                                studentId: selRecord.map(function(l) { return l.get("Id"); }),
                                propertyId: @ViewBag.PropertyId
                            },
                            success: function(response) {
                                Ext.toast({ html: "Сообщение отправлено", align: 't' });
                                gridPanel.getView().refresh();
                            }
                        });

                    }
                });
            var downloadExcel = Ext.create('Ext.Button',
                {
                    xtype: 'button',
                    text: 'В Excel',
                    handler: function() {
                        var fileUrl = '@Url.Action("DownloadCompetitionGroupStudents", new {Id = ViewBag.PropertyId})' +
                            "?filter=" +
                            encodeURIComponent(localStorage.getItem("@filterName") || "[]");
                        window.location.href = fileUrl;
                    }
                });


            function statusChanged(rec) {
                if (rec == null)
                    return;
                for (var i in rec) {
                    var anotherAdmission = rec[i].get("AnotherAdmission");
                    var status = rec[i].get("Status");
                    if (!anotherAdmission) {
                        indeterminateButton.setDisabled(status == 0 || '@ViewBag.CanEdit' == 'False');
                        admittedButton.setDisabled(status == 1 || '@ViewBag.CanEdit' == 'False');
                        deniedButton.setDisabled(status == 2 || '@ViewBag.CanEdit' == 'False');
                        sendButton.setDisabled('@ViewBag.CanEdit' == 'False');
                    } else {
                        indeterminateButton.disable();
                        admittedButton.disable();
                        deniedButton.disable();
                        sendButton.disable();
                    }
                }
            }

            var limitsStore = Ext.create("Ext.data.Store",
                {
                    autoLoad: true,
                    remoteSort: true,
                    remoteFilter: true,
                    groupField: 'groupField',
                    proxy: {
                        type: 'ajax',
                        url: '@Url.Action("Limits")',
                        extraParams: {
                            id: '@ViewBag.Id'
                        },
                        reader: {
                            type: 'json',
                            rootProperty: 'data',
                            totalProperty: 'total'
                        }
                    }
                });

            var grouping = Ext.create('Ext.grid.feature.Grouping',
                {
                    ftype: 'grouping',
                    collapsible: true,
                    startCollapsed: true,
                    groupHeaderTpl: '{name}'
                });

            gridPanel = Ext.create('Ext.grid.Panel',
                {
                    multiSelect: true,
                    region: 'center',
                    store: store,
                    id: 'studentsGrid',
                    loadMask: true,
                    listeners: {
                        selectionchange: function(el, records) {
                            selRecord = records.slice();
                            statusChanged(selRecord);
                        }
                    },
                    dockedItems: [
                        Ext.create('Ext.grid.Panel',
                            {
                                store: limitsStore,
                                features: [grouping],
                                columns: [
                                    { header: 'Направление', dataIndex: 'okso', width: 150, renderer: Urfu.renders.htmlEncodeWithToolTip },
                                    { header: 'Образовательная программа', dataIndex: 'profile', width: 200, renderer: Urfu.renders.htmlEncodeWithToolTip },
                                    { header: 'Лимит', dataIndex: 'limit', width: 100, renderer: Urfu.renders.htmlEncodeWithToolTip },
                                    { header: 'Зачислено', dataIndex: 'admitted', width: 120, renderer: Urfu.renders.htmlEncodeWithToolTip },
                                    { header: 'Свободных мест', dataIndex: 'freePlaces', width: 120, renderer: Urfu.renders.htmlEncodeWithToolTip }
                                ],
                                autoHeight: true,
                                autoWidth: true,
                                renderTo: Ext.getBody()
                            }),
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    text: 'Фильтры...',
                                    handler: function() { filtersWnd.show(); }
                                },
                                {
                                    xtype: 'button',
                                    text: "Отменить фильтры",
                                    handler: function() {
                                        filtersWnd.items.items.forEach(function(element, index, array) {
                                            element.setValue('');
                                        });
                                        localStorage.setItem("@filterName", []);
                                        loadStore();
                                    }
                                },
                                {
                                    xtype: 'button',
                                    text: "Скрыть\\показать студентов c приоритетом",
                                    handler: function() {
                                        window.showPriority = !window.showPriority;
                                        if (window.showPriority) {
                                            isPriority = true;
                                        } else {
                                            isPriority = null;
                                        }
                                        setFilters();
                                    }
                                },
                                '-',
                                indeterminateButton,
                                admittedButton,
                                deniedButton,
                                '-',
                                sendButton,
                                downloadExcel
                            ]
                        },
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'checkbox',
                                    boxLabel: 'Скрыть неактивных студентов',
                                    value: sessionStorage.getItem(hideStudentsStoreName) || false,
                                    listeners: {
                                        change: function(t, newValue, oldValue, eOpts) {
                                            store.getProxy().setExtraParam('hideStudents', newValue);
                                            sessionStorage.setItem(hideStudentsStoreName, newValue);
                                            console.log('alert', newValue);
                                            setFilters();
                                        }
                                    }
                                },
                            ]
                        }
                    ],
                    viewConfig: {
                        getRowClass: function(record) {
                            return !record.get('Published')
                                ? 'highlight'
                                : '';
                        },
                        markDirty: false
                    },
                    plugins: [
                        {
                            ptype: 'cellediting',
                            clicksToEdit: 1,
                            listeners: {
                                beforeedit: function(e, editor, opt) {
                                    return editor.record.data.Status != 1; // студентам со статусом "Зачислен" нельзя поменять роль
                                }
                            }
                        }
                    ],
                    columns: [
                        { xtype: 'rownumberer', width: 50 },
                        {
                            header: 'Направление',
                            align: 'center',
                            dataIndex: 'okso',
                            sortable: false,
                            width: 140,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Образовательная программа',
                            align: 'left',
                            dataIndex: 'profileCode',
                            sortable: false,
                            width: 120,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Название группы',
                            dataIndex: 'GroupName',
                            width: 120,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Фамилия',
                            dataIndex: 'Surname',
                            width: 160,
                            renderer: function(value, metaData, record) {
                                return '<a href="/PersonalInfo/Student?studentId=' + record.data.Id + '">' + value + '</a>';
                            }
                        },
                        {
                            header: 'Имя',
                            dataIndex: 'Name',
                            width: 160,
                            renderer: Urfu.renders.htmlEncode
                        },
                        {
                            header: 'Отчество',
                            dataIndex: 'PatronymicName',
                            width: 160,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Статус',
                            dataIndex: 'StudentStatus',
                            width: 120,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Личный номер студента',
                            dataIndex: 'PersonalNumber',
                            width: 120,
                            renderer: Ext.util.Format.htmlEncode
                        },
                        {
                            header: 'Рейтинг',
                            dataIndex: 'Rating',
                            width: 90
                        },
                        {
                            header: 'Целевой',
                            dataIndex: 'IsTarget',
                            width: 100,
                            align: 'center',
                            renderer: function(val) { return val ? 'Да' : "Нет" }
                        },
                        {
                            header: 'Иностранный студент',
                            dataIndex: 'IsInternational',
                            width: 150,
                            align: 'center',
                            renderer: function(val) { return val ? 'Да' : "Нет" }
                        },
                        {
                            header: 'Вид возмещения затрат',
                            align: 'center',
                            dataIndex: 'Compensation',
                            width: 150,
                            renderer: Urfu.renders.htmlEncode
                        },
                        {
                            header: 'Приоритет в ЛК',
                            dataIndex: 'Priority',
                            align: 'center',
                            width: 150
                        },
                        {
                            header: 'Комментарий',
                            dataIndex: 'Comment',
                            align: 'center',
                            width: 250
                        },
                        {
                            header: 'Роль в ЛК',
                            dataIndex: 'Role',
                            id: 'student-role',
                            align: 'center',
                            width: 150,
                            sortable: false,
                            editor: {
                                xtype: 'combobox',
                                editable: false,
                                dataIndex: 'Role',
                                store: rolesStore,
                                allowBlank: false,
                                valueField: 'Id',
                                displayField: 'Name',
                                listeners: {
                                    'select': function(combo, records, eOpts) {
                                        combo.value = records.data.Name;
                                    }
                                }
                            },
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        },
                        {
                            header: 'Дата приоритета',
                            dataIndex: 'Modified',
                            align: 'center',
                            width: 160,
                            renderer: Ext.util.Format.dateRenderer('d-n-Y H:i:s')
                        },
                        {
                            header: 'Состояние',
                            width: 160,
                            dataIndex: 'Status',
                            xtype: 'templatecolumn',
                            tpl: new Ext.XTemplate(
                                '<tpl for="." if="!!AnotherAdmission">',
                                "Зачислен в {AnotherAdmission:htmlEncode}",
                                '<tpl else>',
                                '{[this.getAdmissionStatus(values.Status)]}',
                                "</tpl>",
                                {
                                    getAdmissionStatus: function(status) {
                                        return { 0: "Нет решения", 1: "Зачислен", 2: "Не зачислен" }[status];
                                    }
                                }
                            )
                        },
                        {
                            header: 'П-т', //'<span data-qtip="&shy" style="height: 20px"></span>',
                            dataIndex: 'Id',
                            width: 60,
                            renderer: function(val, meta, rec) {
                                if (val)
                                    return Ext.String
                                        .format('<a onclick=\'showLastProjects(\"{0}\")\' class="glyphicon glyphicon-eye-open" style="cursor:pointer"></a>', val);
                                else return "";
                            }
                        },
                        //{
                        //    header: 'Преподаватель',
                        //    align: 'center',
                        //    dataIndex: 'Teacher',
                        //    width: 200,
                        //    renderer: Urfu.renders.htmlEncode
                        //},
                        {
                            header: 'Другой проект',
                            align: 'center',
                            dataIndex: 'OtherAdmission',
                            width: 210,
                            renderer: Urfu.renders.htmlEncodeWithToolTip
                        }
                    ]
                });

            var items = [
                gridPanel
            ];
            Urfu.createViewport('border', items);

            function findRoleIdByName(name) {
                var roleId = -1;
                rolesStore.data.items.forEach(function(item, i, arr) {
                    if (item.data.Name == name)
                        roleId = item.data.Id;
                });
                return roleId;
            }

            gridPanel.on('edit',
                function(editor, e) {
                    var data = e.record.data;
                    var record = store.data.find("Id", data.Id);
                    record.data.RoleId = findRoleIdByName(data.Role);
                    record.data.Role = data.Role;
                    Ext.getCmp('studentsGrid').getView().refresh();
                });

            var hideColumns = function() {
                if (columnsToShow.length > 0) {
                    gridPanel.columns.forEach(function(column, index, arr) {
                        column.setHidden(columnsToShow.includes(column.dataIndex) == false);
                    });
                }
            };
            hideColumns();

            gridPanel.on('columnschanged',
                function(ct, e) {
                    columnsToShow = ct.gridVisibleColumns.map(function(c) { return c.dataIndex; });
                    localStorage.setItem(columnsToShowName, JSON.stringify(columnsToShow));
                });
        });

        function showLastProjects(id) {
            Ext.Ajax.request({
                url: '@Url.Action("GetStudentLastProjectsInfo")',
                params: {
                    id: id,
                },
                success: function(response) {
                    if (response.responseText != "") {
                        var data = Ext.decode(response.responseText);
                        Ext.MessageBox.show({
                            title: 'Предыдущие проекты',
                            msg: data.msg,
                        });
                    }
                }
            });
        }
    </script>
}


