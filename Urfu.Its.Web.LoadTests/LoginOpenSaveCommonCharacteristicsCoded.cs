//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Urfu.Its.Web.LoadTests
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;


    public class LoginOpenSaveCommonCharacteristicsCoded : WebTest
    {

        public LoginOpenSaveCommonCharacteristicsCoded()
        {
            this.Context.Add("host", "http://localhost:58727");
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }

            WebTestRequest request1 = new WebTestRequest((this.Context["host"].ToString() + "/Account/Login"));
            request1.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["host"].ToString() + "/")));
            ExtractHiddenFields extractionRule1 = new ExtractHiddenFields();
            extractionRule1.Required = true;
            extractionRule1.HtmlDecode = true;
            extractionRule1.ContextParameterName = "1";
            request1.ExtractValues += new EventHandler<ExtractionEventArgs>(extractionRule1.Extract);
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest((this.Context["host"].ToString() + "/Account/Login"));
            request2.Method = "POST";
            request2.ExpectedResponseUrl = (this.Context["host"].ToString() + "/");
            request2.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["host"].ToString() + "/Account/Login")));
            FormPostHttpBody request2Body = new FormPostHttpBody();
            request2Body.FormPostParameters.Add("__RequestVerificationToken", this.Context["$HIDDEN1.__RequestVerificationToken"].ToString());
            request2Body.FormPostParameters.Add("UserName", "Administrator");
            request2Body.FormPostParameters.Add("Password", "P@ssw0rd74");
            request2Body.FormPostParameters.Add("RememberMe", "true");
            request2Body.FormPostParameters.Add("RememberMe", this.Context["$HIDDEN1.RememberMe"].ToString());
            request2.Body = request2Body;
            yield return request2;
            request2 = null;

            WebTestRequest request3 = new WebTestRequest((this.Context["host"].ToString() + "/Document/2/CommonCharacteristics"));
            request3.ThinkTime = 1;
            yield return request3;
            request3 = null;

            WebTestRequest request4 = new WebTestRequest((this.Context["host"].ToString() + "/Document/2/Save"));
            request4.Method = "POST";
            request4.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request4.Headers.Add(new WebTestRequestHeader("Referer", (this.Context["host"].ToString() + "/Document/2/CommonCharacteristics")));
            StringHttpBody request4Body = new StringHttpBody();
            request4Body.ContentType = "application/json";
            request4Body.InsertByteOrderMark = false;
            request4Body.BodyString = "{\"blocksData\":\"{\\\"Annotation\\\":\\\"1.1.\\\\t\\u041e\\u0431\\u044a\\u0435\\u043c \\u043c\\u04" +
                "3e\\u0434\\u0443\\u043b\\u044f, \\u0437.\\u0435. \\u2013 6. \\\\n1.2.\\\\t\\u0410\\u043d\\u043" +
                "d\\u043e\\u0442\\u0430\\u0446\\u0438\\u044f \\u0441\\u043e\\u0434\\u0435\\u0440\\u0436\\u0430" +
                "\\u043d\\u0438\\u044f \\u043c\\u043e\\u0434\\u0443\\u043b\\u044f \\\\n\\u041c\\u043e\\u0434\\u0" +
                "443\\u043b\\u044c \\u043e\\u0442\\u043d\\u043e\\u0441\\u0438\\u0442\\u0441\\u044f \\u043a \\u" +
                "0433\\u0440\\u0443\\u043f\\u043f\\u0435 \\u043c\\u043e\\u0434\\u0443\\u043b\\u0435\\u0439 \\u" +
                "0432\\u0430\\u0440\\u0438\\u0430\\u0442\\u0438\\u0432\\u043d\\u043e\\u0439 \\u0447\\u0430\\u0" +
                "441\\u0442\\u0438 \\u043f\\u043e \\u0432\\u044b\\u0431\\u043e\\u0440\\u0443 \\u0441\\u0442\\u" +
                "0443\\u0434\\u0435\\u043d\\u0442\\u0430 \\u0438 \\u0444\\u043e\\u0440\\u043c\\u0438-\\u0440\\" +
                "u0443\\u0435\\u0442 \\u0441\\u043e\\u0432\\u043e\\u043a\\u0443\\u043f\\u043d\\u043e\\u0441\\u" +
                "0442\\u044c \\u0437\\u043d\\u0430\\u043d\\u0438\\u0439, \\u0443\\u043c\\u0435\\u043d\\u0438\\" +
                "u0439 \\u0438 \\u043d\\u0430\\u0432\\u044b\\u043a\\u043e\\u0432 \\u0432 \\u043e\\u0431\\u043" +
                "b\\u0430\\u0441\\u0442\\u0438 \\u0444\\u043e\\u0440\\u043c\\u0438\\u0440\\u043e\\u0432\\u0430" +
                "\\u043d\\u0438\\u044f \\u0438 \\u0430\\u043d\\u0430\\u043b\\u0438\\u0437\\u0430 \\u0441\\u044" +
                "2\\u0440\\u0430\\u0442\\u0435\\u0433\\u0438\\u0438 \\u0440\\u0430\\u0437\\u0432\\u0438\\u0442" +
                "\\u0438\\u044f, \\u043f\\u0440\\u0438\\u043c\\u0435\\u043d\\u044f\\u044f \\u0437\\u043d\\u043" +
                "0\\u043d\\u0438\\u044f, \\u0443\\u043c\\u0435\\u043d\\u0438\\u044f \\u0438 \\u043d\\u0430\\u0" +
                "432\\u044b\\u043a\\u0438 \\u0432 \\u043e\\u0431\\u043b\\u0430\\u0441\\u0442\\u0438 \\u0441\\u" +
                "0442\\u0440\\u0430\\u0442\\u0435\\u0433\\u0438\\u0438 \\u0438\\u043d\\u043d\\u043e\\u0432\\u0" +
                "430\\u0446\\u0438\\u043e\\u043d\\u043d\\u043e\\u0433\\u043e \\u0440\\u0430\\u0437\\u0432\\u04" +
                "38\\u0442\\u0438\\u044f \\u0431\\u0438\\u0437\\u043d\\u0435\\u0441\\u0430, \\u0443\\u043f\\u0" +
                "440\\u0430\\u0432\\u043b\\u0435\\u043d\\u0438\\u044f \\u043f\\u0440\\u043e\\u0435\\u043a\\u04" +
                "42\\u043e\\u043c, \\u043a\\u043e\\u043d\\u043a\\u0443\\u0440\\u0435\\u043d\\u0442\\u043d\\u04" +
                "3e\\u0439 \\u0440\\u0430\\u0437\\u0432\\u0435\\u0434\\u043a\\u0438 \\u0432 \\u0440\\u0430\\u0" +
                "43c\\u043a\\u0430\\u0445 \\u043e\\u0440\\u0433\\u0430\\u043d\\u0438\\u0437\\u0430\\u0446\\u04" +
                "38\\u043e\\u043d\\u043d\\u043e-\\u0443\\u043f\\u0440\\u0430\\u0432\\u043b\\u0435\\u043d\\u044" +
                "7\\u0435\\u0441\\u043a\\u043e\\u0439 \\u0434\\u0435\\u044f\\u0442\\u0435\\u043b\\u044c\\u043d" +
                "\\u043e\\u0441\\u0442\\u0438 \\u043f\\u0440\\u0435\\u0434\\u043f\\u0440\\u0438\\u044f\\u0442\\" +
                "u0438\\u044f." + new Random().Next() + "\\\\n\\\\n\\\"}\"}";
            request4.Body = request4Body;
            yield return request4;
            request4 = null;
        }
    }
}
